

* gzip javascript files through pre-build step on Release-Linux

* create cache of MethodInfo to use in InvokeEventHandler to optimize use of reflection, and investigate if we can get completely rid 
  of reflection, since it requires "partial trust" on server, which is not supplied by all web hotels for instance

* move all public methods at the top, then all protected, then all private methods, in all classes, and check up the dox for all methods

* make sure script inclusions by default don't mess up spacing in html filter

* modify readme to have fully functioning complete example of Default.aspx page, with complete codebehind, and complete .aspx markup

* create support for "array" pf.lambda type, which allows to be used as an expression for Expression.Iterate, such that
  users may submit a static array of values to stuff such as "for-each", "pf.web.session.set", etc

* entirely modify the way [event] works, and unroll the entire event pf.lambda code, inline into code, upon invocation, to
  support events that modifies the code tree outside of themselves

* create "plugin" support for "for-each", "set", "add" etc, to allow iterating for instance Widgets, and change their properties
  directly to create less verbose code

* verify properties of widgets can be changed immediately after [pf.web.create-widget] without resorting to [oninitialload]

* clean up [pf.html.html2lambda] to allow creating pf.lambda code in HTML

* [flatten] keyword in pf.lambda, to create a string representation of a list of nodes, with optional "separator string"
  between node values/names, possibly as a "formatting expression" defined e.g. like this; "{name}:{value};" to allow for both
  name of node and value of node to become part of string representation

* [split] keyword in pf.lambda, to create node list representation of a string, according to some "split character", and optionally a
  "name split character" to allow for both name and value of node to be set according to the original string, in addition to optionally
  also "type information"

* store timezone (GTM+x) in DateTime when serializing and de-serializing from Hyperlisp

* Active Event to zip many CSS/JavaScript files back to client as one, relying on [pf.web.echo]

* create support for "style" property setters/getters in widgets through pf.lambda optionally can take a list of style names/values, instead
  of like it is now where it's "just a string"

* [lambda.single] to execute specified node in tree

* entirely remove project "phosphorus.tiedown"

* "math" Active Events, taking expressions, evaluating these, and [add], [subtract], [multiply] and [divide]'ing these

* create [insert] active event that allows inserting nodes at a specific position in tree

* Exception hierarchy


