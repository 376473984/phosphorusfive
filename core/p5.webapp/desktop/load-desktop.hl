

/*
 * Creates our "desktop", which basically just allows the user to select which application he wants to start.
 *
 * By default, there's only one application (or module) in P5, which is the Bazar.
 */





/*
 * Including main Micro CSS files, and making sure root "cnt" widget 
 * has the "container-fullscreen" CSS class, in addition to that it's empty.
 *
 * Notice, we also include the "serious" skin at this point.
 */
p5.web.include-css-file:@MICRO/media/main.css
p5.web.include-css-file:@MICRO/media/ext.css
p5.web.include-css-file:@MICRO/media/fonts.css
p5.web.include-css-file:@MICRO/media/skins/serious.css
set-widget-property:cnt
  class:container-fullscreen
clear-widget:cnt





/*
 * Including main desktop CSS file.
 */
p5.web.include-css-file:/desktop/media/main.css





/*
 * Making sure user is logged in, and if not, forcing him to login, before we display the desktop.
 */
whoami
if:x:/-/*/default?value

  /*
   * User is not logged in, forcing him to login, before we allow him to continue.
   */
  load-file:/desktop/login.hl
  eval:x:/-/*

  /*
   * Returning early to avoid evaluating the rest of our file.
   */
  return





/*
 * Now we can determine all modules the user has installed on his system, and create a "desktop icon" for
 * each of these modules, that have a "launch.hl" file, to allow the user to actually launch his apps.
 *
 * Hint, a module doesn't necessary have to include a "launch.hl" file, but if it doesn't, it won't have its
 * own desktop icon created, and will be treated as an invisible "component" instead of an "app".
 */
list-folders:/modules/





/*
 * Listing all "launch.hl" files inside the results of our above folder listing operation.
 */
list-files:x:/@list-folders/*?name
  filter:launch.hl





/*
 * Looping through all "launch.hl" files from above, and creating a widget wrapping each of them, 
 * that will invoke the file, once clicked.
 */
for-each:x:/@list-files/*?name

  /*
   * Checking if currently iterated "app" has a "desktop.hl" widget file, at which point we use this "desktop.hl"
   * file, instead of our "generic" launch widget.
   */
  replace:x:/@_dp?value
    src:/launch.hl
    dest:/desktop.hl
  if
    fetch:x:/0/0?value
      file-exists:x:/@replace?value

    /*
     * Currently iterated app has a desktop widget declaration file.
     *
     * Using this widget instead of our generic "launch app" widget.
     */
    load-file:x:/@replace?value
    add:x:/../*/create-widget/*/widgets/*/div/*/widgets
      src:x:/@load-file/*/*

  else

    /*
     * Currently iterated app does not have a desktop widget, hence we use the generic one.
     */
    split:x:/@_dp?value
      =:/
    eval-x:x:/+/**
    add:x:/../*/create-widget/*/widgets/*/div/*/widgets
      src
        container
          element:a
          href:/{0}
            :x:/@split/0?name
          class:desktop-app shaded rounded air-inner bg
          widgets
            span
              class:desktop-app-name
              innerValue:x:/@split/0?name





/*
 * Creating actual desktop widget.
 *
 * This widget basically becomes your "desktop", with one icon, for each "component" that has a "launch.hl" file.
 */
create-widget
  class:row
  widgets
    div
      class:col
      widgets
        a
          href:#
          role:button
          class:desktop-logout
          innerValue:@"<span class=""icon-power-off""></span>"
          title:Log out
          onclick

            /*
             * Loggin user out of system, by evaluating file responsible for doing just that.
             *
             * This will delete all temporary files for user, log user out, and reload the current URL.
             */
            load-file:/desktop/logout.hl
            eval:x:/-/*
