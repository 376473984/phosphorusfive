<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!--
       Making sure configuration section for Phosphorus Five is recognized as such
      -->
  <configSections>
    <section 
      name="phosphorus" 
      type="p5.webapp.code.configuration.PhosphorusConfiguration" />
  </configSections>

  <!--
      assemblyDirectory =       Folder on disc where we can find Assemlbies to register as Active Event handlers.

      defaultContextUsername =  Context user which to invoke Active Events on behalf, unless another user 
                                is explicitly logged in

      defaultContextRole =      Role which will be associated with defaultContextUsername user, unless another 
                                user, with another role, is explicitly logged in

      authFile =                Path to file on disc that will be used for usernames/passwords and roles
      -->
  <phosphorus 
    assemblyDirectory="/bin/" 
    defaultContextUsername="guest" 
    defaultContextRole="guest" 
    authFile="/auth.hl">

    <!--
        Assemblies that will be loaded and registered as Active Event handlers
        If you create your own "plugin", you should add it to this list.
        Also, there are probably some of these plugins which you can safely remove, depending
        upon which features of P5 you are using.
        -->
    <assemblies>

      <!-- Core assemblies -->
      <add assembly="p5.config" />
      <add assembly="p5.data" />
      <add assembly="p5.events" />
      <add assembly="p5.hyperlambda" />
      <add assembly="p5.io" />
      <add assembly="p5.lambda" />
      <add assembly="p5.math" />
      <add assembly="p5.strings" />
      <add assembly="p5.types" />
      <add assembly="p5.web" />

      <!-- Extras assemblies -->
      <add assembly="p5.crypto" />
      <add assembly="p5.csv" />
      <add assembly="p5.flickrnet" />
      <add assembly="p5.html" />
      <add assembly="p5.imaging" />
      <add assembly="p5.io.authorization" />
      <add assembly="p5.net" />
      <add assembly="p5.security" />
      
      <!-- BETA assemblies, please use at your own risk!
      <add assembly="p5.threading" />
      <add assembly="p5.xml" />
      <add assembly="p5.io.zip" />
      <add assembly="p5.mail" />
      <add assembly="p5.mime" />
      <add assembly="p5.mongo" />
      -->
    </assemblies>
  </phosphorus>


  <!--
      Global application settings.
      Notice, config settings starting with a ".", are in general terms not accessible from p5.lambda directly. Which means they
      can only be retrieved from C# active events, and only if the invoker invokes the [.get-config-setting] with a period
      in front of its name!
      -->
  <appSettings>
    <!--
        The next setting, defines how many maximum ViewState values will be stored in session for each session object.
        If your users are notified often that there was too many viewstate values for the current session, and 
        that their current ViewState key was invalidated, you might consider increasing this value. If you 
        increase it though, the amount of memory used for each session object in your application, will increase, 
        and hence the memory usage of your application will increase. A good number is probably between 5 and 10.

        If you set it to 0, then no ViewState will be stored in the session. This is a major security risk, due to
        the internals of Phosphorus Five, and how it stores p5 lambda objects for Web Widgets in the ViewState.
        If you set it to -1, then the number of ViewState objects per session becomes infinite, which is also a major
        security risk, since then any session can easily use up all memory of your server, simply by pressing reloading
        the page, thousands of times, exhausting your server's memory.
        -->
    <add key=".p5.webapp.viewstate-per-session-entries" value="5" />

    <!--
        The next setting tells Phosphorus Five which Hyperlambda file to execute during startup of your application.
        Normally this file should at the very least create one Active Event, needed as a hook, name [p5.web.create-ui].
        This Active Event is raised by Phosphorus Five during the beginning of a HTTP request, and is expected to load
        the User Interface, or do other things, dependent upon which type of web-server you're setting up.
        
        The default file provided out of the box, initializes "System42", which is a minimalistic example of how
        you could create a Content Management System with a powerful administration user interface.
        -->
    <add key=".p5.webapp.application-startup-file" value="/system42/application-startup.hl" />

    <!--
        The next three settings as for the p5.data project.
        See p5.data documentation to understand how they work.
        -->
    <add key=".p5.data.path" value="/db/" />
    <add key=".p5.data.nodes-per-file" value="32" />
    <add key=".p5.data.files-per-folder" value="256" />

    <!--
        Please use your OWN flickr API key!!
        -->
    <add key=".p5.flickr.api-key" value="f557f81d899a4515c304b4733794cc00" />

    <!--
        How many days the credential cookie is valid in system
        -->
    <add key="p5.security.credential-cookie-valid" value="90" />

    <!--
        Which SMTP and POP3 settings to use, unless explicitly overridden in Active Events.
        Notice, the default settings below here, should work for GMail, as long as you replace the "username" and "password" parts.
        Notice though, to retrieve emails from GMail using POP3, POP3 needs to be explicitly TURNED ON in your GMail settings.
        -->

    <!-- SMTP first -->
    <add key="p5.smtp.server" value="smtp.gmail.com" />
    <add key="p5.smtp.port" value="465" />
    <add key="p5.smtp.use-ssl" value="true" />
    <add key="p5.smtp.username" value="YourGmailUsername@gmail.com" />
    <add key=".p5.smtp.password" value="YourGmailPassword" />

    <!-- Then POP3 -->
    <add key="p5.pop3.server" value="YourGmailUsername@gmail.com" />
    <add key="p5.pop3.port" value="995" />
    <add key="p5.pop3.use-ssl" value="true" />
    <add key="p5.pop3.username" value="YourGmailUsername@gmail.com" />
    <add key=".p5.pop3.password" value="YourGmailPassword" />
  </appSettings>


  <system.web>

    <!--
        Making sure we're using static IDs for controls,
        and making sure 'p5' is prefix for p5.ajax controls.
        Notice, p5.ajax is not dependent upon "AutoID" or "Predictable", which
        means the IDs for p5.ajax, are all cozy, warm and fuzzy!
        -->
    <pages clientIDMode="Static">
      <controls>
        <add 
          assembly="p5.ajax" 
          namespace="p5.ajax.widgets" 
          tagPrefix="p5" />
      </controls>
    </pages>
    
    <!--
        Hint!
        Authorization and Authentication is anyways done internally 
        within Phosphorus Five's "p5.security" plugin.
        -->
    <authentication mode="None" />
    <authorization>
      <allow users="*" />
    </authorization>

    <!--
        Making sure all Hyperlambda files are NOT SERVED by default!
        -->
    <httpHandlers>
      <add verb="*" path="*.hl" type="System.Web.HttpForbiddenHandler" />
    </httpHandlers>

    <!--
        Other system configuration settings
        -->
    <compilation defaultLanguage="C#" debug="true" targetFramework="4.0" />
    <customErrors mode="RemoteOnly" />
    <sessionState mode="InProc" cookieless="false" timeout="20" />
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <httpRuntime requestValidationMode="2.0" />
  </system.web>

  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <handlers>

      <!--
          Making sure we deny serving Hyperlambda files by default.
          This "redundant" setting is necessary to support both Mono and XSP4, in addition 
          to IIS and .Net.
          -->
      <add name="HyperlispDeny" verb="*" path="*.hl" type="System.Web.HttpForbiddenHandler" />
    </handlers>
  </system.webServer>
</configuration>
