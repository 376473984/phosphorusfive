
/*
 * Shows the properties for the currently selected widget
 */




/*
 * Retrieving currently selected widget from WYSIWYG surface
 */
find-widget:wysiwyg-editor-surface
  data-selected




/*
 * Fetching widget, without its children widgets
 */
sys42.get-widget:x:/../*/find-widget/*?value
  _no-children:true




/*
 * Including JavaScript to allow user to update property values with enter/return/carriage-return.
 * This JavaScript simply changes the focus, which triggers any [onchange] ajax events on textboxes
 * the user has focus to originally, of the value of that textbox was changed
 */
include-javascript:@"p5.keyPressChangeAttributeValue = function(e) {
  if(e.keyCode == 13) {
    $('#wysiwyg-controls-element-help').focus();
    return false;
  }
}"





/*
 * Setting the value of our id textbox to the id of the widget
 */
set:x:/../*/create-widget/**/void/=widget-property-id/*/value?value
  src:x:/../*/find-widget/*?value





/*
 * Setting the value of our element textbox to the element of the widget
 */
set:x:/../*/create-widget/**/void/=widget-property-element/*/value?value
  src:x:/../*/sys42.get-widget/*/*/element?value





/*
 * Setting the value of our innerValue textbox to the innerValue of the widget,
 * but if widget is not a [literal], we simply remove the [innerValue] property
 * widget
 */
if:x:/../*/sys42.get-widget/*/*/innerValue

  /*
   * Widget has [innerValue]
   */
  set:x:/../*/create-widget/**/textarea/=widget-property-innerValue/*/innerValue?value
    src:x:/../*/sys42.get-widget/*/*/innerValue?value

else

  /*
   * Widget does NOT have [innerValue]
   */
  set:x:/../*/create-widget/**/container/=widget-property-innerValue-wrp







/*
 * Then sorting widget's properties, making sure ajax event handlers end up at the end, 
 * then everything else alphabetically.
 * Skipping [widgets], [innerValue], [events], [element], [data-selected], [data-usercontrol] and [onclick].
 * We also skip [oninit] since it is only existing in usercontrols, since all other [oninit] ajax events, are renamed to [_oninit],
 * during processing of widget
 */
sort:x:/../*/sys42.get-widget/*/*(!/widgets!/innerValue!/events!/element!/data-selected!/data-usercontrol!/onclick!/oninit)

  /*
   * Checking if this is [innerValue]
   */
  if:x:/../*/_rhs/#?name
    =:innerValue
    return:int:1
  else-if:x:/../*/_lhs/#?name
    =:innerValue
    return:int:-1

  /*
   * Checking if this is an ajax event handler, which should start with [_onXXX],
   * due to renaming process of widget's event handlers during setup of
   * WYSIWYG surface
   */
  if
    fetch:x:/0/0?value
      index-of:x:/../*/_rhs/#?name
        what:_on
    =:int:0
    and
      fetch:x:/0/0
        index-of:x:/../*/_lhs/#?name
          what:_on
      not

    /*
     * [_lhs] is event handler, but not [_rhs], returning
     * [_lhs] as "before" [_rhs]
     */
    return:int:-1
  else-if
    fetch:x:/0/0?value
      index-of:x:/../*/_lhs/#?name
        what:_on
    =:int:0
    and
      fetch:x:/0/0
        index-of:x:/../*/_rhs/#?name
          what:_on
      not

    /*
     * [_rhs] is event handler, but not [_lhs], returning
     * [_rhs] as "before" [_lhs]
     */
    return:int:1


  /*
   * Neither of the sides are ajax events, or both of the sides are
   * ajax active events, returning them sorted alphabetically
   */
  if:x:/../*/_lhs/#?name
    >:x:/../*/_rhs/#?name
    return:1
  if:x:/../*/_lhs/#?name
    <:x:/../*/_rhs/#?name
    return:-1
  return:0







/*
 * Looping through all sorted properties from above, adding them one after the other, until
 * we find our first ajax event handler [_onXXX], at which point we stop, to let our next
 * [for-each] handle our events
 */
for-each:x:/../*/sort/*

  /*
   * Checking if this is an invisible event handler, and if it is, we stop looping
   */
  if
    fetch:x:/0/0?value
      index-of:x:/..for-each/*/_dp/#?name
        what:_on
    =:int:0

    /*
     * This is an event handler, breaking loop
     */
    break

  /*
   * This is not an ajax event handler, creating widget(s) that allows editing property,
   * and remove property from [sort] afterwards. First making sure widget's name, and so on,
   * are correctly passed into [create-widget] invocation.
   * In addition, we check to see if this is our [_initial-focus-property], at which point
   * we add up an [oninit] that sets the focus to property during creation.
   */
  if:x:/../*/_initial-focus-property?value
    =:x:/..for-each/*/_dp/#?name
    add:x:/..for-each/*/add/*/src/*/container/*/widgets/*/container/*/widgets/*/void
      src
        oninit
          send-javascript:@"$('#{0}').focus().select();"
            :x:/../*/_event?value
  set:x:/+2/**/={attribute-name}?value
    src:x:/..for-each/*/_dp/#?name
  set:x:/+/**/={attribute-value}?value
    src:x:/..for-each/*/_dp/#?value
  add:x:/../*/create-widget/*/widgets
    src
      container
        class:col-md-6 col-xs-12 form-group
        widgets
          container
            class:input-group
            widgets
              literal
                element:div
                innerValue:{attribute-name}
                class:input-group-addon
                style:"background-color:rgba(100,255,0,.3);"
              void
                element:input
                type:text
                class:form-control
                value:{attribute-value}
                onkeypress:@"return p5.keyPressChangeAttributeValue(event);"
                onchange
                  get-widget-property:x:/../*/_event?value
                    value
                  eval-x:x:/+/*
                  sys42.wysiwyg-controls.change-selected-widgets-property:{attribute-name}
                    _new-value:x:/../*/get-widget-property/*/*?value
              a
                href:#
                innerValue:@"<span class=""glyphicon glyphicon-remove-sign""></span>"
                class:input-group-addon input-group-addon-force-float
                title:Nullifies attribute's value
                onclick
                  eval-x:x:/+/*/_onok/*/get-parent-widget
                  sys42.confirm-window
                    _header:Confirm action!
                    _body:@"This will nullify the attribute's value, but the attribute will still be there, though without a value. 
Are you sure you wish to do this?"
                    _onok
                      sys42.wysiwyg-controls.change-selected-widgets-property:{attribute-name}
                        _new-value
                      get-parent-widget:x:/../*/_event?value
                      find-widget:x:/-/*?value
                        element:input
                      set-widget-property:x:/-/*?value
                        value:
              a
                href:#
                innerValue:@"<span class=""glyphicon glyphicon-trash""></span>"
                class:input-group-addon input-group-addon-force-float
                title:Entirely removes attribute from widget
                onclick
                  eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]
                  sys42.confirm-window
                    _header:Confirm action!
                    _body:@"This will entirely remove the attribute from widget, are you sure you wish to do this?"
                    _onok
                      sys42.wysiwyg-controls.change-selected-widgets-property:{attribute-name}
                      get-parent-widget:x:/../*/_event?value
                      get-parent-widget:x:/-/*?value
                      delete-widget:x:/-/*?value

  /*
   * Removing currently iterated property from [sort] above, to not confuse next [for-each], 
   * that expects only ajax/JavaScript events
   */
  set:x:/..for-each/*/_dp/#







/*
 * At this pont, [sort] should exclusively contain ajax and JavaScript event handlers. Looping
 * through them all, adding them one at the time
 */
for-each:x:/../*/sort/*

  /*
   * First checking if this is an ajax event handler, or a JavaScript DOM event.
   * Hint; A JavaScript DOM event has content in "value" of node, and if it has
   * not content in "value", then it is an ajax Hyperlisp server-side event
   */
  if:x:/..for-each/*/_dp/#?value

    /*
     * This is a JavaScript client-side DOM event
     * Stripping away the initial "_" from event handler name
     */
    split:x:/..for-each/*/_dp/#?name
      =:int:1

    /*
     * Then passing in JavaScript DOM event name, and value, to [add] invocation below
     */
    set:x:/+3/**/={attribute-name}?value
      src:x:/..if/*/split/1?name
    set:x:/+2/**/={attribute-value}?value
      src:x:/..for-each/*/_dp/#?value

    /*
     * Then adding widget to [create-widget] invocation below loop.
     * But first, forward evaluating innerValue beneath
     */
    eval-x:x:/+/*/*/*/*/*/*/literal/*/innerValue
    add:x:/../*/create-widget/*/widgets
      src
        container
          class:col-md-6 col-xs-12 form-group
          widgets
            container
              class:input-group
              widgets
                literal
                  element:div
                  innerValue:@"<span class=""glyphicon glyphicon-flash""></span> {0}"
                    :{attribute-name}
                  class:input-group-addon
                  style:"background-color:rgba(100,255,0,.3);"
                void
                  element:input
                  type:text
                  class:form-control
                  value:{attribute-value}
                  _event-handler-name:{attribute-name}
                  onchange

                    /*
                     * Getting event handler's name and JavaScript code
                     */
                    get-widget-property:x:/../*/_event?value
                      _event-handler-name
                      value

                    /*
                     * Finding currently selected widget from surface
                     */
                    find-widget:wysiwyg-editor-surface
                      data-selected

                    /*
                     * Applying arguments to active event invocation that updates widget's JavaScript event,
                     * making sure we prepend an underscore ("_") to event name, before applying lambda
                     */
                    add:x:/+2
                      src:_{0}
                        :x:/../*/get-widget-property/*/*/_event-handler-name?value
                    set:x:/+/*?value
                      src:x:/..get-widget-property/*/*/value?value

                    /*
                     * Changing widget's JavaScript event
                     */
                    set-widget-property:x:/../*/find-widget/*?value

                  onfocus

                    /*
                     * Resizing main event handler wrapper widget to a "sane" size for editing JavaScript
                     */
                    get-parent-widget:x:/../*/_event?value
                    get-parent-widget:x:/-/*?value
                    set-widget-property:x:/../*/get-parent-widget/[1,2]/*?value
                      class:col-md-12 form-group

                    /*
                     * Hiding "delete JavaScript DOM event" and "Convert JavaScript DOM event to Hyperlisp event handler" buttons
                     */
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:trash
                    set-widget-property:x:/-/*?value
                      visible:false
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-off
                    set-widget-property:x:/-/*?value
                      visible:false

                  onblur

                    /*
                     * Minimizing main event handler wrapper widget back to original size
                     */
                    get-parent-widget:x:/../*/_event?value
                    get-parent-widget:x:/-/*?value
                    set-widget-property:x:/../*/get-parent-widget/[1,2]/*?value
                      class:col-md-6 form-group

                    /*
                     * Showing "delete JavaScript DOM event" and "Convert JavaScript DOM event to Hyperlisp event handler" buttons
                     */
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:trash
                    set-widget-property:x:/-/*?value
                      visible:true
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-off
                    set-widget-property:x:/-/*?value
                      visible:true

                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-off""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Converts JavaScript client-side DOM event handler to Hyperlisp server-side event handler
                  onclick

                    /*
                     * Foward evaluate expression in [get-parent-widget], inside of [_onok],
                     * to make sure we can retrieve the parent of this button, and not the "OK" button of modal window
                     */
                    eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]
                    sys42.confirm-window
                      _header:Confirm action!
                      _body:@"This will convert your existing client-side JavaScript DOM event to a Hyperlisp server-side ajax event handler, 
are you sure you wish to do this? All JavaScript in your DOM event will be lost!"
                      _onok

                        /*
                         * Getting parent widget of the clicked "conversion" button, see above [eval-x]
                         */
                        get-parent-widget:x:/../*/_event?value

                        /*
                         * Finding input textbox widget, which should be a child of previously found parent widget
                         */
                        find-widget:x:/-/*?value
                          element:input

                        /*
                         * Retrieving eventhandler name (minus the "_" in the beginning, to hide event from WYSIWYG surface),
                         * from hidden attribute on textarea
                         */
                        get-widget-property:x:/-/*?value
                          _event-handler-name

                        /*
                         * Finding currently selected widget from surface
                         */
                        find-widget:wysiwyg-editor-surface
                          data-selected

                        /*
                         * Adding event name to [delete-widget-property] arguments, to delete JavaScript event
                         */
                        add:x:/+
                          src:_{0}
                            :x:/../*/get-widget-property/*/*?value

                        /*
                         * This invocation will now delete ajax event handler from currently selected widget
                         */
                        set-widget-property:x:/../*/find-widget/[1,2]/*?value

                        /*
                         * Then making sure a Hyperlisp server-side ajax event handler, with the same name, is created
                         */
                        add:x:/+
                          src:@"_{0}
  sys42.info-window:Implement something intelligent here"
                            :x:/../*/get-widget-property/*/*?value
                        set-widget-ajax-event:x:/../*/find-widget/[1,2]/*?value

                        /*
                         * Then, for simplicity, we reload properties for currently selected widget
                         */
                        sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/widget-properties.hl
                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-trash""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Entirely removes event handler from widget
                  onclick

                    /*
                     * Forward evaluating [get-parent-widget] inside of [_onok] lambda, such that it gets the
                     * parent widget of this button (the "a" button clicked), and not the "OK" button of modal window
                     */
                    eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]

                    /*
                     * Asking user to confirm deletion of JavaScript DOM event before actually deleting, since it'll
                     * delete all JavaScript in event
                     */
                    sys42.confirm-window
                      _header:Confirm action!
                      _body:@"This will entirely remove your client-side JavaScript DOM event, are you sure you wish to do this?"
                      _onok

                        /*
                         * Finding parent widget of button clicked, not "OK" button, see above comments
                         */
                        get-parent-widget:x:/../*/_event?value

                        /*
                         * Finding textbox widget, since it contains a hidden property that informs us what JavaScript
                         * DOM event we should delete. Then we retrieve this value from textbox' hidden attribute.
                         * Notice, this is returned without the prepending underscore ("_")
                         */
                        find-widget:x:/-/*?value
                          element:input
                        get-widget-property:x:/-/*?value
                          _event-handler-name

                        /*
                         * Then finding currently selected widget in WYSIWYG surface, for then to
                         * delete the attribute that wraps the JavaScript DOM event
                         */
                        find-widget:wysiwyg-editor-surface
                          data-selected
                        add:x:/../*/delete-widget-property
                          src:_{0}
                            :x:/../*/get-widget-property/*/*?value
                        delete-widget-property:x:/../*/find-widget/[1,2]/*?value


                        /*
                         * Finding main container widget for property value, such that we can delete it
                         */
                        get-parent-widget:x:/../*/get-parent-widget/[0,1]/*?value

                        /*
                         * Delete main property wrapper widget
                         */
                        delete-widget:x:/-/*?value
  else

    /*
     * This is an Ajax Hyperlisp server-side event handler
     * Making sure widget's name, and so on, are correctly passed into [create-widget] invocation.
     * But first we must convert lambda to Hyperlisp
     */
    lambda2lisp:x:/..for-each/*/_dp/#/*

    /*
     * Then stripping away the initial "_" from event handler name
     */
    split:x:/..for-each/*/_dp/#?name
      =:int:1

    /*
     * Then passing in event handler name, and value, to [add] invocation below
     */
    set:x:/+4/**/={attribute-name}?value
      src:x:/..else/*/split/1?name
    set:x:/+3/**/={attribute-value}?value
      src:x:/..else/*/lambda2lisp?value

    /*
     * Then adding widget to [create-widget] invocation below loop.
     * But first, forward evaluating innerValue beneath.
     * In addition, we check to see if this is our [_initial-focus-property], at which point
     * we add up an [oninit] that sets the focus to property during creation.
     */
    if:x:/../*/_initial-focus-property?value
      =:{0}
        :x:/..for-each/*/_dp/#?name
      add:x:/..else/*/add/*/src/*/container/*/widgets/*/container/*/widgets/*/textarea
        src
          oninit
            send-javascript:@"$('#{0}').focus().select();"
              :x:/../*/_event?value

      /*
       * Also, since this event handler was just created now, we add up some 
       * "default Hyperlisp" to it
       */
      set:x:/..else/*/add/*/src/*/container/*/widgets/*/container/*/widgets/*/textarea/*/innerValue?value
        src:@"sys42.info-window:Hello World 2.0"
    eval-x:x:/+/*/*/*/*/*/*/literal/*/innerValue
    add:x:/../*/create-widget/*/widgets
      src
        container
          class:col-md-6 col-xs-12 form-group
          widgets
            container
              class:input-group
              widgets
                literal
                  element:div
                  innerValue:@"<span class=""glyphicon glyphicon-flash""></span> {0}"
                    :{attribute-name}
                  class:input-group-addon
                  style:"background-color:rgba(100,255,0,.3);"
                textarea
                  class:form-control
                  innerValue:{attribute-value}
                  rows:1
                  _event-handler-name:{attribute-name}
                  placeholder:Implement some Hyperlisp code here
                  onchange
                    raise-widget-ajax-event:x:/../*/_event?value
                      _onupdate
                  _onupdate

                    /*
                     * Converting from Hyperlisp to lambda inside a try/catch block,
                     * in case there are syntax errors in Hyperlisp
                     */
                    try

                      /*
                       * Getting event handler's name and Hyperlisp code
                       */
                      get-widget-property:x:/../*/_event?value
                        _event-handler-name
                        value

                      /*
                       * Converting Hyperlisp to lambda
                       */
                      lisp2lambda:x:/..try/*/get-widget-property/*/1?value

                      /*
                       * Resetting CSS class of textarea, in case there are any previous syntax errors,
                       * that have added the "error CSS classes" to it
                       */
                      set-widget-property:x:/../*/_event?value
                        class:form-control

                      /*
                       * Finding currently selected widget from surface
                       */
                      find-widget:wysiwyg-editor-surface
                        data-selected

                      /*
                       * Applying arguments to active event invocation that updates widget's ajax event,
                       * making sure we prepend an underscore ("_") to event name, before applying lambda
                       */
                      add:x:/+2
                        src:_{0}
                          :x:/..try/*/get-widget-property/*/*/_event-handler-name?value
                      add:x:/+/*
                        src:x:/..try/*/lisp2lambda/*

                      /*
                       * Changing widget's ajax event
                       */
                      set-widget-ajax-event:x:/..try/*/find-widget/*?value
                    catch

                      /*
                       * Something went wrong! Displaying error message to user, before
                       * applying "error CSS class" to textarea
                       */
                      sys42.info-window:@"Oops, syntax error in Hyperlisp. Probably malformatted child node collections. Please correct! Value was NOT saved!"
                        _error:true
                        _time:more
                      set-widget-property:x:/../*/_event?value
                        class:form-control error

                  onfocus

                    /*
                     * Resizing main event handler wrapper widget to a "sane" size for editing Hyperlisp
                     */
                    get-parent-widget:x:/../*/_event?value
                    get-parent-widget:x:/-/*?value
                    set-widget-property:x:/../*/get-parent-widget/[1,2]/*?value
                      class:col-md-12 form-group

                    /*
                     * Resizing event handler textarea to have multiple rows, to ease editing
                     */
                    set-widget-property:x:/../*/_event?value
                      rows:16

                    /*
                     * Showing the "minimize" button, "Hyperlisp wizard" button, and the "CodeMirror" button
                     */
                    find-widget:x:/../*/get-parent-widget/[0,1]/*?value
                      _close-button
                    set-widget-property:x:/-/*?value
                      visible:true
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:pencil
                    set-widget-property:x:/-/*?value
                      visible:true
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-info-sign
                      element:a
                    set-widget-property:x:/-/*?value
                      visible:true

                    /*
                     * Hiding "delete event handler" and "nullify event handler" buttons
                     */
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:trash
                    set-widget-property:x:/-/*?value
                      visible:false
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-off
                    set-widget-property:x:/-/*?value
                      visible:false

                    /*
                     * Checking if CodeMirror module is enabled, and if so, we load up
                     * CodeMirror editor
                     */
                    get-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
                    if:x:/-/*?value.bool
                      =:bool:true

                      /*
                       * Applying arguments to loader
                       */
                      set:x:/+/*/*?name
                        src:x:/../*/_event?value

                      /*
                       * Loading up CodeMirror, wrapping the textarea
                       */
                      sys42.execute-lisp-file:/system42/editors/codemirror/include-codemirror.hl
                        _editor
                          _name
                            mode:hyperlisp
                            autocomplete:true
                            autofocus:true
                            fullscreen:true
                            height:334px
                            raise-update:true

                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-off""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Converts Hyperlisp server-side ajax event handler to JavaScript client-side DOM event
                  onclick

                    /*
                     * Foward evaluate expression in [get-parent-widget], inside of [_onok],
                     * to make sure we can retrieve the parent of this button, and not the "OK" button of modal window
                     */
                    eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]
                    sys42.confirm-window
                      _header:Confirm action!
                      _body:@"This will convert your existing server-side Hyperlisp ajax event handler to a JavaScript client-side DOM event, 
are you sure you wish to do this? All Hyperlisp in your event handler will be lost!"
                      _onok

                        /*
                         * Getting parent widget of the clicked "conversion" button, see above [eval-x]
                         */
                        get-parent-widget:x:/../*/_event?value

                        /*
                         * Finding textarea widget, which should be a child of previously found parent widget
                         */
                        find-widget:x:/-/*?value
                          element:textarea

                        /*
                         * Retrieving eventhandler name (minus the "_" in the beginning, to hide event from WYSIWYG surface),
                         * from hidden attribute on textarea
                         */
                        get-widget-property:x:/-/*?value
                          _event-handler-name

                        /*
                         * Finding currently selected widget from surface
                         */
                        find-widget:wysiwyg-editor-surface
                          data-selected

                        /*
                         * Adding event name to [set-widget-ajax-event] arguments, to delete ajax event
                         */
                        add:x:/+
                          src:_{0}
                            :x:/../*/get-widget-property/*/*?value

                        /*
                         * This invocation will now delete ajax event handler from currently selected widget
                         */
                        set-widget-ajax-event:x:/../*/find-widget/[1,2]/*?value

                        /*
                         * Then making sure a JavaScript client-side DOM event, with the same name, is created
                         */
                        add:x:/+
                          src:@"_{0}:@""alert('Implement something intelligent here');return false;"""
                            :x:/../*/get-widget-property/*/*?value
                        set-widget-property:x:/../*/find-widget/[1,2]/*?value

                        /*
                         * Then, for simplicity, we reload properties for currently selected widget
                         */
                        sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/widget-properties.hl
                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-trash""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Entirely removes event handler from widget
                  onclick

                    /*
                     * Foward evaluate expression in [get-parent-widget], inside of [_onok],
                     * to make sure we can retrieve the parent of this button, and not the "OK" button of modal window
                     */
                    eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]
                    eval-x:x:/+/*/_onok/*/get-parent-widget/[0,1]
                    sys42.confirm-window
                      _header:Confirm action!
                      _body:@"This will entirely remove your server-side Hyperlisp ajax event handler, are you sure you wish to do this?"
                      _onok

                        /*
                         * Finding parent widget of button clicked, not "OK" button, see above comments
                         */
                        get-parent-widget:x:/../*/_event?value

                        /*
                         * Finding textarea widget, since it contains a hidden property that informs us what Hyperlisp
                         * server-side ajax event handler we should delete. Then we retrieve this value from textarea's hidden attribute.
                         * Notice, this is returned without the prepending underscore ("_")
                         */
                        find-widget:x:/-/*?value
                          element:textarea
                        get-widget-property:x:/-/*?value
                          _event-handler-name

                        /*
                         * Then finding currently selected widget in WYSIWYG surface, for then to
                         * delete the Hyperlisp server-side ajax event handler
                         */
                        find-widget:wysiwyg-editor-surface
                          data-selected
                        add:x:/../*/set-widget-ajax-event
                          src:_{0}
                            :x:/../*/get-widget-property/*/*?value
                        set-widget-ajax-event:x:/../*/find-widget/[1,2]/*?value


                        /*
                         * Finding main container widget for property value, such that we can delete it
                         */
                        get-parent-widget:x:/../*/get-parent-widget/[0,1]/*?value

                        /*
                         * Delete main property wrapper widget
                         */
                        delete-widget:x:/-/*?value
                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-info-sign""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Open up Hyperlisp Wizard
                  visible:false
                  onclick
                    find-first-ancestor-widget:x:/../*/_event?value
                      element:div
                    find-widget:x:/-/*?value
                      element:textarea
                    set:x:/../*/sys42.execute-lisp-file/**/_textarea?value
                      src:x:/./-/*?value
                    sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/create-hyperlisp-wizard.hl
                      _textarea
                      _onok
                        _textarea
                        get-widget-property:x:/-?value
                          value
                        lisp2lambda:x:/-/*/*?value
                        set:x:/-/*//
                        add:x:/../*/lisp2lambda
                          lisp2lambda:x:/../*/_code?value
                        lambda2lisp:x:/../*/lisp2lambda/*
                        set-widget-property:x:/../*/_textarea?value
                          value:x:/../*/lambda2lisp?value
                        raise-widget-ajax-event:x:/../*/_textarea?value
                          _onupdate
                        send-javascript:@"window.{0}.getDoc().setValue(p5.$('{0}').el.value);"
                          :x:/../*/_textarea?value
                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-pencil""></span>"
                  class:input-group-addon input-group-addon-force-float
                  title:Toggle CodeMirror editor
                  visible:false
                  onclick

                    /*
                     * Checking if CodeMirror module is enabled, and if so, we disable it.
                     * Otherwise we enable it, and store in session whether or not
                     * CodeMirror editing is chosen
                     */
                    get-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
                    if:x:/-/*?value.bool
                      =:bool:true

                      /*
                       * CodeMirror editing is enabled, hence we disable it
                       */
                      get-parent-widget:x:/../*/_event?value
                      find-widget:x:/-/*?value
                        element:textarea
                      send-javascript:@"window.{0}.toTextArea();"
                        :x:/..if/*/find-widget/*?value

                      /*
                       * Making sure we remove value from session that stores the fact that CodeMirror
                       * editing is enabled
                       */
                      set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
                    else

                      /*
                       * CodeMirror editing is NOT enabled, hence we enable it, and store in
                       * session that it is enabled.
                       * Applying argument to "CodeMirror" loading file first
                       */
                      get-parent-widget:x:/../*/_event?value
                      find-widget:x:/-/*?value
                        element:textarea
                      set:x:/+/*/*?name
                        src:x:/..else/*/find-widget/*?value

                      /*
                       * Loading up CodeMirror, wrapping the textarea
                       */
                      sys42.execute-lisp-file:/system42/editors/codemirror/include-codemirror.hl
                        _editor
                          _name
                            mode:hyperlisp
                            autocomplete:true
                            autofocus:false
                            fullscreen:true
                            height:334px
                            raise-update:true

                      /*
                       * Making sure we store in session that CodeMirror module is loaded, to allow "toggling"
                       * functionality when clicking pencil
                       */
                      set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
                        src:true
                a
                  href:#
                  innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
                  _close-button
                  class:input-group-addon input-group-addon-force-float
                  title:Close editor
                  visible:false
                  onclick

                    /*
                     * Minimizing main event handler wrapper widget back to original size
                     */
                    get-parent-widget:x:/../*/_event?value
                    get-parent-widget:x:/-/*?value
                    set-widget-property:x:/../*/get-parent-widget/[1,2]/*?value
                      class:col-md-6 form-group

                    /*
                     * Resizing event handler textarea to have multiple rows,to ease editing
                     */
                    find-widget:x:/../*/get-parent-widget/[0,1]/*?value
                      element:textarea
                    set-widget-property:x:/-/*?value
                      rows:1

                    /*
                     * Hiding "minimize" button, "Hyperlisp wizard" button and "CodeMirror toggle" button
                     */
                    set-widget-property:x:/../*/_event?value
                      visible:false
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:pencil
                    set-widget-property:x:/-/*?value
                      visible:false
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-info-sign
                      element:a
                    set-widget-property:x:/-/*?value
                      visible:false
                      

                    /*
                     * Showing "delete event handler" and "nullify event handler" buttons
                     */
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:trash
                    set-widget-property:x:/-/*?value
                      visible:true
                    find-widget-like:x:/../*/get-parent-widget/[0,1]/*?value
                      innerValue:glyphicon-off
                    set-widget-property:x:/-/*?value
                      visible:true

                    /*
                     * Checking if CodeMirror editor is loaded, and if so, making sure
                     * we destroy it on client-side
                     */
                    get-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
                    if:x:/-/*?value.bool
                      =:bool:true
                      send-javascript:@"window.{0}.toTextArea();"
                        :x:/../*/find-widget/*?value







  






/*
 * Creating properties for selected widget, but first making sure
 * container to stuff properties into is visible, and deleting
 * any previously property widgets
 */
clear-widget:wysiwyg-controls-properties
set-widget-property:wysiwyg-controls-properties
  visible:true
create-widget
  parent:wysiwyg-controls-properties
  class:col-xs-12 rounded-corners bg-success prepend-bottom
  oninit

    /*
     * Creating widget's lambda event list
     */
    sys42.wysiwyg-controls.create-events-for-selected
  widgets

    literal
      element:h3
      class:prepend-top col-xs-12
      innerValue:Widget properties



    /*
     * Widget's ID
     */
    container
      class:col-md-6 col-xs-12 form-group prepend-top
      widgets
        container
          class:input-group
          widgets
            literal
              element:div
              innerValue:id
              class:input-group-addon
              style:"background-color:rgba(255,100,0,.3);"
              title:This property cannot be removed!
            void:widget-property-id
              element:input
              type:text
              accesskey:I
              class:form-control
              placeholder:id ...
              title:@"The id of a widget, allows you to retrieve the widget's value, and manipulate the widget, using the id. The id attribute, must be unique for each widget in your page. Shortcut; I"
              value
              onkeypress:@"return p5.keyPressChangeAttributeValue(event);"
              onchange
                sys42.wysiwyg-controls.change-widgets-id
              events





                /*
                 * Invoked when widget's id attribute is changed
                 */
                sys42.wysiwyg-controls.change-widgets-id

                  /*
                   * Retrieving the new id from value of textbox, and trimming it
                   */
                  get-widget-property:x:/../*/_event?value
                    value
                  trim:x:/-/*/*?value

                  /*
                   * Retrieving selected widget, such that we can check if the user supplies the
                   * existing widget's id, which might happen, if the user supplies first an id for
                   * a widget that exists on page, and then changes the id back to whatever it was
                   * before he tried to change it
                   */
                  find-widget:wysiwyg-editor-surface
                    data-selected

                  /*
                   * Checking if id was not changed, which might occur occassionally, if user provides and
                   * id for another existing widget, and then changes the id back to what it was
                   */
                  if:x:/../*/trim?value
                    =:x:/../*/find-widget/*?value

                    /*
                     * The same id as widget already has was provided, resetting the CSS class of
                     * id input textbox, and returning early. No needs to do any updates at all
                     */
                    set-widget-property:x:/../*/_event?value
                      class:form-control
                      value:x:/../*/trim?value

                    /*
                     * Returning early
                     */
                    return

                  /*
                   * Checking if user provided an "empty" id, at which case, we need to create an
                   * automatic id, and set the textbox value to that value
                   */
                  if:x:/../*/trim?value
                    =:

                    /*
                     * User provided an "empty" id, creating an automatic id, informing user, and re-databinding 
                     * select widget dropdown listbox
                     */
                    set-widget-property:x:/../*/find-widget/*?value
                      id

                    /*
                     * Informing user what just happened
                     */
                    sys42.info-window:@"An 'automatic id' was created for your widget"

                    /*
                     * Then we need to re-databind our select dropdown listbox, and change the value
                     * of our id textbox to the automatically generated id, before returning early
                     */
                    sys42.wysiwyg-controls.databind-select-widget-dropdown

                    /*
                     * Since the widget was given an "automatically create" new id, we need to re-fetch
                     * the selected widget, to know which widget we're dealing with, and then use its id
                     * as the value of our id textbox
                     */
                    find-widget:wysiwyg-editor-surface
                      data-selected
                    set-widget-property:x:/../*/_event?value
                      value:x:/./-/*?value

                    /*
                     * Returning early, to avoid evaluating logic beneath
                     */
                    return

                  /*
                   * Checking if another widget on page has the same id as user typed into textbox
                   */
                  if
                    fetch:x:/0/0?value
                      widget-exist:x:/../*/trim?value

                    /*
                     * Another widget on page already had that id, warning user, and returning without updating the id
                     */
                    sys42.info-window:@"Another widget with the same id exists from before on page, please provide a unique id,
or supply an 'empty' value to have an automatically generated id created"
                      _error:true
                      _time:more

                    /*
                     * Setting id textbox into "error mode"
                     */
                    set-widget-property:x:/../*/_event?value
                      class:error form-control

                    /*
                     * Giving focus to id textbox
                     */
                    send-javascript:@"$('#widget-property-id').focus().select();"

                    /*
                     * Returning early
                     */
                    return

                  /*
                   * Then checking that id is a legal ID for an HTML element, according to w3c's rules.
                   * Though, we are "slightly more restrict" than the HTML5 standard, to avoid having "funny ids",
                   * containing characters such as '#', '$', '%' and '&' etc ...
                   */
                  match:x:/../*/trim?value
                    what:regex:/^[a-z0-9-_]+$/i
                  if:x:/-/*/*?name
                    not

                    /*
                     * Not a valid id! Informing user, adding error CSS class to id textbox, and returning early
                     */
                    sys42.info-window:@"Sorry, that id is too 'funny' for me to accept!"
                      _error:true
                      _time:more
                    send-javascript:@"$('#widget-property-id').focus().select();"
                    return

                  /*
                   * Here we have finally successfully found an id for our widget that is legal, and not in use
                   * by other widgets. Hence, changing the widget's id, and removing any "error mode classes" 
                   * on id textbox
                   */
                  set-widget-property:x:/../*/_event?value
                    class:form-control
                  eval-x:x:/+/*
                  sys42.wysiwyg-controls.change-selected-widgets-property:id
                    _new-value:x:/../*/trim?value

                  /*
                   * Updating the "select widget" dropdown listbox, since id of widget
                   * changed
                   */
                  sys42.wysiwyg-controls.databind-select-widget-dropdown

            /*
             * Help button for [id] property of widget
             */
            a:wysiwyg-controls-id-help
              href:#
              class:input-group-addon input-group-addon-force-float
              innerValue:@"<span class=""glyphicon glyphicon-info-sign""></span>"
              title:Help me with the [id] property please ...
              onclick
                sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/helpers/id-help.hl





    /*
     * Widget's [element] property
     */
    container
      class:col-md-6 col-xs-12 form-group prepend-top
      widgets
        container
          class:input-group
          widgets
            literal
              element:div
              innerValue:element
              class:input-group-addon
              style:"background-color:rgba(255,100,0,.3);"
              title:This property cannot be removed!
            void:widget-property-element
              element:input
              type:text
              accesskey:E
              class:form-control
              placeholder:element ...
              title:@"The element attribute of a widget, defines which HTML element your widget is being rendered with, and has implications for among other things its appearance. Shortcut; E"
              value
              onkeypress:@"return p5.keyPressChangeAttributeValue(event);"
              onchange
                sys42.wysiwyg-controls.change-selected-widgets-element
              events





                /*
                 * Changes the HTML element of widget, according to textbox' value
                 */
                sys42.wysiwyg-controls.change-selected-widgets-element

                  /*
                   * Retrieving the new element value for widget from textbox
                   */
                  get-widget-property:widget-property-element
                    value

                  /*
                   * Checking that the newly supplied element is legal according to the HTML5 standard 
                   * (plus some Phosphorus Five restrictions, such as not allowing multiple forms, etc)
                   */
                  sys42.wysiwyg-controls.is-legal-html-element:x:/../*/get-widget-property/*/*?value
                  if:x:/-?value
                    !=:bool:true

                    /*
                     * The new element name was not legal. Warning user, setting some error CSS classes on
                     * textbox, before returning early
                     */
                    sys42.info-window:@"I am sorry but I cannot accept that as the value for your element! Please click the question mark, if you're not sure about which element to use for your widget"
                      _time:more
                      _error:true
                    set-widget-property:widget-property-element
                      class:form-control error
                    send-javascript:@"$('#widget-property-element').select().focus();"
                    return

                  /*
                   * Element value is legal!
                   * First resetting any error CSS classes on widget's element property textbox
                   */
                  set-widget-property:widget-property-element
                    class:form-control

                  /*
                   * Then updating widget's element property, but first "forward evaluating" expression inside
                   * of invocation to active event that changes the element property
                   */
                  eval-x:x:/+/*
                  sys42.wysiwyg-controls.change-selected-widgets-property:element
                    _new-value:x:/../*/get-widget-property/*/*?value





                /*
                 * Returns true if [_arg] is a legal HTML element name
                 */
                sys42.wysiwyg-controls.is-legal-html-element

                  /*
                   * Checking element type
                   */
                  switch:x:/../*/_arg?value
                    case:object
                    case:embed

                      /*
                       * First the obvious cases, such as whining about <object> and <embed>
                       */
                      sys42.confirm-window
                        _header:Does not compute!! - #%&%$%&/
                        _body:@"<img src=""/media/images/dangerous-shit.jpg"" style=""float:right;"" /><p>Seriously? Are you 
<strong>really going to use the &lt;object&gt; or &lt;embed&gt; element ...?</strong></p>
<blockquote>The &lt;object&gt; element leads to ActiveX, ActiveX leads to Silverlight, Silverlight leads to the dark side!!</blockquote>
<p>Do <strong>NOT USE THE OBJECT ELEMENT</strong>! It facilitates for virus and other malware being installed on your
user's computers! I will allow it, but only if I can get to do some serious whining first!</p>
<p>I cannot possibly emphasize this strongly enough; &lt;object&gt; is seriously outdatet! Your apps <strong>will not work on iPhones, iPads,
Androids, probably not on Linux and Mac OS X neither</strong>, or most other modern computing platforms! In addition your users risks having 
viruses and other crapware installed!</p>
<p>Not even Microsoft suggests using the &lt;object&gt; element anymore ...!!</p>
<p>I have changed the element to object, and I won't deny you to use it, but I would <strong>strongly encourage you to think again about
this choice!</strong></p>"
                        _onok
                          sys42.info-window:@"Please change your element back to something that's not considered a CRAPWARE HTML ELEMENT!"
                            _time:more
                            _error:true
                      return:bool:true
                    default

                      /*
                       * Then loading up all legal HTML5 elements (minus some special cases), and check if element
                       * can be found in this list
                       */
                      load-file:/system42/cms/page-editor/editors/controls/helpers/legal-elements.hl
                      if:x:@"/-/*/*/""{0}"""
                        :x:/../*/_arg?value
                        and:x:/../*/_arg?value
                          !=:_header

                        /*
                         * Element was found in "legal HTML5 element list", returning success to caller
                         */
                        return:bool:true

                      /*
                       * Element was *NOT* found in "legal HTML5 element list", returning failure to caller
                       */
                      return:bool:false

            /*
             * Help button for [element] property of widget
             */
            a:wysiwyg-controls-element-help
              href:#
              class:input-group-addon input-group-addon-force-float
              innerValue:@"<span class=""glyphicon glyphicon-info-sign""></span>"
              title:Help me with the [element] property please ...
              onclick
                sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/change-element.hl






    /*
     * Widget's [innerValue]
     */
    container:widget-property-innerValue-wrp
      class:col-md-6 col-xs-12 form-group
      widgets
        container
          class:input-group
          widgets
            literal
              element:div
              innerValue:innerValue
              class:input-group-addon
              style:"background-color:rgba(255,100,0,.3);"
              title:This property cannot be removed!
            textarea:widget-property-innerValue
              rows:1
              accesskey:V
              class:form-control
              placeholder:innerValue, text or HTML content of widget ...
              title:@"The innerValue of a widget, is a piece of text, or HTML, that is the 'displayed' parts of a widget. Basically, a widget's content. Shortcut; V"
              innerValue
              onchange

                /*
                 * Retrieving new text or HTML
                 */
                get-widget-property:x:/../*/_event?value
                  value

                /*
                 * Setting new value to currently selected widget's [innerValue] property
                 */
                eval-x:x:/+/*
                sys42.wysiwyg-controls.change-selected-widgets-property:innerValue
                  _new-value:x:/../*/get-widget-property/*/*?value
              onfocus

                /*
                 * Resizing main [innerValue] wrapper widget to a "sane" size for editing
                 */
                set-widget-property:widget-property-innerValue-wrp
                  class:col-md-12 form-group

                /*
                 * Resizing [innerValue] textarea to have multiple rows,to ease editing
                 */
                set-widget-property:widget-property-innerValue
                  rows:12

                /*
                 * Showing the "minimize" button
                 */
                set-widget-property:wysiwyg-controls-innerValue-close
                  visible:true

                /*
                 * Showing the "HTML editor" button, but only if element is a "block level" element, since
                 * otherwise CKEditor messes up HTML by adding "p" HTML elements, and other illegal HTML values
                 */
                sys42.wysiwyg-controls.selected-widget-allows-block-level-content
                if:x:/-?value
                  =:bool:true
                  set-widget-property:wysiwyg-controls-innerValue-html-editor
                    visible:true

                  /*
                   * Checking if user has previously chosen the HTML editor, and if so, immediately
                   * launching the HTML editor
                   */
                  get-session-value:sys42.wysiwyg-controls.innerValue-html-view
                  if:x:/-/*?value.bool
                    =:bool:true

                    /*
                     * Initiating HTML editor view
                     * Setting CKEditor's basepath, notice this must occur BEFORE 
                     * we include the CKEditor's JavaScript files!
                     */
                    include-javascript:"window.CKEDITOR_BASEPATH='/system42/editors/ckeditor/';"

                    /*
                     * Including CKEditor's JavaScript file on client-side
                     */
                    include-javascript-file:@"/system42/editors/ckeditor/ckeditor.js"

                    /*
                     * Sending JavaScript to client that replaces textarea with CKEditor instance
                     */
                    send-javascript:@"CKEDITOR.replace('widget-property-innerValue',{
  contentsCss: [CKEDITOR.basePath + 'contents.css', '/media/bootstrap/css/bootstrap.min.css'],
  allowedContent: true,
  height:381
});
CKEDITOR.instances['widget-property-innerValue'].on('change', function() { 
  CKEDITOR.instances['widget-property-innerValue'].updateElement();
});"

            /*
             * HTML button (CKEditor "launcher" button) for [innerValue] property of widget
             */
            a:wysiwyg-controls-innerValue-html-editor
              href:#
              visible:false
              class:input-group-addon input-group-addon-force-float
              innerValue:@"<span class=""glyphicon glyphicon-pencil""></span>"
              title:Toggles the HTML WYSIWYG editor for editing the widget's innerValue ...
              onclick

                /*
                 * Checking if we're already in HTML editor view, and if so, destroying the editor,
                 * otherwise initiating HTML editor view
                 */
                get-session-value:sys42.wysiwyg-controls.innerValue-html-view
                if:x:/-/*?value.bool
                  =:bool:true

                  /*
                   * We're already in HTML editor view, destroying HTML editor, and turning back to textarea view.
                   * Deleting session value that signals "CKEditor mode"
                   */
                  set-session-value:sys42.wysiwyg-controls.innerValue-html-view

                  /*
                   * Sending JavaScript to client that actually destroys CKEditor
                   */
                  send-javascript:@"CKEDITOR.instances['widget-property-innerValue'].destroy(true);"

                  /*
                   * Making sure we raise the "onchange" event to have field value reflect in WYSIWYG surface
                   */
                  raise-widget-ajax-event:widget-property-innerValue
                    onchange

                else

                  /*
                   * Initiating HTML editor view
                   * Setting CKEditor's basepath, notice this must occur BEFORE 
                   * we include the CKEditor's JavaScript files!
                   */
                  include-javascript:"window.CKEDITOR_BASEPATH='/system42/editors/ckeditor/';"

                  /*
                   * Including CKEditor's JavaScript file on client-side
                   */
                  include-javascript-file:@"/system42/editors/ckeditor/ckeditor.js"

                  /*
                   * Sending JavaScript to client that replaces textarea with CKEditor instance
                   */
                  send-javascript:@"CKEDITOR.replace('widget-property-innerValue',{
  contentsCss: [CKEDITOR.basePath + 'contents.css', '/media/bootstrap/css/bootstrap.min.css'],
  allowedContent: true,
  height:381
});
CKEDITOR.instances['widget-property-innerValue'].on('change', function() { 
  CKEDITOR.instances['widget-property-innerValue'].updateElement();
});"

                  /*
                   * Storing the fact that we're in "CKEditor mode" in session, such that we can destroy editor
                   * correctly, when "minimize" button is clicked
                   */
                  set-session-value:sys42.wysiwyg-controls.innerValue-html-view
                    src:true

            /*
             * Close button for [innerValue] property of widget, to "minimize" innerValue, such
             * that it no longer fills the entire screen
             */
            a:wysiwyg-controls-innerValue-close
              href:#
              visible:false
              class:input-group-addon input-group-addon-force-float
              innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
              title:Close the innerValue editor. Shortcut; X
              accesskey:X
              onclick

                /*
                 * Resizing main [innerValue] wrapper widget to "minimize" it
                 */
                set-widget-property:widget-property-innerValue-wrp
                  class:col-md-6 col-xs-12 form-group

                /*
                 * Resizing [innerValue] textarea to have multiple rows,to ease editing
                 */
                set-widget-property:widget-property-innerValue
                  rows:1

                /*
                 * Hiding the "minimize" button
                 */
                set-widget-property:wysiwyg-controls-innerValue-close
                  visible:false

                /*
                 * Hiding the "HTML editor" button
                 */
                set-widget-property:wysiwyg-controls-innerValue-html-editor
                  visible:false

                /*
                 * Checking if we're in "CKEditor editing mode", and if so, making sure we
                 * destroy the CKEditor. Notice, if element type, cannot handle HTML editor, then
                 * the session value can still be set, without having the HTML editor ever being launched
                 */
                get-session-value:sys42.wysiwyg-controls.innerValue-html-view
                if:x:/-/*?value
                  and
                    sys42.wysiwyg-controls.selected-widget-allows-block-level-content

                  /*
                   * Sending JavaScript to client that actually destroys CKEditor
                   */
                  send-javascript:@"CKEDITOR.instances['widget-property-innerValue'].destroy(true);"

                  /*
                   * Making sure we raise the "onchange" event to have field value reflect in WYSIWYG surface
                   */
                  raise-widget-ajax-event:widget-property-innerValue
                    onchange




  /*
   * Lambda events for currently selected widget's properties widget
   */
  events

    /*
     * Changes the given property [_arg] of the currently selected widget to [_new-value]'s value.
     * Can also "nullify" an attribute, if no value of [_new-value] is supplied, in adddition
     * to entirely remove the attribute, if no [_new-value] node is supplied at all
     */
    sys42.wysiwyg-controls.change-selected-widgets-property

      /*
       * Retrieving selected widget
       */
      find-widget:wysiwyg-editor-surface
        data-selected

      /*
       * Checking if caller provided a new value, which is not the case if user wants
       * to "nullify" attribute, or delete attribute entirely
       */
      if:x:/../*/_new-value?value

        /*
         * User provided a new value for property of widget. 
         * First applying arguments to update operation
         */
        add:x:/+2
          src:x:/../*/_arg?value
        set:x:/+/0?value
          src:x:/../*/_new-value?value

        /*
         * Then updating widget's property
         */
        set-widget-property:x:/../*/find-widget/*?value
      else-if:x:/../*/_new-value

        /*
         * Caller provided a 'null value', first applying argument, before
         * nullifying widget's property
         */
        add:x:/+
          src:x:/../*/_arg?value
        set-widget-property:x:/../*/find-widget/*?value
      else

        /*
         * Caller did NOT provide a new value for property of widget,
         * but rather wanted to remove property entirely.
         * First applying argument to delete property operation, then
         * deleting property
         */
        add:x:/+
          src:x:/../*/_arg?value
        delete-widget-property:x:/../*/find-widget/*?value





    /*
     * Creates the Active Events (Action Subscribers) for currently selected widget.
     * Optionally takes an [_arg], to Active Event to immediately enable editing for
     */
    sys42.wysiwyg-controls.create-events-for-selected

      /*
       * First we delete previous table with list of lambda events, if it exists
       */
      if
        fetch:x:/0/0?value
          widget-exist:wysiwyg-controls-action-subscribers

        /*
         * There has been a table with widget's events previously created, deleting it, 
         * such that we can re-create it
         */
        delete-widget:wysiwyg-controls-action-subscribers

      /*
       * Then retrieving currently selected widget, and checking if it has any lambd events, 
       * before creating table wrapping lambda events
       */
      find-widget:wysiwyg-editor-surface
        data-selected
      sys42.get-widget:x:/-/*?value
        _no-children:true

      /*
       * Checking if currently selected widget has lambda [events], before proceeding
       */
      if:x:/../*/sys42.get-widget/*/*/events/*?count
        >:int:0

        /*
         * Currently selected widget has lambda events, adding a table to main widget that shows them
         */
        databind:x:/..if/*/create-widget/**/element/=tbody/./*/widgets
          src:x:/../*/sys42.get-widget/*/*/events/*
          template
            tr
              style:"cursor:pointer;"
              {_active-event-name}:x:?name
              _code-view-visible:false
              title:Click to toggle Hyperlisp editor for specified Action Subscriber
              onclick

                /*
                 * Checking if "code view" for lambda event is already visible, and if so, we
                 * remove it. Otherwise, we show code view. This allows "toggle functionality" on the
                 * table row that declares the lambda event
                 */
                get-widget-property:x:/../*/_event?value
                  _code-view-visible
                  _active-event-name
                if:x:/-/*/0?value.bool
                  =:bool:true

                  /*
                   * Code view is visible. Removing entire "tr" widget that wraps it, before returning early.
                   * But first we need to find the textarea widget, for then to find its parent "tr" widget.
                   * This is done by first finding the textarea widget, for the to find its parent's parent widget
                   */
                  find-widget:wysiwyg-controls-action-subscribers
                    _active-event-editor:x:/../*/get-widget-property/*/1?value

                  /*
                   * Now we have the "tr" widget that raps the text editor.
                   * Deleting it, before we return early
                   */
                  delete-widget:x:/-/*?value

                  /*
                   * Making sure we signal to future clicks on "tr" widget that code view is NOT visible,
                   * before returning early
                   */
                  set-widget-property:x:/../*/_event?value
                    _code-view-visible:false

                  /*
                   * Returning early, since this was a "destroy existing code editor operation"
                   */
                  return

                /*
                 * Making sure we signal to future clicks on "tr" widget that code view is already visible
                 */
                set-widget-property:x:/../*/_event?value
                  _code-view-visible:true

                /*
                 * Retrieving lambda event name from hidden attribute on "tr" HTML widget
                 */
                get-widget-property:x:/../*/_event?value
                  _active-event-name

                /*
                 * Finding selected widget in surface
                 */
                find-widget:wysiwyg-editor-surface
                  data-selected

                /*
                 * Passing in arguments necessary to retrieve correct lambda event from selected widget's [events] collection
                 */
                add:x:/+
                  src:x:/../*/get-widget-property/[1,2]/*/*?value

                /*
                 * Retrieving lambda event from widget, and converting to Hyperlisp,
                 * such that we can stuff Hyperlisp into textarea widget created below
                 */
                get-widget-lambda-event:x:/../*/find-widget/[0,1]/*?value
                lambda2lisp:x:/-/*/*/*

                /*
                 * Then we need to create a "tr" widget, and insert into the table, after currently clicked tr widget,
                 * but before we incoke [create-widget] active event, we need to forward evaluate some of its arguments
                 */
                eval-x:x:/+/*/after|/+/*/*/*/*/textarea/*/innerValue|/+/*/*/*/*/*/*/_event-name|/+/*/_active-event-editor
                create-widget
                  element:tr
                  style:"background-color:Transparent;"
                  after:x:/../*/_event?value
                  _active-event-editor:x:/../*/get-widget-property/[1,2]/*/*?value
                  widgets
                    td
                      widgets
                        textarea
                          class:form-control
                          rows:16
                          placeholder:Your Hyperlisp code goes here ...
                          innerValue:x:/../*/lambda2lisp?value
                          onchange
                            raise-widget-ajax-event:x:/../*/_event?value
                              _onupdate
                          _onupdate

                            /*
                             * Forward evaluated before creation of widget, contains lambda event name
                             */
                            _event-name:x:/../*/get-widget-property/[1,2]/*/*?value

                            /*
                             * Retrieving new Hyperlisp code, inside a try/catch block, to make sure Hyperlisp
                             * syntacic errors are catched, and user is warned
                             */
                            try

                              /*
                               * Retrieving Hyperlisp and converting to lambda
                               */
                              get-widget-property:x:/../*/_event?value
                                value
                              lisp2lambda:x:/-/*/*?value

                              /*
                               * Retrieving currently selected widget
                               */
                              find-widget:wysiwyg-editor-surface
                                data-selected

                              /*
                               * Updating widget's lambda event, but first applying arguments to invocation
                               */
                              add:x:/+2
                                src:x:/../*/_event-name?value
                              add:x:/+/*
                                src:x:/..try/*/lisp2lambda/*

                              /*
                               * Now, finally, we're ready to update widget's lambda event
                               */
                              set-widget-lambda-event:x:/..try/*/find-widget/*?value

                            catch

                              /*
                               * Some bug occurred, probably malformed Hyperlisp.
                               * Informing user!
                               */
                              sys42.info-window:@"Oops! Syntax error in your Hyperlisp. Probably some spaces too much or too few!
Look for syntax errors in your Hyperlisp! Code was not saved!"
                                _error:true
                                _time:more




                        /*
                         * Wrapper around "CodeMirror" toggle button, "Hyperlisp wizard" button and "Delete subscriber" button
                         */
                        container
                          class:btn-group
                          style:"float:right;"
                          widgets

                            /*
                             * "Hyperlisp wizard" button
                             */
                            button
                              class:btn btn-default
                              innerValue:@"<span class=""glyphicon glyphicon-info-sign""></span> Wizard"
                              title:Opens up the Hyperlisp Wizard to help you create logic for your Action Subscriber
                              onclick

                                /*
                                 * Finding "textarea" widget, by first finding "tr" ancestor, and then looking
                                 * for the first widget with the element of [textarea] beneath
                                 */
                                find-first-ancestor-widget:x:/../*/_event?value
                                  element:tr
                                find-widget:x:/-/*?value
                                  element:textarea

                                /*
                                 * Applying arguments to "Hyperlisp Wizard Creator", before invoking it.
                                 * Arguments are 
                                 */
                                set:x:/../*/sys42.execute-lisp-file/**/_textarea?value
                                  src:x:/./-/*?value
                                sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/create-hyperlisp-wizard.hl
                                  _textarea
                                  _onok
                                    _textarea
                                    get-widget-property:x:/-?value
                                      value
                                    lisp2lambda:x:/-/*/*?value
                                    set:x:/-/*//
                                    add:x:/../*/lisp2lambda
                                      lisp2lambda:x:/../*/_code?value
                                    lambda2lisp:x:/../*/lisp2lambda/*
                                    set-widget-property:x:/../*/_textarea?value
                                      value:x:/../*/lambda2lisp?value
                                    raise-widget-ajax-event:x:/../*/_textarea?value
                                      _onupdate
                                    send-javascript:@"window.{0}.getDoc().setValue(p5.$('{0}').el.value);"
                                      :x:/../*/_textarea?value

                            /*
                             * "CodeMirror toggle" button
                             */
                            button
                              class:btn btn-default
                              innerValue:@"<span class=""glyphicon glyphicon-pencil""></span> Toggle"
                              title:Toggle CodeMirror view of Hyperlisp
                              onclick

                                /*
                                 * Checking if CodeMirror module is enabled, and if so, we disable it.
                                 * Otherwise we enable it, and store in session whether or not
                                 * CodeMirror editing is chosen
                                 */
                                get-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled-events
                                if:x:/-/*?value.bool
                                  =:bool:true

                                  /*
                                   * CodeMirror editing is enabled, hence we disable it
                                   */
                                  get-parent-widget:x:/../*/_event?value
                                  get-parent-widget:x:/-/*?value
                                  find-widget:x:/-/*?value
                                    element:textarea
                                  send-javascript:@"window.{0}.toTextArea();"
                                    :x:/..if/*/find-widget/*?value

                                  /*
                                   * Making sure we remove value from session that stores the fact that CodeMirror
                                   * editing is enabled
                                   */
                                  set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled-events
                                else

                                  /*
                                   * CodeMirror editing is NOT enabled, hence we enable it, and store in
                                   * session that it is enabled.
                                   * Applying argument to "CodeMirror" loading file first
                                   */
                                  get-parent-widget:x:/../*/_event?value
                                  get-parent-widget:x:/-/*?value
                                  find-widget:x:/-/*?value
                                    element:textarea
                                  set:x:/+/*/*?name
                                    src:x:/..else/*/find-widget/*?value

                                  /*
                                   * Loading up CodeMirror, wrapping the textarea
                                   */
                                  sys42.execute-lisp-file:/system42/editors/codemirror/include-codemirror.hl
                                    _editor
                                      _name
                                        mode:hyperlisp
                                        autocomplete:true
                                        autofocus:false
                                        fullscreen:true
                                        height:334px
                                        raise-update:true

                                  /*
                                   * Making sure we store in session that CodeMirror module is loaded, to allow "toggling"
                                   * functionality when clicking pencil
                                   */
                                  set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled-events
                                    src:true

                            /*
                             * Close editing of Action Subscriber button
                             */
                            button
                              class:btn btn-default
                              innerValue:@"<span class=""glyphicon glyphicon-remove""></span> Close"
                              title:Closes the editor window
                              onclick

                                /*
                                 * Finding "tr" widget, such that we can remove entire "editor row"
                                 */
                                find-first-ancestor-widget:x:/../*/_event?value
                                  element:tr

                                /*
                                 * Then retrieving name of lambda event from "tr" widget's hidden attribute,
                                 * since we need this name to find the "tr" row that wraps the name of
                                 * Action Subscriber, since we need to update the invisible attribute, that
                                 * track whether or not "codeview" is visible or not
                                 */
                                get-widget-property:x:/../*/find-first-ancestor-widget/*?value
                                  _active-event-editor

                                /*
                                 * Then updating the hidden attribute that tracks whether or not "codeview"
                                 * is visible in the "tr" row for the Action Subscriber name
                                 */
                                get-parent-widget:x:/../*/find-first-ancestor-widget/*?value
                                find-widget:x:/-/*?value
                                  _active-event-name:x:/../*/get-widget-property/*/*?value
                                set-widget-property:x:/-/*?value
                                  _code-view-visible:false

                                /*
                                 * Deleting editor's "tr" widget
                                 */
                                delete-widget:x:/../*/find-first-ancestor-widget/*?value

                            /*
                             * Delete Action Subscriber button
                             */
                            button
                              class:btn btn-default
                              innerValue:@"<span class=""glyphicon glyphicon-trash""></span> Delete"
                              title:Deletes your Action Subscriber
                              onclick

                                /*
                                 * Asking user to confirm deletion of Action Subscriber, but first forward evaluate the
                                 * expression inside of [find-first-ancestor-widget] in the [_onok] lambda object
                                 */
                                eval-x:x:/+/*/_onok/*/find-first-ancestor-widget
                                sys42.confirm-window
                                  _header:Confirm deletion!
                                  _body:@"This will delete your Action Subscriber. All Hyperlisp will be lost. Are you sure you wish to do this?"
                                  _onok

                                    /*
                                     * Finding "tr" widget, for then to find name of lambda event
                                     */
                                    find-first-ancestor-widget:x:/../*/_event?value
                                      element:tr

                                    /*
                                     * Then retrieving name of lambda event from "tr" widget's hidden attribute
                                     */
                                    get-widget-property:x:/../*/find-first-ancestor-widget/*?value
                                      _active-event-editor

                                    /*
                                     * Then retrieving currently selected widget
                                     */
                                    find-widget:wysiwyg-editor-surface
                                      data-selected

                                    /*
                                     * Applying argument to removal of lambda event, 
                                     * which is name of lambda event, and nothing more
                                     */
                                    add:x:/../*/set-widget-lambda-event
                                      src:x:/../*/get-widget-property/*/*?value

                                    /*
                                     * Then removing lambda event
                                     */
                                    set-widget-lambda-event:x:/../*/find-widget/[0,1]/*?value

                                    /*
                                     * And now for simplicity's sake, simply removing "tr" widgets.
                                     * Both the "tr" widget wrapping the actual editor, in addition to
                                     * the "tr" row wrapping the name of Action Subscriber.
                                     * First the "tr" widget wrapping editor.
                                     * But before we delete "editor tr widget", we need to retrieve its parent,
                                     * and then find its Action Subscriber name "tr" widget
                                     */
                                    get-parent-widget:x:/../*/find-first-ancestor-widget/*?value
                                    find-widget:x:/-/*?value
                                      _active-event-name:x:/../*/get-widget-property/*/*?value

                                    /*
                                     * Deleting editor's "tr" widget
                                     */
                                    delete-widget:x:/../*/find-first-ancestor-widget/*?value

                                    /*
                                     * Deleting Action Subscriber name's "tr" widget
                                     */
                                    delete-widget:x:/../*/find-widget/[1,2]/*?value

                /*
                 * Then making sure we set focus initially to textarea widget wrapping Hyperlisp
                 */
                find-widget:x:/-?value
                  element:textarea
                send-javascript:@"$('#{0}').focus().select();"
                  :x:/./-/*?value

                /*
                 * Then checking if user previously have selected to edit Hyperlisp in CodeMirror mode,
                 * and if so, we launch the CodeMirror editor wrapping our textarea widget
                 */
                get-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled-events
                if:x:/-/*?value.bool
                  =:bool:true

                  /*
                   * User has previously chosen to edit Hyperlisp with CodeMirror, 
                   * launching CodeMirror editor, wrapping textarea.
                   * First applying arguments to loader
                   */
                  set:x:/+/*/*?name
                    src:x:/../*/find-widget/[1,2]/*?value

                  /*
                   * Loading up CodeMirror, wrapping the textarea
                   */
                  sys42.execute-lisp-file:/system42/editors/codemirror/include-codemirror.hl
                    _editor
                      _name
                        mode:hyperlisp
                        autocomplete:true
                        autofocus:true
                        fullscreen:true
                        height:334px
                        raise-update:true

              widgets
                td
                  {innerValue}:@"<strong><span class=""glyphicon glyphicon-flash""></span> {0}</strong>"
                    :x:?name
        create-widget:wysiwyg-controls-action-subscribers-wrp
          parent:wysiwyg-controls-properties
          class:bg-warning rounded-corners air-padding prepend-bottom col-xs-12
          widgets
            container:wysiwyg-controls-action-subscribers
              element:table
              class:table table-hover
              widgets
                literal
                  element:thead
                  innerValue:@"<tr><th><h3>Action subscribers for widget</h3></th></tr>"
                container
                  element:tbody
                  widgets
