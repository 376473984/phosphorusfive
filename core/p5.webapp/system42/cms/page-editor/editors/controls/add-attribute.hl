/*
 * Allows the user to add one attribute to currently selected widget
 * in WYSIWYG design surface
 */


/*
 * Creating textbox input widget, to retrieve attribute name
 * from user
 */
create-void-widget:wysiwyg-control-add-attribute
  after:wysiwyg-button-add-attribute
  element:input
  type:text
  class:form-control
  style:"float:left;width:150px;border-radius:0px 4px 4px 0px;border-left:none;"
  placeholder:Attribute name ...
  onkeypress:"return p5.keyPressAddAttribute(event);"
  onkeyup:"return p5.keyUpAddAttribute(event);"
  onblur
    raise-widget-ajax-event:wysiwyg-control-add-attribute
      _ondestroy
  _ondestroy
    delete-widget:wysiwyg-control-add-attribute
  _onchange

    /*
     * Retrieving new attribute name
     */
    get-widget-property:x:/../*/_event?value
      value

    /*
     * Finding selected widget
     */
    find-widget
      data-selected:true

    /*
     * Retrieving element name of selected widget, since it is
     * a part of the invocation arguments to check if attribute name
     * is legal or not
     */
    get-widget-property:x:/-/*?value
      element

    /*
     * Forward evaluating expressions inside [src] node of [add] below, 
     * before adding [_element] with element name as value to check if
     * attribute name is legal or not
     */
    eval-x:x:/+/*/*
    add:x:/+
      src:"{0}:{1}"
        :_element
        :x:/../*/get-widget-property/[1,2]/*/*?value

    /*
     * Checking status of suggested attribute name, returns either
     * "true", "dubious" or "false"
     */
    sys42.wysiwyg-controls.is-legal-attribute-name:x:/../*/get-widget-property/[0,1]/*/*?value
    if:x:/-?value.bool
      =:bool:true

      /*
       * Attribute name was legal for given widget's element type.
       * Now checking if it is an event handler, at which case we rename the attribute,
       * adding one underscor ("_") before its name, to hide it from the WYSIWYG design surface,
       * and make sure it doesn't mess up the interacting with the surface in any ways
       */
      if
        fetch:x:/0/0?value
          index-of:x:/../*/get-widget-property/[0,1]/*/*?value
            what:on
        =:int:0

        /*
         * This is an event handler, renaming it, 
         * by adding one underscore ("_") before its name
         */
        set:x:/../*/get-widget-property/[0,1]/*/*?value
          src:_{0}
            :x:/../*/get-widget-property/[0,1]/*/*?value

      /*
       * Everything seems to be OK now, adding attribute, 
       * and re-evaluating the 'show properties' Hyperlisp file.
       * But this time giving it an "initial focus property", to make
       * sure our newly added attribute gets focus, such that user can just
       * start typing in its value immediately
       */
      add:x:/+
        src:x:/../*/get-widget-property/[0,1]/*/*?value
      set-widget-property:x:/../*/find-widget/*?value
      eval-x:x:/+/*
      sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/widget-properties.hl
        _initial-focus-property:x:/../*/get-widget-property/[0,1]/*/*?value
      delete-widget:wysiwyg-control-add-attribute
      sys42.info-window:Please provide a value, if any, for your attribute!

    else-if:x:/-2?value
      =:dubious

      /*
       * This is a legal attribute name, but not standard, warning
       * user, and if he confirms, we still add the attribute. But
       * first we destroy the textbox ...
       */
      delete-widget:wysiwyg-control-add-attribute

      /*
       * Then we forward evaluates (most) expressions inside of confirm window
       */
      eval-x:x:/+/**(/src|/set-widget-property|/_initial-focus-property|/_body)
      sys42.confirm-window
        _header:Please confirm attribute name!
        _body:@"<img src=""/media/images/dangerous-shit.jpg"" style=""float:right;"" />
<p>It seems you've suggested an attribute named <strong>'{0}'</strong>, which is not standard HTML for the <strong>'{1}'</strong> element.
Are you sure you wish to add this attribute to your widget?</p>
<p>Adding non-standard attributes into your HTML markup is normally not an OK thing to do!</p>
<p>Non-standard HTML5 attributes, can lead to some really obscure and weird bugs when your page is rendered on different devices, with different browsers!</p>"
          :x:/../*/get-widget-property/[0,1]/*/*?value
          :x:/../*/get-widget-property/[1,2]/*/*?value
        _onok
          add:x:/+
            src:x:/../*/get-widget-property/[0,1]/*/*?value
          set-widget-property:x:/../*/find-widget/*?value
          set:x:/+2/*/_widget?value
            src:x:/../*/find-widget/*?value
          eval-x:x:/+/*
          sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/widget-properties.hl
            _widget
            _initial-focus-property:x:/../*/get-widget-property/[0,1]/*/*?value
          sys42.info-window:Please provide a value, if any, for your attribute!
    else

      /*
       * This is ABSOLUTELY NOT a legal attribute name, and
       * can be values such as "id", "element", etc ...
       */
      sys42.info-window:@"That attribute name is under no circumstances allowed to add to your widget!!"
        _error:true
        _time:more
      set-widget-property:x:/../*/_event?value
        class:form-control error
      send-javascript:@"$('#wysiwyg-control-add-attribute').focus().select();"

  events

    /*
     * Determines if an attribute name is legal or not, returns [true], 
     * [dubious] or [false] to caller
     */
    sys42.wysiwyg-controls.is-legal-attribute-name

      /*
       * First we check if attribute is an "invisible" attribute,
       * at which case basically "everything goes" ...!!
       * In addition to checking if this is a "custom data-*" attribute,
       * at which case everything's also quite fine!
       */
      if
        fetch:x:/0/0?value
          index-of:x:/../*/_arg?value
            what:_
        =:int:0
        or
          fetch:x:/0/0?value
            index-of:x:/../*/_arg?value
              what:data-
          =:int:0

        /*
         * Everything starting with an "_" is OK, since they're "hidden attributes" anyway!
         * And, everything starting with "data-" is OK according to the HTML5 specs!
         */
        return:true

      /*
       * Then we check that attribute only contains small letters, and no special
       * characters, or integer numbers, etc
       */
      match:x:/../*/_arg?value
        what:regex:"/^[a-zA-Z][\\w:.-]+$/"
      if:x:/-/0/0?name
        !=:x:/../*/_arg?value
        return:false

      /*
       * Checking "generic" attributes, that are legal for 
       * all HTML elements
       */
      switch:x:/../*/_arg?value
        case:id
        case:element
        case:visible
        case:invisible-element
        case:has-id
        case:render-type

          /*
           * Under no curcumstances we allow the user to add 
           * these attributes to his widget!!
           */
          return:false
        default

          /*
           * Loading list of legal attribute names, and checking name up
           * against it
           */
          load-file:/system42/cms/page-editor/editors/controls/helpers/legal-attributes.hl
          if:x:@"/-/*/*/""{0}"""
            :x:/../*/_arg?value
            and:x:/../*/_arg?value
              !=:_header
            return:true
          else
            return:dubious


/*
 * Giving textbox initial focus
 */
send-javascript:@"$('#wysiwyg-control-add-attribute').focus();"


/*
 * Including JavaScript to help handle carriage return key in textbox
 */
include-javascript:@"p5.keyPressAddAttribute = function(e) {
  if(e.keyCode == 13) {
    p5.$('wysiwyg-control-add-attribute').raise('_onchange');
    return false;
  }
}
p5.keyUpAddAttribute = function(e) {
  if(e.keyCode == 27) {
    p5.$('wysiwyg-control-add-attribute').raise('_ondestroy');
    return false;
  }
}"
