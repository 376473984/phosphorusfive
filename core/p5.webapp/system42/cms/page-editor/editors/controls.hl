
/*
 * Editor for [controls] types of pages. Allows to visually edit
 * a page, adding widgets to it, in a WYSIWYG design time environment.
 * 
 * The way it works, is that it is using the actual WYSIWYG Design Surface
 * as its actual storage, for the widgets you add. Then it "reverse-engineers" the widgets
 * in your design surface, when it should save your widget hierarchy to the database
 */




/*
 * Making sure we set session values for CodeMirror/CKEditor editing to "true",
 * unless request comes from a mobile device,
 * but only the first time [controls] are edited within session
 */
get-session-value:sys42.wysiwyg-controls.has-set-default-advanced-editor
if:x:/-/*?value
  not

  /*
   * First opening of [controls] pages within session, checking client type, and
   * setting CodeMirror editing to "true" if browser is desktop, for then to set
   * session value that will prevent this logic from being evaluated again during session
   */
  if
    request-is-mobile-device
    not

    /*
     * This is *not* a mobile device, hence we set CodeMirror and CKEditor editing to "default" for session.
     * Both for HTML editor, Active Event (Action Subscribers) editor, and Ajax Event handler editor
     */
    set-session-value:sys42.wysiwyg-controls.innerValue-html-view
      src:true
    set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled
      src:true
    set-session-value:sys42.wysiwyg-controls.code-mirror-editor-enabled-events
      src:true

  /*
   * Making sure this logic is not evaluated again during session, to not
   * override user's preferences
   */
  set-session-value:sys42.wysiwyg-controls.has-set-default-advanced-editor
    src:true




/*
 * Loading page from database from [_id] supplied by main page editor
 */
select-data:x:/*/*/p5.page/"={0}"
  :x:/../*/_id?value




/*
 * Converting [controls]' value from Hyperlisp to lambda
 */
lisp2lambda:x:/../*/select-data/*/*/controls?value




/*
 * Changing any existing [onXXX] event handlers to [_onXXX], which hides them, to
 * make sure they don't mess up design surface with weird events occuring
 * as the user navigates his page. Basically, eliminates the functionality of
 * all Ajax and/or JavaScript DOM events on page content.
 * 
 * Later, when page is saved back to database, this process is reversed, and all
 * [_onXXX] nodes beneath [literal], [container] and [void] are being transformed
 * back to [onXXX] again
 *
 * In addition, this logic add up an [onclick] for each widget, that is not a usercontrol,
 * such that when user clicks widget, the widget becomes selected on page
 */
set:x:/+/*/_node?value
  src:x:/../*/lisp2lambda
sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/helpers/process-widgets-event-handlers.hl
  _node
  _children-selectable:bool:true




/*
 * Adding widgets to [create-widget] invocation below, within the wysiwyg-editor-surface
 * widget, which is our WYSIWYG "design surface". Making sure page actually contains
 * any controls first though
 */
if:x:/../*/lisp2lambda/*(/container|/literal|/void)
  add:x:/../*/create-widget/*/widgets/**/container/=wysiwyg-editor-surface/*/widgets
    src:x:/../*/lisp2lambda/*




/*
 * Including some custom inline CSS on page
 */
create-container-widget:wysiwyg-controls-css-wrapper
  widgets


    /*
     * Including some custom inline stylesheet, to make widgets "pop out" when
     * selected, in addition to some extra styles to show usercontrols, in addition
     * to giving WYSIWYG design surface some styles, to make it more easily seen
     */
    text:@"<style type=""text/css"">
*[data-usercontrol] {
	background-color:rgba(0,255,0,.1) !important;
}
*[data-usercontrol] * {
	opacity:0.8;
}
*[data-usercontrol] > [data-usercontrol] {
	background-image:none !important;
	background-color:Transparent !important;
}
*[data-selected] {
	background-color:rgba(255,255,0,.5) !important;
	box-shadow: 12px 12px 5px #888888 !important;
	border:dashed 1px rgba(0,0,0,.5) !important;
	z-index:200 !important;
	position:relative !important;
}
#wysiwyg-editor-surface {
	min-height:436px;
	clear:both;
	border:dashed 1px rgba(0,0,0,.5);
	border-radius:5px;
	background-color:rgba(0,0,0,.03);
	background-image:url(""data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='100%' width='100%'><text x='10%' y='57%' fill='rgba(128,0,0,.05)' font-size='124' font-family='Verdana'>Design surface</text></svg>"") !important;
}
#wysiwyg-editor-surface,
#wysiwyg-editor-surface *{
	cursor:pointer !important;
}
</style>"






/*
 * This creates our WYSIWYG design surface widget, in addition to other helper widgets,
 * such as toolbars for editing currently selected widget, etc.
 * But first we "forward evaluate" the [parent] expression in [create-widget], before
 * creating WYSIWYG design surface widget
 */
eval-x:x:/+/*/parent
create-widget:wysiwyg-editor
  parent:x:/../*/_parent-widget?value
  widgets




    /*
     * Main toolbar wrapper widget for manipulating WYSIWYG widget surface. Contains buttons such as
     * "Add widgets to surface" buttons, dropdown list to select a specific widget, 
     * paste widget from clipboard, help button, etc
     */
    container
      class:prepend-bottom col-md-3 col-xs-12 form-group
      widgets





        /*
         * Allows user to select a widget from a dropdown select list
         */
        container
          class:input-group
          widgets
            literal
              class:input-group-addon
              innerValue:Select

            /*
             * Select widget in page dropdown list. Allows user to select a named widget in surface,
             * to manipulate its properties
             */
            select:wysiwyg-select-widget
              class:form-control
              title:Choose any of the widgets on your page from here
              oninit

                /*
                 * Creates widget's children widgets ("option" HTML elements)
                 */
                sys42.wysiwyg-controls.databind-select-widget-dropdown
              onchange

                /*
                 * Retrieves selected value from [select] dropdown list,
                 * and selects specified widget, unless value of [select] is
                 * "_default", at which point we "unselect" any previously selected widgets
                 */
                get-widget-property:wysiwyg-select-widget
                  value
                if:x:/../*/get-widget-property/*/*?value
                  =:_default

                  /*
                   * Widget was "unselected", meaning the first [option] item of [select]
                   * was selected by user, entirely "unselecting" any previously selected widgets
                   */
                  sys42.wysiwyg-controls.unselect-widget
                else

                  /*
                   * Some widget was selected, making sure WYSIWYG design surface is notified,
                   * in addition to creating associated toolbars and such
                   */
                  sys42.wysiwyg-controls.select-widget:x:/../*/get-widget-property/*/*?value

              /*
               * Since we're using "select" as type declaration of widget, this needs to be here, even
               * though it is empty, to signal to [create-widget] logic that this is a [container] widget
               */
              widgets

              /*
               * Custom events for "Select widget" dropdown listbox
               */
              events

                /*
                 * Raised whenever the 'select widget' dropdown list 
                 * needs to be re-databound. If [_arg] is given, it
                 * simply selects that as a value, otherwise it re-creates
                 * entire select dropdown list
                 */
                sys42.wysiwyg-controls.databind-select-widget-dropdown

                  /*
                   * Checking if we're given a widget id to select, and if so, simply
                   * setting that [option] element to "selected" through [select] widget's
                   * [value] property, before returning
                   */
                  if:x:/../*/_arg?value
                    set-widget-property:wysiwyg-select-widget
                      value:x:/../*/_arg?value
                    return

                  /*
                   * "Hard case", needs to rebuild widget's children collection entirely.
                   * First deleting all children widgets of [select] (all [option] HTML widgets),
                   * before creating on [option] item for each widget on page, in addition to
                   * the initial "Choose widget ..." [option] widget.
                   */
                  clear-widget:wysiwyg-select-widget

                  /*
                   * Creating initial "unselect widget" item, that allows user to "unselect" widgets
                   */
                  create-literal-widget
                    parent:wysiwyg-select-widget
                    element:option
                    innerValue:Widget ...
                    value:_default

                  /*
                   * Need to find currently selected widget, if any, such that we can make sure that
                   * the [option] widget representing that widget becomes initially selected
                   */
                  find-widget:wysiwyg-editor-surface
                    data-selected:true

                  /*
                   * Then retrieving entire widget hierarchy for WYSIWYG design time surface,
                   * and its widgets. Making sure we keep "empty ids", or ids that have been
                   * automatically created by the framework. Otherwise values such as "xfed6797"
                   * will be removed by the [sys42.get-widget] Active Event internals.
                   * Also we're making sure of that the invocation gets to know that we want to have
                   * a "flat hierarchy", which means that we only want a "linear list" of the widgets,
                   * and not its hierarchical structure, since otherwise it becomes more difficult to
                   * add up items as [option] children widgets in the order they appear.
                   */
                  sys42.get-widget:wysiwyg-editor-surface
                    _keep-empty-ids:true
                    _flatten:true

                  /*
                   * Now deleting the first widget, since it'll be the "wysiwyg-editor-surface"
                   * parent widget, which should NOT (of course) be selectable in any ways
                   */
                  set:x:/../*/sys42.get-widget/0

                  /*
                   * Looping through all widgets creating an [option] widget for each widget,
                   * such that user can select widgets by choosing them in the "Select widget" 
                   * dropdown list
                   */
                  for-each:x:/../*/sys42.get-widget/*

                    /*
                     * Checking if this is a usercontrol widget, which is specially
                     * handled, to make it appear as a usercontrol in dropdown list
                     */
                    if:x:/..for-each/*/_dp/#/*/data-usercontrol

                      /*
                       * This is a usercontrol
                       */
                      set:x:/..for-each/*/create-literal-widget/*/innerValue?value
                        src:usercontrol - {0} - {1}
                          :x:/..for-each/*/_dp/#/*/element?value
                          :x:/..for-each/*/_dp/#?value
                    else

                      /*
                       * This was not a usercontrol, making sure we add both widget type, HTML element,
                       * and id of widget as a part of the innerValue (friendly text, displayed to user)
                       * of the [option] item
                       */
                      set:x:/..for-each/*/create-literal-widget/*/innerValue?value
                        src:{0} - {1} - {2}
                          :x:/..for-each/*/_dp/#?name
                          :x:/..for-each/*/_dp/#/*/element?value
                          :x:/..for-each/*/_dp/#?value

                    /*
                     * Setting the value of [option] item to the id of widget
                     */
                    set:x:/..for-each/*/create-literal-widget/*/value?value
                      src:x:/..for-each/*/_dp/#?value

                    /*
                     * Checking if this is our currently selected widget, and if so,
                     * adding the [selected] attribute to [option] item
                     */
                    if:x:/../*/find-widget/*?value
                      =:x:/..for-each/*/_dp/#?value
                      add:x:/..for-each/*/create-literal-widget
                        src:selected

                    /*
                     * Now we have a [create-literal-widget] invocation, that will create our [option] item
                     */
                    create-literal-widget
                      element:option
                      parent:wysiwyg-select-widget
                      innerValue
                      value






    /*
     * Wrapper around all "Add widget/usercontrol" buttons, in addition to "Paste widget" button
     * to WYSIWYG design surface, and [+Wizard] button to add "Wizard Widget" to surface
     */
    container:wysiwyg-controls-add-widget-toolbar
      class:prepend-bottom col-md-9 col-xs-12 btn-group
      widgets









        /*
         * Add a "wizard" widget to your surface button(s)
         */
        container:wysiwyg-controls-add-wizard-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Opens up the 'Add Wizard Widget Wizard', that helps you add a 'Wizard Widget' to your form.

A Wizard Widget is a pre-fabricated template widget, possibly with children widgets, representing commonly used widget types"
          widgets

            /*
             * Dropdown toggle button for "Add wizard" button(s)
             */
            button
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-plus""></span> wizard <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Add [wizard] *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> before"
                      title:Adds a [wizard] widget to your page, at the beginning, or before the currently selected widget
                      onclick
                        sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-widget-wizard.hl
                          _before:true
                        send-javascript:@"$('#wysiwyg-controls-add-wizard-wrp').toggleClass('open');"

                /*
                 * Add [wizard] *after* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> after"
                      title:Appends a [void] widget to your page, or after the currently selected widget
                      onclick
                        sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-widget-wizard.hl
                        send-javascript:@"$('#wysiwyg-controls-add-wizard-wrp').toggleClass('open');"

                /*
                 * Add [wizard] *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-add-wizard-to-container
                  style:"display:none;"
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> inside"
                      title:Appends a [void] widget to your currently selected widget
                      onclick
                        sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-widget-wizard.hl
                          _inside:true
                        send-javascript:@"$('#wysiwyg-controls-add-wizard-wrp').toggleClass('open');"




        /*
         * Add a [usercontrol] widget to your surface button(s)
         */
        container:wysiwyg-controls-add-usercontrol-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Opens up a Wizard to help you insert a usercontrol to your page. 

A usercontrol is a pre-fabricated and reusable widget, that allows you to 'inject' another [controls] page, as a reusable component to your page"
          widgets

            /*
             * Dropdown toggle button for "Add usercontrol" button(s)
             */
            button
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-plus""></span> usercontrol <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Add [usercontrol] *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> usercontrol before"
                      title:Adds a [usercontrol] widget to your page, at the beginning, or before the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:_usercontrol
                          _before:true
                        send-javascript:@"$('#wysiwyg-controls-add-usercontrol-wrp').toggleClass('open');"

                /*
                 * Add [usercontrol] *after* button
                 */
                li:wysiwyg-controls-add-usercontrol-after
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> usercontrol after"
                      title:Appends a [usercontrol] widget to your page, or after the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:_usercontrol
                        send-javascript:@"$('#wysiwyg-controls-add-usercontrol-wrp').toggleClass('open');"

                /*
                 * Add [usercontrol] *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-add-usercontrol-to-container
                  style:"display:none;"
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> usercontrol inside"
                      title:Appends a [usercontrol] widget inside your currently selected widget
                      onclick
                        find-widget
                          data-selected:true
                        eval-x:x:/+/*
                        sys42.wysiwyg-controls.add-control:_usercontrol
                          _parent:x:/../*/find-widget/*?value
                        send-javascript:@"$('#wysiwyg-controls-add-usercontrol-wrp').toggleClass('open');"





        /*
         * Add a [literal] widget to your surface button(s)
         */
        container:wysiwyg-controls-add-literal-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Insert a 'literal' widget into your page.

A literal widget, is a widget that allows you to create text or HTML content in your page"
          widgets

            /*
             * Dropdown toggle button for "Add literal" button(s)
             */
            button
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-plus""></span> literal <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Add [literal] *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> before"
                      title:Adds a [literal] widget to your page, at the beginning, or before the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:span
                          _before:true
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-literal-wrp').toggleClass('open');"

                /*
                 * Add [literal] *after* button
                 */
                li:wysiwyg-controls-add-literal-after
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> after"
                      title:Appends a [literal] widget to your page, or after the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:span
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-literal-wrp').toggleClass('open');"

                /*
                 * Add [literal] *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-add-literal-to-container
                  style:"display:none;"
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> inside"
                      title:Appends a [literal] widget to your currently selected widget
                      onclick
                        find-widget
                          data-selected:true
                        eval-x:x:/+/*
                        sys42.wysiwyg-controls.add-control:span
                          _parent:x:/../*/find-widget/*?value
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-literal-wrp').toggleClass('open');"




        /*
         * Add a [container] widget to your surface button(s)
         */
        container:wysiwyg-controls-add-container-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Insert a 'container' widget into your page.

A container widget is a widget that can have children widgets, and serves as a 'container' for other widgets"
          widgets

            /*
             * Dropdown toggle button for "Add container" button(s)
             */
            button
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-plus""></span> container <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Add [container] *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> before"
                      title:Adds a [container] widget to your page, at the beginning, or before the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:div
                          _before:true
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-container-wrp').toggleClass('open');"

                /*
                 * Add [container] *after* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> after"
                      title:Appends a [container] widget to your page, or after the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:div
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-container-wrp').toggleClass('open');"

                /*
                 * Add [container] *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-add-container-to-container
                  style:"display:none;"
                  widgets
                    a:wysiwyg-controls-add-container-inside
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> inside"
                      title:Appends a [container] widget inside your currently selected widget
                      onclick
                        find-widget
                          data-selected:true
                        eval-x:x:/+/*
                        sys42.wysiwyg-controls.add-control:div
                          _parent:x:/../*/find-widget/*?value
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-container-wrp').toggleClass('open');"





        /*
         * Add a [void] widget to your surface button(s)
         */
        container:wysiwyg-controls-add-void-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Insert a 'void' widget into your page.

A void widget, is a widget that has no content, neither in the form of HTML/text, nor in the form of children widgets. Typical uses are for inserting carriage return ('br' HTML elements) or 'input' HTML elements to your page, to collect input from your users"
          widgets

            /*
             * Dropdown toggle button for "Add void" button(s)
             */
            button
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-plus""></span> void <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Add [void] *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> before"
                      title:Adds a [void] widget to your page, at the beginning, or before the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:br
                          _before:true
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-void-wrp').toggleClass('open');"

                /*
                 * Add [void] *after* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> after"
                      title:Appends a [void] widget to your page, or after the currently selected widget
                      onclick
                        sys42.wysiwyg-controls.add-control:br
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-void-wrp').toggleClass('open');"

                /*
                 * Add [void] *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-add-void-to-container
                  style:"display:none;"
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> inside"
                      title:Appends a [void] widget to your currently selected widget
                      onclick
                        find-widget
                          data-selected:true
                        eval-x:x:/+/*
                        sys42.wysiwyg-controls.add-control:br
                          _parent:x:/../*/find-widget/*?value
                        sys42.info-window:@"Please change widget's id and element to what you wish"
                          _time:more
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-add-void-wrp').toggleClass('open');"





        /*
         * Paste widget to your surface button(s)
         */
        container:wysiwyg-controls-paste-wrp
          class:btn-group
          style:"width:14%;"
          title:@"Paste the widget from your Phosphorus 'clipboard' into your page"
          widgets

            /*
             * Dropdown toggle button for "Paste" button(s)
             */
            button:wysiwyg-controls-paste-btn
              class:btn btn-default dropdown-toggle
              style:"width:100%;"
              data-toggle:dropdown
              oninit
                sys42.wysiwyg-controls.toggle-paste-button
              events

                /*
                 * Checks to see if "Paste widget from clipboard" should be enabled or not
                 */
                sys42.wysiwyg-controls.toggle-paste-button

                  /*
                   * Checks to see if we have a widget on "Widget clipboard" (session),
                   * and if so, we enable "Paste" toggle button, otherwise we
                   * disable it
                   */
                  get-session-value:sys42.wysiwyg-controls.clipboard-widget
                  if:x:/-/*/*
                    not
                    set-widget-property:wysiwyg-controls-paste-btn
                      class:btn btn-default dropdown-toggle disabled
                      disabled
                  else
                    set-widget-property:wysiwyg-controls-paste-btn
                      class:btn btn-default dropdown-toggle
                    delete-widget-property:wysiwyg-controls-paste-btn
                      disabled

              innerValue:@"<span class=""glyphicon glyphicon-paste""></span> paste <span class=""caret""></span>"
            ul
              class:dropdown-menu
              widgets

                /*
                 * Paste widget *before* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-left""></span> before"
                      title:Paste the widget from your clipboard, at the beginning of page, or before the currently selected widget
                      onclick

                        /*
                         * Figuring out where to insert widget
                         */
                        sys42.wysiwyg-controls.get-insertion-position
                          _before:true

                        /*
                         * Invoking Active Event responsible for performing paste operation
                         */
                        add:x:/+/*/_position
                          src:x:/./-/*
                        sys42.wysiwyg-controls.paste-widget
                          _position
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-paste-wrp').toggleClass('open');"

                /*
                 * Paste widget *after* button
                 */
                li
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-arrow-right""></span> after"
                      title:Appends the widget from your clipboard to your page, or after the currently selected widget
                      onclick

                        /*
                         * Figuring out where to insert widget
                         */
                        sys42.wysiwyg-controls.get-insertion-position

                        /*
                         * Invoking Active Event responsible for performing paste operation
                         */
                        add:x:/+/*
                          src:x:/./-/*
                        sys42.wysiwyg-controls.paste-widget
                          _position
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-paste-wrp').toggleClass('open');"

                /*
                 * Paste widget *inside* button
                 * Needs explicit id, since we toggle its style visibility through "display", according
                 * to whether or not we have a [container] widget currently selected in WYSIWYG design
                 * surface, which allows for children widgets to be added to it
                 */
                li:wysiwyg-controls-paste-to-container
                  style:"display:none;"
                  widgets
                    a
                      href:#
                      innerValue:@"<span class=""glyphicon glyphicon-resize-small""></span> inside"
                      title:Appends the widget from your clipboard inside of your currently selected widget
                      onclick

                        /*
                         * Figuring out where to insert widget
                         */
                        find-widget
                          data-selected:true

                        /*
                         * Invoking Active Event responsible for performing paste operation
                         */
                        set:x:/+/*/*?value
                          src:x:/../*/find-widget/*?value
                        sys42.wysiwyg-controls.paste-widget
                          _position
                            parent
                        send-javascript:@"$('#widget-property-id').focus().select();$('#wysiwyg-controls-paste-wrp').toggleClass('open');"
          events

            /*
             * Pastes a widget to surface event. Needs [_position] child arguments, being e.g. [before], 
             * [after], [parent] (and [position] optionally) to know where to paste widget
             */
            sys42.wysiwyg-controls.paste-widget

              /*
               * Retrieving widget from "clipboard", and changing the [literal], [void], [container]
               * parts of session value to [create-xxx-widget], in addition to removing the widget's
               * id
               */
              get-session-value:sys42.wysiwyg-controls.clipboard-widget
              set:x:/../*/get-session-value/*/*?name
                src:create-{0}-widget
                  :x:/../*/get-session-value/*/*?name
              set:x:/../*/get-session-value/*/*?value

              /*
               * Then setting the id of all children widgets of widget to empty.
               * First looping on all that are "probable matches", before refining
               * by iterating ancestors, checking to see if we found anything but
               * [widgets]/[container]/[void]/[literal] or [create-xxx] ancestors.
               * Hopefully this will remove all IDs of all children widgets, without
               * destroying any Hyperlisp code inside of event handlers and such
               */
              for-each:x:/../*/get-session-value/*/*/*
                _for-each:x:/../*/get-session-value/*/*/**/widgets/*(/container|/literal|/void)
                set:x:/+?value
                  src:x:/..for-each/*/_dp/#
                _node

                /*
                 * Checking if we should remove value, by looping ancestors, 
                 * until we see [sys42.wysiwyg-controls.clipboard-widget] node name, and see if
                 * we only saw [container], [widgets], [void] and [literal] ancestor 
                 * node names. If we did, then value of node should be removed, since
                 * it was an ID for a child widget. Otherwise, it was a [container/void/literal]
                 * widget node, inside of an event handler (probably), or some other place
                 * where we should NOT remove the ID of the widget!
                 * [_remove-value] is used to signal whether or not we should remove
                 * value of [container/void/literal] node ...
                 */
                _remove-value:bool:true
                while:x:/..for-each/*/_node/#?name
                  !=:sys42.wysiwyg-controls.clipboard-widget
                  if:x:/..for-each/*/_node/#?name
                    !=:container
                    and:x:/..for-each/*/_node/#?name
                      !=:void
                    and:x:/..for-each/*/_node/#?name
                      !=:literal
                    and:x:/..for-each/*/_node/#?name
                      !=:widgets
                    and:x:/..for-each/*/_node/#?name
                      !~:create-

                    /*
                     * We should NOT remove value of widget, since it was not
                     * a direct descendant widget beneath clipboard widget!
                     */
                    set:x:/..while/-?value
                      src:bool:false

                    /*
                     * Breaking [while], no need to continue, since
                     * we now know we should NOT remove ID of widget node
                     */
                    break

                  /*
                   * Settings while condition's [_node] value to parent node of
                   * currently iterated ([while] iterated) node
                   */
                  set:x:/..for-each/*/_node?value
                    src:x:/..for-each/*/_node/#/.

                /*
                 * Checking if we should remove ID of [literal/container/void] node,
                 * and if so, we remove it
                 */
                if:x:/..for-each/*/_remove-value?value
                  set:x:/..for-each/*/_dp/#?value

              /*
               * Adding "create position" to widget create invocation
               */
              add:x:/../*/get-session-value/*/*
                src:x:/../*/_position/*

              /*
               * Making sure widget becomes "selectable" in wysiwyg surface by clicking
               */
              add:x:/../*/get-session-value/*/*
                src
                  onclick
                    sys42.wysiwyg-controls.select-widget:x:/../*/_event?value
                    if:x:/-?value
                      sys42.wysiwyg-controls.databind-select-widget-dropdown:x:/../*/_event?value
                    else
                      sys42.wysiwyg-controls.databind-select-widget-dropdown:_default

              /*
               * Actually creating widget, before selecting widget, and rebinding select dropdown list
               */
              set:x:/+
                src:x:/../*/get-session-value/*/*
              _create-widget
              sys42.wysiwyg-controls.select-widget:x:/-?value
              sys42.wysiwyg-controls.databind-select-widget-dropdown

              /*
               * Toggling button's dropdown state, and showing user some information
               */
              sys42.info-window:@"Please change widget's id and element to what you wish"
                _time:more









        /*
         * Help button
         */
        button:wysiwyg-controls-help-button
          class:btn btn-success
          style:"width:16%;"
          href:#
          innerValue:@"<span class=""glyphicon glyphicon-question-sign""></span> Help"
          title:Help files for [controls] pages
          oninit

            /*
             * If this is first loading of [controls] page during session, we "blink"
             * help button, showing some helper tooltip, to explain to user that "this is
             * where you should start".
             */
            if
              fetch:x:/0/0?value
                get-session-value:sys42.wysiwyg-controls.has-blinked-help-button
              not

              /*
               * Help button has not been previously blinked during current session,
               * hence we "flash it" and shows the user a friendly advice next to help button
               */
              set-widget-property:wysiwyg-controls-help-button
                data-content:@"If you are new to Phosphorus Five, then you will probably have a smoother start, if you click here the first time ..."
                data-placement:left
              send-javascript:@"setTimeout (function () {
  $('#wysiwyg-controls-help-button').popover('show');
  setTimeout(function(){$('#wysiwyg-controls-help-button').popover('hide').popover('destroy');}, 7000)
}, 1000);"

              /*
               * Making sure help is NOT displayed next time user loads a [controls] page during current session
               */
              set-session-value:sys42.wysiwyg-controls.has-blinked-help-button
                src:true

              /*
               * Blinking help button too
               */
              sys42.wysiwyg-controls.blink-control:wysiwyg-controls-help-button
          onclick
            sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/show-help-file.hl
          events

            /*
             * Blinks a specified control [_arg] for 5 seconds on screen
             */
            sys42.wysiwyg-controls.blink-control
              widget-exist:x:/../*/_arg?value
              if:x:/-/*?value
                not
                or
                  fetch:x:/0/0/0?value
                    get-widget-property:x:/../*/_arg?value
                      visible
                  =:bool:false
                return:bool:false
              send-javascript:@"$('#{0}').toggleClass('blink-shadow');
setTimeout(function(){{$('#{0}').toggleClass('blink-shadow');}}, 3000);
var offset = $('#{0}').offset();
$('html, body').animate({{
    scrollTop: offset.top - 250,
    scrollLeft: offset.left
}});"
                :x:/../*/_arg?value
              return:bool:true








    /*
     * Actual WYSIWYG design surface
     */
    container:wysiwyg-editor-surface-wrp
      class:col-xs-12
      widgets
        container:wysiwyg-editor-surface
          onclick
            sys42.wysiwyg-controls.unselect-widget
            sys42.wysiwyg-controls.databind-select-widget-dropdown:_default
          widgets







    /*
     * Wrapper for manipulating selected widget
     */
    container:wysiwyg-manipulate-selected-widget
      class:prepend-bottom prepend-top col-xs-12 btn-group
      visible:false
      widgets





        /*
         * Add attribute to widget button
         */
        button:wysiwyg-button-add-attribute
          class:btn btn-default
          title:Add attribute to widget
          innerValue:@"<span class=""glyphicon glyphicon-plus""></span> Add attribute"
          onclick
            sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-attribute.hl





        /*
         * "Add attribute to widget wizard" button
         */
        button:wysiwyg-button-add-attribute-help
          class:btn btn-default
          style:"border-left:dashed 1px rgba(0,0,0,.2);"
          title:Help me with adding attributes to my widget please ...
          innerValue:@"<span class=""glyphicon glyphicon-info-sign""></span>"
          onclick
            sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-attribute-guide.hl




        /*
         * Create new Active Event subscriber for currently selected widget
         */
        button:wysiwyg-controls-new-action-subscriber
          class:btn btn-default
          innerValue:@"<span class=""glyphicon glyphicon-flash""></span> Add Subscriber"
          onclick
            sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/create-action-subscriber.hl





        /*
         * Copy widget
         */
        button:wysiwyg-button-copy-widget
          class:btn btn-default
          title:Copies widget to clipboard, such that you can paste in a copy another place, either on same page, or in another page
          innerValue:@"<span class=""glyphicon glyphicon-copy""></span> Copy widget"
          onclick
            find-widget
              data-selected
            sys42.get-widget:x:/../*/find-widget/*?value
            set:x:/-/*/*(/data-selected|/onclick|/data-usercontrol/./*/widgets)
            add:x:/+/*
              src:x:/../*/sys42.get-widget/*
            set-session-value:sys42.wysiwyg-controls.clipboard-widget
              src
            sys42.info-window:@"A copy of the widget was put into the clipboard. If you wish to 'cut' the widget, 
you can simply delete it now. A complete version of the widget still exists on your 'widget clipboard'."
              _time:more
            sys42.wysiwyg-controls.toggle-paste-button





        /*
         * Select parent widget
         */
        button:wysiwyg-controls-get-parent-widget
          class:btn btn-default
          innerValue:@"<span class=""glyphicon glyphicon-arrow-up""></span> Parent"
          onclick:@"$('#' + p5._currentParentWidget).removeClass('highlight');p5.$(event.currentTarget).raise('_onclick');return false;"
          _onclick
            find-widget
              data-selected
            get-parent-widget:x:/../*/find-widget/*?value
            sys42.wysiwyg-controls.select-widget:x:/../*/get-parent-widget/0?value
            sys42.wysiwyg-controls.databind-select-widget-dropdown:x:/../*/get-parent-widget/0?value
          onmouseover:@"$('#' + p5._currentParentWidget).addClass('highlight');"
          onmouseout:@"$('#' + p5._currentParentWidget).removeClass('highlight');"
          events

            /*
             * Enables and disables the "Select parent" button.
             */
            sys42.wysiwyg-controls.toggle-get-parent-widget
              if:x:/../*/_arg?value

                /*
                 * Enabling button
                 */
                set-widget-property:wysiwyg-controls-get-parent-widget
                  class:btn btn-default
                delete-widget-property:wysiwyg-controls-get-parent-widget
                  disabled
                send-javascript:@"p5._currentParentWidget = '{0}';"
                  :x:/../*/_arg?value
              else

                /*
                 * Disabling button
                 */
                set-widget-property:wysiwyg-controls-get-parent-widget
                  class:btn btn-default disabled
                  disabled





        /*
         * Select children widgets
         */
        container
          class:btn-group
          widgets

            /*
             * Dropdown toggle button for "Select children" button(s)
             */
            button:wysiwyg-controls-select-children-widgets-wrp
              class:btn btn-default dropdown-toggle
              data-toggle:dropdown
              innerValue:@"<span class=""glyphicon glyphicon-arrow-down""></span> Children <span class=""caret""></span>"
            ul:wysiwyg-controls-select-children-widgets
              class:dropdown-menu
              widgets
          events

            /*
             * Creates the list of children widgets for currently selected [container] widget,
             * or deletes and disables "select children widgets" button.
             * Notice, if this event is invoked without any arguments, it will disable "select children
             * widgets" button
             */
            sys42.wysiwyg-controls.toggle-select-children-widgets

              /*
               * Clearing any previously created children widgets' selectors
               */
              clear-widget:wysiwyg-controls-select-children-widgets

              /*
               * Checking if a widget was given at all, which is NOT the case if selected widget
               * is a usercontrol, at which point we should disable children selector button
               */
              if:x:/../*/_arg?value
                not

                /*
                 * We are supposed to delete and disable children widgets' selectors
                 */
                set-widget-property:wysiwyg-controls-select-children-widgets-wrp
                  class:btn btn-default dropdown-toggle disabled
                  disabled

                /*
                 * Making sure our 'clear selected widget' button is disabled by default, 
                 * it might get enabled later, depending upon if widget has children or not
                 */
                set-widget-property:wysiwyg-button-clear-widget
                  class:btn btn-default disabled
                  disabled
              else

                /*
                 * Retrieving widget's children widgets
                 */
                get-children-widgets:x:/../*/_arg?value

                /*
                 * Checking if widget had any children, and if not, disabling the children selector button,
                 * in addition to disabling the "Clear widget" button, before returning early
                 */
                if:x:/-/*/*?count
                  =:int:0
                  set-widget-property:wysiwyg-controls-select-children-widgets-wrp
                    class:btn btn-default dropdown-toggle disabled
                    disabled

                  /*
                   * Making sure our 'clear selected widget' button is disabled by default, 
                   * it might get enabled later, depending upon if widget has children or not
                   */
                  set-widget-property:wysiwyg-button-clear-widget
                    class:btn btn-default disabled
                    disabled
                  return

                /*
                 * We are supposed to enable and create children widgets' selectors
                 */
                set-widget-property:wysiwyg-controls-select-children-widgets-wrp
                  class:btn btn-default dropdown-toggle
                delete-widget-property:wysiwyg-controls-select-children-widgets-wrp
                  disabled

                /*
                 * Making sure our 'Clear selected widget' button is enabled also
                 */
                set-widget-property:wysiwyg-button-clear-widget
                  class:btn btn-default
                delete-widget-property:wysiwyg-button-clear-widget
                  disabled

                /*
                 * Looping through all children widgets, creating a button ([a] type of button)
                 * for each widget, allowing user to select any of these widgets by clicking the
                 * button
                 */
                for-each:x:/..else/*/get-children-widgets/*/*

                  /*
                   * Checking if currently iterated widget is a usercontrol, and if so,
                   * changing parts of the "innerValue" of selector to "usercontrol", 
                   * instead of "container"
                   */
                  if
                    fetch:x:/0/0/0?value
                      get-widget-property:x:/..for-each/*/_dp/#?value
                        data-usercontrol
                    set:x:/..for-each/*/create-container-widget/**/innerValue/0?value
                      src:usercontrol

                  /*
                   * The select specific children widget button is created such that when the user
                   * hovers over it, then the specified children widget that button represents, becomes
                   * "highlighted". Hence the "onmouseXXX" JavaScript DOM events below.
                   * Now finally, before we can create our widget, we need to "forward evaluate" some
                   * expressions inside of the [create-container-widget] invocation
                   */
                  eval-x:x:/+/**/innerValue|/+/**/_onclick/*|/+/**/onmouseover|/+/**/onmouseout|/+/**/onclick
                  create-container-widget
                    parent:wysiwyg-controls-select-children-widgets
                    element:li
                    widgets
                      a
                        href:#
                        href:#
                        innerValue:@"{0} - {1}"
                          :x:/..for-each/*/_dp/#?name
                          :x:/..for-each/*/_dp/#?value
                        onmouseover:@"$('#{0}').addClass('highlight');"
                          :x:/..for-each/*/_dp/#?value
                        onmouseout:@"$('#{0}').removeClass('highlight');"
                          :x:/..for-each/*/_dp/#?value
                        onclick:@"$('#{0}').removeClass('highlight');p5.$(event.currentTarget).raise('_onclick');return false;"
                          :x:/..for-each/*/_dp/#?value
                        _onclick
                          sys42.wysiwyg-controls.select-widget:x:/..for-each/*/_dp/#?value
                          sys42.wysiwyg-controls.databind-select-widget-dropdown:x:/..for-each/*/_dp/#?value





        /*
         * Clear widget button. Clears all children widgets of currently selected widget
         * Is disabled unless selected widget is a container, and actually has children widgets
         */
        button:wysiwyg-button-clear-widget
          class:btn btn-default disabled
          disabled
          title:Deletes all children widgets of widget
          innerValue:@"<span class=""glyphicon glyphicon-remove-circle""></span> Clear widget"
          onclick

            /*
             * Asking user to confirm clearing widget of its children widgets, 
             * before actually doing it
             */
            sys42.confirm-window
              _header:Confirm deletion of children widgets!
              _body:@"<p>Are you sure you wish to <strong>delete all children widgets</strong> of currently selected widget?</p>
<p>This will delete all widgets that are children of the currently selected widget! This action cannot be undone!</p>"
              _onok

                /*
                 * Finding selected widget
                 */
                find-widget
                  data-selected:true

                /*
                 * Retrieving all children widgets from currently selected widget, such that
                 * we can display an info window to user, informing him how many widgets was
                 * actually deleted from surface
                 */
                get-children-widgets:x:/-/*?value

                /*
                 * Clearing widget's children collection
                 */
                clear-widget:x:/../*/find-widget/*?value

                /*
                 * Re-databinding "select widget" dropdown listbox, with no arguments,
                 * which will trigger a "re-create child collection" logic for all "option" HTML elements,
                 * being children of "select" HTML widget
                 */
                sys42.wysiwyg-controls.databind-select-widget-dropdown

                /*
                 * Informing user how many widgets was actually deleted
                 */
                sys42.info-window:@"{0} widgets successfully deleted from container with the id of '{1}'"
                  :x:/../*/get-children-widgets/*/*?count
                  :x:/../*/find-widget/*?value
                  _time:more

                /*
                 * Disables "select children widgets" button
                 */
                sys42.wysiwyg-controls.toggle-select-children-widgets

                /*
                 * Disabling the "Clear widget" button
                 */
                set-widget-property:wysiwyg-button-clear-widget
                  class:btn btn-default disabled
                  disabled





        /*
         * Delete widget button
         */
        button:wysiwyg-button-delete
          class:btn btn-default
          title:Delete currently selected widget
          innerValue:@"<span class=""glyphicon glyphicon-trash""></span> Delete widget"
          onclick

            /*
             * Asking user to confirm he really wants to delete currently selected widget
             */
            sys42.confirm-window
              _header:Confirm deletion of selected widget!
              _body:Are you sure you wish to <strong>delete the selected widget</strong>? This action cannot be undone!
              _onok

                /*
                 * Finding selected widget from surface, and deleting it
                 */
                find-widget
                  data-selected:true
                delete-widget:x:/../*/find-widget/*?value

                /*
                 * Hiding the entire "manipulate selected widget" toolbar, since (obviously), no widgets
                 * are now selected
                 */
                set-widget-property:wysiwyg-manipulate-selected-widget
                  visible:false

                /*
                 * Re-creating "select widget" dropdown box, without arguments, to make sure it
                 * is re-created entirely
                 */
                sys42.wysiwyg-controls.databind-select-widget-dropdown

                /*
                 * Hiding all "properties for selected widget", since no widgets are selected now!
                 */
                set-widget-property:wysiwyg-controls-properties
                  visible:false

                /*
                 * Changing visibility for "create inside of widget" buttons
                 */
                set-widget-property:wysiwyg-controls-add-container-to-container
                  style:"display:none;"
                set-widget-property:wysiwyg-controls-add-usercontrol-to-container
                  style:"display:none;"
                set-widget-property:wysiwyg-controls-add-literal-to-container
                  style:"display:none;"
                set-widget-property:wysiwyg-controls-add-void-to-container
                  style:"display:none;"
                set-widget-property:wysiwyg-controls-paste-to-container
                  style:"display:none;"
                set-widget-property:wysiwyg-controls-add-wizard-to-container
                  style:"display:none;"





    /*
     * Properties for currently selected widget wrapper. Will display the attributes, events, and so
     * on for currently selected widget
     */
    container:wysiwyg-controls-properties
      visible:false
      class:col-xs-12





  /*
   * Lambda events for Editor Surface
   */
  events





    /*
     * "Sink" event required by main editor to retrieve data
     * from specialized editor during saving process. Will be invoked by
     * "main editor logic" whenever it needs the "data" to save to database.
     * Also occasionally used internally, for different purposes
     */
    sys42.get-page-editor-data

      /*
       * Retrieving 'raw widget' from surface, making sure we pass in argument that tells invocation to 
       * not remove usercontrols, if it exists
       */
      add:x:/+
        src:x:/../*/_no-wash-usercontrols
      sys42.get-widget:wysiwyg-editor-surface

      /*
       * Making sure we remove the [data-selected] attribute, 
       * which is used to track the currently selected widget in surface.
       */
      set:x:/../*/sys42.get-widget/**(/container/*/data-selected/=true|/void/*/data-selected/=true|/literal/*/data-selected/=true)

      /*
       * Making sure we remove widgets collection from all usercontrols, in addition to
       * our "design time additions", that makes sure no event handlers INSIDE of
       * usercontrol is being mapped up
       */
      if:x:/../*/_no-wash-usercontrols?value.bool
        !=:bool:true
        set:x:/../*/sys42.get-widget/**/container/*/data-usercontrol/./*/widgets
      set:x:/../*/sys42.get-widget/**/container/*/data-usercontrol/./*/oninit/*(/_design-time-remover|/_design-time-remover/+1|/_design-time-remover/+2)

      /*
       * Removing all 'select by clicking' event handlers, only relevant
       * while designing widget. First retrieving "near match"
       */
      for-each:x:/../*/sys42.get-widget/**(/container/*/onclick|/void/*/onclick|/literal/*/onclick)

        /*
         * Then making sure this is one of our design time clickers, by traversing [onclick]
         * upwards, making sure there's only [void]/[literal]/[container]/[widgets] ancestors nodes,
         * to prevent [onclick] nodes for dynamically created controls, created as consequence of e.g.
         * some ajax event occurring to be removed
         */
        _should-remove:bool:true
        set:x:/+?value
          src:x:/..for-each/*/_dp/#/.
        _while-node

        /*
         * Looping until we see [sys42.get-widget] node upwards in ancestor hierarchy 
         * from [onclick] event handler
         */
        while:x:/-/#?name
          !=:sys42.get-widget
          switch:x:/..for-each/*/_while-node/#?name
            case:widgets
            case:container
            case:literal
            case:void

              /*
               * Continue iterating next ancestor node
               */
              set:x:/..for-each/*/_while-node?value
                src:x:/..for-each/*/_while-node/#/.
            default:

              /*
               * Stop iterating and signal that we should *not* remove this [onclick]
               */
              set:x:/..for-each/*/_should-remove?value
                src:bool:false
              break

        /*
         * Checking results of [while] iteration, and if we should remove this [onclick]
         */
        if:x:/..for-each/*/_should-remove?value
          set:x:/..for-each/*/_dp/#


      /*
       * Making sure we rename all [_onXXX] event handlers, to their actual name, before
       * returning editor data to caller
       */
      for-each:x:/../*/sys42.get-widget/**(/container/*/~_on|/literal/*/~_on|/void/*/~_on)
        if
          fetch:x:/0/0?value
            index-of:x:/..for-each/*/_dp/#?name
              what:_on
          =:int:0

          /*
           * This is a "hidden" event handler, renaming it back to its original value
           */
          set:x:/..for-each/*/_dp/#?name
            replace:x:/..for-each/*/_dp/#?name
              what:_on
              with:on

      /*
       * Returning [controls] to caller. Notice, we return it as Hyperlisp, and not as
       * lambda, since that's what main editor logic depends upon
       */
      insert-before:x:/../0
        src:controls
      lambda2lisp:x:/../*/sys42.get-widget/*/*/widgets/*
      set:x:/../0?value
        src:x:/../*/lambda2lisp?value

      /*
       * Returning [type] of page to caller
       */
      insert-before:x:/../0
        src
          type:controls





    /*
     * Invoked when a widget is added to the page
     */
    sys42.wysiwyg-controls.add-control

      /*
       * Retrieving default properties, which differs from widget type
       */
      sys42.wysiwyg-controls.get-default-properties:x:/../*/_arg?value

      /*
       * Adding 'insertion position' to create-widget Active Event invocation.
       * Notice that this might be overridden by explicitly supplying a [_parent]
       * argument to invocation
       */
      if:x:/../*/_parent

        /*
         * Using explicitly given [_parent] as parent for widget
         */
        add:x:/../*/_create-widget
          src:@"parent:{0}"
            :x:/../*/_parent?value
      else

        /*
         * Retrieves insertion position, which might differ according to whether or
         * not a widget is selected on page or not
         */
        add:x:/+
          src:x:/../*/_before
        sys42.wysiwyg-controls.get-insertion-position
        add:x:/../*/_create-widget
          src:x:/..else/*/sys42.wysiwyg-controls.get-insertion-position/*

      /*
       * Adding default properties
       */
      add:x:/../*/_create-widget
        src:x:/../*/sys42.wysiwyg-controls.get-default-properties/*

      /*
       * Checking if an explicit [element] was given, and if not, choose
       * the name of the widget type. Otherwise, use the explicit [element]
       * declaration
       */
      if:x:/../*/sys42.wysiwyg-controls.get-default-properties/*/element
        not
        and:x:/../*/_arg?value
          !=:_usercontrol
        add:x:/../*/_create-widget
          src:"element:{0}"
            :x:/../*/_arg?value

      /*
       * Adding [onclick] event handler, such that user can select widget
       * in WYSIWYG surface by clicking it
       */
      add:x:/../*/_create-widget
        src
          onclick
            sys42.wysiwyg-controls.select-widget:x:/../*/_event?value
            if:x:/-?value
              sys42.wysiwyg-controls.databind-select-widget-dropdown:x:/../*/_event?value
            else
              sys42.wysiwyg-controls.databind-select-widget-dropdown:_default

      /*
       * Checking widget creation Active Event, which might be
       * [create-widget] (container)
       * [create-literal-widget] (innerValue type of widget)
       * [create-void-widget] (widget with neither [widgets] nor [innerValue])
       */
      if:x:/../*/sys42.wysiwyg-controls.get-default-properties/*/widgets
        set:x:/../*/_create-widget?name
          src:create-container-widget
      else-if:x:/../*/sys42.wysiwyg-controls.get-default-properties/*/innerValue
        set:x:/../*/_create-widget?name
          src:create-literal-widget
      else-if:x:/../*/_arg?value
        !=:_usercontrol
        set:x:/../*/_create-widget?name
          src:create-void-widget
      else

        /*
         * Usercontrol type of widget, invoking creational event, and returning early
         */
        add:x:/+2/*
          src:x:/../*/_create-widget
        set:x:/+/*/*?name
          src:create-widget
        sys42.wysiwyg-controls.create-user-control
          _create-widget
        return

      /*
       * At this point, Active Event invocation below, should have been adequately built
       * for correctly inserting our widget into surface
       */
      _create-widget
      sys42.wysiwyg-controls.select-widget:x:/-?value
      sys42.wysiwyg-controls.databind-select-widget-dropdown

    /*
     * Creates a user control type of widget, by asking user which existing predefined
     * [controls] he would like to include as his [usercontrol]
     */
    sys42.wysiwyg-controls.create-user-control

      /*
       * Asking user for which [controls] he wish to include, by creating a modal
       * window, looping through all existing [controls] in database
       */
      add:x:/+
        src:x:/../*/_create-widget
      sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/add-usercontrol.hl

    /*
     * Returns the position where to insert a new control
     */
    sys42.wysiwyg-controls.get-insertion-position
      find-widget
        data-selected:true

      /*
       * As a general rule, if any widget is currently selected, we insert
       * the new widget after the currently selected widget, unless [_before]
       * is given. Otherwise, we append the widget into the main design surface
       */
      if:x:/../*/find-widget/*
        if:x:/../*/_before?value.bool
          // [_before] was supplied
          eval-x:x:/+/*
          return
            before:x:/../*/find-widget/*?value
        else
          // No [_before], this is an after operation
          eval-x:x:/+/*
          return
            after:x:/../*/find-widget/*?value
      else
        if:x:/../*/_before?value.bool
          add:x:/./+
            src:"position:0"
        return
          parent:wysiwyg-editor-surface

    /*
     * Returns default properties for specific type of control,
     * takes type of control as [_arg]
     */
    sys42.wysiwyg-controls.get-default-properties
      switch:x:/../*/_arg?value
        case:span
          return
            innerValue:Foo bar
        case:div
          return
            widgets
        case:br
          return

    /*
     * Unselects any selected widgets on page
     */
    sys42.wysiwyg-controls.unselect-widget

      /*
       * Changing visibility for "create inside of widget" buttons
       */
      set-widget-property:wysiwyg-controls-add-container-to-container
        style:"display:none;"
      set-widget-property:wysiwyg-controls-add-usercontrol-to-container
        style:"display:none;"
      set-widget-property:wysiwyg-controls-add-literal-to-container
        style:"display:none;"
      set-widget-property:wysiwyg-controls-add-void-to-container
        style:"display:none;"
      set-widget-property:wysiwyg-controls-paste-to-container
        style:"display:none;"
      set-widget-property:wysiwyg-controls-add-wizard-to-container
        style:"display:none;"

      /*
       * Finding selected widget
       */
      find-widget:wysiwyg-editor-surface
        data-selected:true

      /*
       * Unselecting previously selected widget, if it exists
       */
      if:x:/../*/find-widget/*
        delete-widget-property:x:/../*/find-widget/*?value
          data-selected
      set-widget-property:wysiwyg-controls-properties
        visible:false
      set-widget-property:wysiwyg-manipulate-selected-widget
        visible:false





    /*
     * Selects the given widget on page
     */
    sys42.wysiwyg-controls.select-widget

      /*
       * Finding previously selected widget, such that we can "un-select" it
       */
      find-widget
        data-selected:true

      /*
       * Unselecting previously selected widget, if it exists
       */
      if:x:/../*/find-widget/*
        delete-widget-property:x:/../*/find-widget/*?value
          data-selected

      /*
       * Making sure selected widget is visible, but only if the clicked
       * widget was NOT the one already selected
       */
      if:x:/../*/_arg?value
        !=:x:/../*/find-widget/*?value

        /*
         * Another widget was selected
         */
        set-widget-property:x:/../*/_arg?value
          data-selected:true

        /*
         * Changing visibility for "create inside of widget" buttons
         */
        if
          fetch:x:/0/0?name
            list-widgets:x:/../*/_arg?value
          =:container
          and
            fetch:x:/0/0/0?value
              get-widget-property:x:/../*/_arg?value
                data-usercontrol
            not
          set-widget-property:wysiwyg-controls-add-container-to-container
            style
          set-widget-property:wysiwyg-controls-add-usercontrol-to-container
            style
          set-widget-property:wysiwyg-controls-add-literal-to-container
            style
          set-widget-property:wysiwyg-controls-add-void-to-container
            style
          set-widget-property:wysiwyg-controls-add-wizard-to-container
            style
          if
            fetch:x:/0/0/0
              get-session-value:sys42.wysiwyg-controls.clipboard-widget
            set-widget-property:wysiwyg-controls-paste-to-container
              style
          else
            set-widget-property:wysiwyg-controls-paste-to-container
              style:"display:none;"
        else

          /*
           * Changing visibility for "create inside of widget" buttons
           */
          set-widget-property:wysiwyg-controls-add-container-to-container
            style:"display:none;"
          set-widget-property:wysiwyg-controls-add-usercontrol-to-container
            style:"display:none;"
          set-widget-property:wysiwyg-controls-add-literal-to-container
            style:"display:none;"
          set-widget-property:wysiwyg-controls-add-void-to-container
            style:"display:none;"
          set-widget-property:wysiwyg-controls-paste-to-container
            style:"display:none;"
          set-widget-property:wysiwyg-controls-add-wizard-to-container
            style:"display:none;"

        /*
         * Showing widget's properties widget
         */
        sys42.wysiwyg-controls.show-selected-widgets-properties:x:/../*/_arg?value

        /*
         * Showing buttons that should only be visible while widget is selected
         */
        set-widget-property:wysiwyg-manipulate-selected-widget
          visible:true

        /*
         * Returning true to indicate that a widget actually was selected
         */
        return:bool:true
      else

        /*
         * The widget that was already selected was UN-selected.
         * Hiding widget's properties widget
         */
        sys42.wysiwyg-controls.hide-selected-widgets-properties

        /*
         * Changing visibility for "create inside of widget" buttons
         */
        set-widget-property:wysiwyg-controls-add-container-to-container
          style:"display:none;"
        set-widget-property:wysiwyg-controls-add-usercontrol-to-container
          style:"display:none;"
        set-widget-property:wysiwyg-controls-add-literal-to-container
          style:"display:none;"
        set-widget-property:wysiwyg-controls-add-void-to-container
          style:"display:none;"
        set-widget-property:wysiwyg-controls-paste-to-container
          style:"display:none;"
        set-widget-property:wysiwyg-controls-add-wizard-to-container
          style:"display:none;"

        /*
         * Hiding buttons that should only be visible while widget is selected
         */
        set-widget-property:wysiwyg-manipulate-selected-widget
          visible:false

        /*
         * Returning false to indicate that no widget was selected, 
         * but that this was an "un-select" operation
         */
        return:bool:false





    /*
     * Shows the widget's properties widget, allowing user to
     * edit properties of widget
     */
    sys42.wysiwyg-controls.show-selected-widgets-properties

      /*
       * Evaluates the Hyperlisp file that creates the "property view" widget
       */
      sys42.execute-lisp-file:/system42/cms/page-editor/editors/controls/widget-properties.hl

      /*
       * Then "refreshing" the "manipulate selected widget" toolbar
       */
      find-widget:wysiwyg-editor-surface
        data-selected

      /*
       * Enabling 'Select parent widget button', 
       * unless parent of currently selected widget is our WYSIWYG main surface
       */
      get-parent-widget:x:/../*/find-widget/*?value
      if:x:/-/*?value
        !=:wysiwyg-editor-surface

        /*
         * Enabling "Get parent" button
         */
        sys42.wysiwyg-controls.toggle-get-parent-widget:x:/../*/get-parent-widget/*?value
      else

        /*
         * Disabling "Get parent" button
         */
        sys42.wysiwyg-controls.toggle-get-parent-widget

      /*
       * Then enabling "select children widget's" button, and adding its children selectors,
       * but only if currently selected widget has any children, and it is *not* a usercontrol
       */
      get-children-widgets:x:/../*/find-widget/*?value
      if:x:/-/*/*?count
        >:int:0
        and
          fetch:x:/0/0/0?value
            get-widget-property:x:/../*/find-widget/*?value
              data-usercontrol
          not

        /*
         * Enabling "select children widgets" button
         */
        sys42.wysiwyg-controls.toggle-select-children-widgets:x:/../*/find-widget/*?value
      else

        /*
         * Disabling "select children widgets" button
         */
        sys42.wysiwyg-controls.toggle-select-children-widgets





    /*
     * Hides the widget's properties widget
     */
    sys42.wysiwyg-controls.hide-selected-widgets-properties

      /*
       * Simply hides main "properties view" widget
       */
      set-widget-property:wysiwyg-controls-properties
        visible:false





    /*
     * Returns true if currently selected widget's element aloows "block level content".
     */
    sys42.wysiwyg-controls.selected-widget-allows-block-level-content

      /*
       * First retrieving currently selected widget, for then to retrieve its [element] property
       */
      find-widget:wysiwyg-editor-surface
        data-selected
      get-widget-property:x:/-/*?value
        element

      /*
       * Then loading "element declaration file", to check if element can legally contain "rich HTML",
       * allowing for for instance CKEditor to be used to edit content
       */
      load-file:/system42/cms/page-editor/editors/controls/helpers/legal-elements.hl
      if:x:@"/-/*/*/""{0}""/*/type/=block-level"
        :x:/../*/get-widget-property/*/*?value

        /*
         * This element is legally allowed to have "rich HTML", hence return true
         */
        return:bool:true

      /*
       * Did not find match for element type in declaration file, returning false to caller
       */
      return:bool:false
