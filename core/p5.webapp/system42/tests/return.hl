/*
 * Contains unit tests for testing [return] in system
 */

/*
 * Tests that return behaves correctly and immediately returns
 * from an evaluation
 */
simple
  return
  throw:@"Assert error, code that should never have been evaluated was evaluated!"

/*
 * Tests that return behaves correctly and can return 
 * values from evaluations
 */
return-value
  _x
    return:success
  if
    eval:x:/../*/_x
    !=:success
    throw:@"Assert error, expected [success],got {0}!"
      :x:/..if/*/eval?value

/*
 * Tests that return behaves correctly when evaluation returning
 * from is a nested evaluation
 */
nested
  _x
    _x2
      return
      throw:Code that was never suppoed to be evaluated was evaluated
    eval:x:/-
    return:success
    throw:Code that was never suppoed to be evaluated was evaluated
  if
    eval:x:/../*/_x
    !=:success
    throw:@"Assert error, expected [success],got {0}!"
      :x:/..if/*/eval?value

/*
 * Tests that return behaves correctly when evaluation returning
 * from is inside an if
 */
nested-2
  _x
    if:x:/..?name
      =:_x
      return:success
    throw:Code that was never suppoed to be evaluated was evaluated
  if
    eval:x:/../*/_x
    !=:success
    throw:@"Assert error, expected [success],got {0}!"
      :x:/..if/*/eval?value

/*
 * Tests that return behaves correctly when evaluation returning
 * from is inside an if
 */
return-nodes
  _x
    if:x:/..?name
      =:_x
      return
        foo:bar
    throw:Code that was never suppoed to be evaluated was evaluated
  if
    fetch:x:/0/0
      eval:x:/../*/_x
    !=:node:"foo:bar"
    throw:@"Assert error, expected [success],got {0}!"
      :x:/..if/*/eval?value

/*
 * Tests that return behaves correctly when returning from inside a [while]
 */
in-while
  _x
    _data:int:5
    while:x:/../*/_data?value
      !=:int:0
      set:x:/../*/_data?value
        -:x:/../*/_data?value
          _:int:1
      return:x:/../*/_data?value
  if
    eval:x:/./-
    !=:int:4
    throw:@"Assert error, expected [while] to have prematurely stopped evaluation!"

/*
 * Tests that return behaves correctly when returning from inside a [for-each]
 */
in-for-each
  _x
    _data
      foo1:success
      foo2:error
    for-each:x:/-/*?value
      return:x:/./*/_dp?value
  if
    eval:x:/./-
    !=:success
    throw:@"Assert error, expected [for-each] to have prematurely stopped evaluation!"
