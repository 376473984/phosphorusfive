/*
 * Contains unit tests for testing [set] in system
 */

/*
 * Tests that "set" behaves correctly with value
 */
value
  _data
  set:x:/-?value
    src:success
  if:x:/../0?value
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?value

/*
 * Tests that "set" behaves correctly with [src] being expression
 */
expression-source
  _data
  set:x:/-?value
    src:x:/../0?name
  if:x:/../0?value
    !=:_data
    throw:@"Assert error, expected [_data], got [{0}]!"
      :x:/../0?value

/*
 * Tests that "set" behaves correctly with name
 */
name
  _data
  set:x:/-?name
    src:success
  if:x:/../0?name
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?name

/*
 * Tests that "set" behaves correctly with node
 */
node
  _data
  set:x:/-
    src:"_foo:success"
  if:x:/../0?node.string
    !=:"_foo:success"
    throw:@"Assert error, expected [_foo:success], got [{0}]!"
      :x:/../0?node.string

/*
 * Tests that "set" behaves correctly when setting value to node
 */
node-source
  _data
  set:x:/-?value
    src:node:"_foo:success"
  if:x:/../0?value
    !=:node:"_foo:success"
    throw:@"Assert error, expected [_foo:success], got [{0}]!"
      :x:/../0?value.string

/*
 * Tests that "set" behaves correctly when setting name to null
 */
null-name
  _data
  set:x:/-?name
  if:x:/../0?name
    !=:
    throw:@"Assert error, expected [], got [{0}]!"
      :x:/../0?name

/*
 * Tests that "set" behaves correctly when setting value to null
 */
null-value
  _data
  set:x:/-?value
  if:x:/../0?value
    !=
    throw:@"Assert error, expected null, got [{0}]!"
      :x:/../0?value

/*
 * Tests that "set" behaves correctly when setting node to null
 */
null-node
  _data
  set:x:/-
  if:x:/../0?name
    !=:set
    throw:@"Assert error, expected null-node, got [{0}]!"
      :x:/../0?node.string

/*
 * Tests that "set" behaves correctly when setting multiple values
 * to static string
 */
multiple-destinations
  _data
    foo1
    foo2
  set:x:/-/*?value
    src:success
  if:x:/../0/0?value
    !=:success
    or:x:/../0/1?value
      !=:success
    throw:@"Assert error, expected [success] and [success], got [{0}] and [{1}]!"
      :x:/../0/0?value
      :x:/../0/1?value

/*
 * Tests that "set" behaves correctly when given multiple source values
 */
multiple-source
  _data
    foo1
    foo2
  set:x:/-?value
    src:x:/../0/*?name
  if:x:/../0?value
    !=:foo1foo2
    throw:@"Assert error, expected [foo1foo2], got [{0}]!"
      :x:/../0?value

/*
 * Tests that "set" behaves correctly with [rel-src]
 */
rel-src
  _data
    foo1
    foo2
  set:x:/-/*?value
    rel-src:x:?name
  if:x:/../0/0?value
    !=:foo1
    or:x:/../0/1?value
      !=:foo2
    throw:@"Assert error, expected [foo1] and [foo2], got [{0}] and [{1}]!"
      :x:/../0/0?value
      :x:/../0/1?value

/*
 * Tests that "set" behaves correctly with [rel-src] with formatted expression source
 */
rel-src-formatted-expression
  _output
    foo1
    foo2
  _input
    _foo1:bar1
    _foo2:bar2
  set:x:/-2/*?value
    rel-src:x:/../*/_input/*/_{0}?value
      :x:?name
  if:x:/../0/0?value
    !=:bar1
    or:x:/../0/1?value
      !=:bar2
    throw:@"Assert error, expected [bar1] and [bar2], got [{0}] and [{1}]!"
      :x:/../0/0?value
      :x:/../0/1?value

/*
 * Tests that "set" behaves correctly with [rel-src] with formatted constant source
 */
rel-src-formatted-constant
  _output
    foo1
    foo2
  set:x:/-/*?value
    rel-src:_{0}
      :x:?name
  if:x:/../0/0?value
    !=:_foo1
    or:x:/../0/1?value
      !=:_foo2
    throw:@"Assert error, expected [_foo1] and [_foo2], got [{0}] and [{1}]!"
      :x:/../0/0?value
      :x:/../0/1?value

/*
 * Tests that "set" behaves correctly with event source,
 * referencing [_dn] or data node of Active Event
 */
event-src
  _data
    foo1
    foo2
  _x
    set:x:/..?value
      src:{0}{1}
        :XX
        :x:/../*/_dn/#?name
  set:x:/-2/*?value
    eval:x:/./-
  if:x:/../0/0?value
    !=:XXfoo1
    or:x:/../0/1?value
      !=:XXfoo2
    throw:@"Assert error, expected [XXfoo1] and [XXfoo2], got [{0}] and [{1}]!"
      :x:/../0/0?value
      :x:/../0/1?value
