/*
 * Contains [for-each] unit tests in system
 */

/*
 * Tests a simple value type of [for-each]
 */
value
  _data
    foo1:bar1
    foo2:bar2
  for-each:x:/../*/_data/*?value
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp?value
  if:x:/../0?value
    !=:bar1bar2
    throw:@"Assert error, expected [bar1bar2], got [{0}]!"
      :x:/../0?value

/*
 * Tests a simple name type of [for-each]
 */
name
  _data
    foo1:bar1
    foo2:bar2
  for-each:x:/../*/_data/*?name
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp?value
  if:x:/../0?value
    !=:foo1foo2
    throw:@"Assert error, expected [foo1foo2], got [{0}]!"
      :x:/../0?value

/*
 * Tests a simple node type of [for-each]
 */
node
  _data
    foo1:bar1
    foo2:bar2
  for-each:x:/../*/_data/*
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp/#?node.string
  if:x:/../0?value
    !=:@"foo1:bar1foo2:bar2"
    throw:@"Assert error, expected [foo1:bar1foo2:bar2], got [{0}]!"
      :x:/../0?value

/*
 * Tests that [for-each] behaves correctly when break'ed
 */
break
  _data
    foo1:bar1
    foo2:bar2
  for-each:x:/../*/_data/*
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp/#?node.string
    break
    set:x:/./-?value
      src:error
  if:x:/../0?value
    !=:@"foo1:bar1"
    throw:@"Assert error, expected [foo1:bar1], got [{0}]!"
      :x:/../0?value

/*
 * Tests that [for-each] behaves correctly when break'ed inside nested [for-each]
 */
nested-break
  _data
    foo1:su
    foo2:cc
    foo3:ess
  for-each:x:/../*/_data/*
    if:x:/./*/_dp/#?name
      =:foo2
      continue
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp/#?value
    for-each:x:/../*/_data/*/[1,]
      set:x:/./-?value
        src:{0}{1}
          :x:/../0?value
          :x:/..for-each/*/_dp/#?value
      break
  if:x:/../0?value
    !=:@"success"
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?value

/*
 * Tests that [for-each] behaves correctly when continue'd
 */
continue
  _data
    foo1:succ
    foo2:error
    foo3:ess
  for-each:x:/../*/_data/*
    if:x:/./*/_dp/#?name
      =:foo2
      continue
    set:x:/./-?value
      src:{0}{1}
        :x:/../0?value
        :x:/..for-each/*/_dp/#?value
  if:x:/../0?value
    !=:@"success"
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?value
