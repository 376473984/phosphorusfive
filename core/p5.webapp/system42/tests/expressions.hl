/*
 * Contains expression unit tests for system
 */

/*
 * Tests that "identity expression" behaves as expected!
 */
expression-identity
  insert-before:x:
    src
      foo:bar
  if:x:/../0?name
    !=:foo
    or:x:/../0?value
      !=:bar
    throw:@"Assert error, expected [foo:bar], got [{0}]!"
      :x:/../0

/*
 * Tests value expression
 */
expression-value
  _data
  set:x:/-?value
    src:success
  if:x:/../0?value
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?value

/*
 * Tests name expression
 */
expression-name
  _data
  set:x:/-?name
    src:success
  if:x:/../0?name
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?name

/*
 * Tests node expression
 */
expression-node
  _data
  set:x:/-
    src:"foo:bar"
  if:x:/../0?name
    !=:foo
    or:x:/../0?value
      !=:bar
    throw:@"Assert error, expected [foo:bar], got [{0}]!"
      :x:/../0?node.string

/*
 * Tests count expression
 */
expression-count
  _data
    foo1
    foo2
  if:x:/../0/*?count
    !=:int:2
    throw:@"Assert error, expected [2], got [{0}]!"
      :x:/../0/*?count
