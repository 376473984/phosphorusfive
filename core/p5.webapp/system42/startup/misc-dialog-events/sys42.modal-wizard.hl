
/*
 * Responsible for creating the Active Event that shows the user a modal dialog,
 * to make him type in arbitrary pieces of data
 */
set-protected-event:sys42.modal-wizard

  /*
   * Making sure we delete any previously created dialogs
   * Notice that sice we only hide the dialog when it is closed, we need
   * to check if any previous dialogs exist, and if so, delete them, before 
   * we create any new ones
   */
  if
    fetch:x:/0/0?value
      widget-exist:modal-wizard
    delete-widget:modal-wizard

  /*
   * Setting [header] and [body] property of Modal Dialog
   */
  set:x:/../*/create-widget/**/literal/=modal-wizard-header/*/innerValue?value
    src:x:/../*/header?value
  set:x:/../*/create-widget/**/literal/=modal-wizard-body/*/innerValue?value
    src:x:/../*/body?value

  /*
   * Appending [onok] code into OK onclick button's event handler's [_eval] node
   */
  add:x:/../*/create-widget/**/literal/=modal-wizard-ok/*/onclick/**/_eval
    src:x:/../*/onok/*

  /*
   * Appending all dynamically created widgets as sources to retrieve value of 
   * inside of [onclick] of OK button
   */
  add:x:/../*/create-widget/**/literal/=modal-wizard-ok/*/onclick/*/_widgets
    src:x:/../*/controls/*?value

  /*
   * This is simply NOT FUCKING "OK" GOOGLE CHROME DEVS!
   * When I tell my browser to fucking TURN OFF autocomplete, then 
   * I expect my browser to do as I FUCKING TELL IT TO DO AND 
   * TURN OFF AUTOCOMPLETE!
   * 
   * Fix your phony ass Google Chrome autocomplete features ASAP, or
   * don't be expecting much kudos from web devs in the future!!
   * 
   * Remember IE6 ...!!
   */
  if:x:/../*/controls/*/*/autocomplete/=off
    // Turning OFF autocomplete for Google Chrome!
    _literal
      literal:auto-complete-force-off
        element:div
        style:"display:none;"
        innerValue:@"<input type=""password"" name=""fuck-auto-complete"" id=""fuck-auto-complete"" autocomplete=""address-level4"" />"
    add:x:/../*/create-widget/*/widgets
      src:x:/././*/_literal/*

  /*
   * Appending dynamically declared [controls] into body of dialogue, but first
   * changing [mandatory] to [_mandatory], to make it avoid rendering attribute
   * to client side!
   */
  set:x:/../*/controls/*/*/mandatory?name
    src:_mandatory
  for-each:x:/../*/controls/*

    // Figuring out which type of control to create
    if:x:/..for-each/*/__dp/#?name
      =:text
      or:x:/..for-each/*/__dp/#?name
        =:password
      or:x:/..for-each/*/__dp/#?name
        =:number
      or:x:/..for-each/*/__dp/#?name
        =:email

      // Creating some sort of "text" control
      _controls
        container
          class:input-group prepend-left prepend-top prepend-bottom prepend-right
          widgets
            literal
              class:input-group-addon
              innerValue
            void
              element:input
              type
              class:form-control
              onkeypress:"return p5.keyModalWizardPress(event);"

      // Label control properties
      set:x:/..if/*/_controls/*/container/*/widgets/0/*/innerValue?value
        src:x:/..for-each/*/__dp/#/*/label?value

      // Input control properties
      set:x:/./*/_controls/*/container/*/widgets/1?value
        src:x:/..for-each/*/__dp/#?value
      set:x:/./*/_controls/*/container/*/widgets/1/*/type?value
        src:x:/..for-each/*/__dp/#?name
      add:x:/./*/_controls/*/container/*/widgets/1
        src:x:/..for-each/*/__dp/#/*(!/label)

      // Checking if this is mandatory field, and if so, adding [onchange] to reset CSS class when changed
      if:x:/..for-each/*/__dp/#/*/_mandatory?value.bool
        =:bool:true
        add:x:/..if/..if/*/_controls/*/container/*/widgets/*/void
          src
            onchange
              get-widget-property:x:/../*/_event?value
                class
                value
              if:x:/../*/get-widget-property/*/*/value?value
                =:
                and:x:/../*/get-widget-property/*/*/class/=~error?value
                  not

                // Adding "error" class
                set-widget-property:x:/../*/_event?value
                  class:"{0} error"
                    :x:/../*/get-widget-property/*/*/class?value
              else

                // Removing "error" class
                split:x:/../*/get-widget-property/*/*/class?value
                  =:" error"
                set-widget-property:x:/../*/_event?value
                  class:x:/./-/0?name

      // Adding decorated template control to body of modal dialogue
      add:x:/../*/create-widget/**/container/=modal-wizard-controls/*/widgets
        src:x:/..if/*/_controls/*


  // Making sure dialog is visible, and setting focus to first input control in dialogue
  send-javascript:@"
$('#modal-wizard').modal('toggle');
setTimeout (function (){{
$('#modal-wizard').on('shown.bs.modal', function () {{
    $('#{0}').focus().select();
}})}}, 250);"
    :x:/../*/create-widget/**/container/=modal-wizard-controls/*/widgets/**/void/[0,1]?value


  /*
   * Creating actual modal Widget
   */
  create-widget:modal-wizard
    class:modal fade
    widgets
      container
        class:modal-dialog
        role:document
        widgets
          container
            class:modal-content
            widgets

              /*
               * Header of dialog
               */
              container
                class:modal-header
                widgets
                  literal
                    element:button
                    class:close
                    data-dismiss:modal
                    aria-label:Close
                    innerValue:&times;
                  literal:modal-wizard-header
                    element:h4
                    innerValue

              /*
               * Body of dialog, contains [body] and dynamically created controls
               */
              container
                class:modal-body form
                widgets
                  literal:modal-wizard-body
                    innerValue
                  container:modal-wizard-controls
                    class:form-group


                    /*
                     * Dynamic content of modal dialogue ends up here!
                     */
                    widgets


              /*
               * Footer of dialog, contains OK button
               */
              container
                class:modal-footer
                widgets
                  literal:modal-wizard-ok
                    element:button
                    class:btn btn-default
                    innerValue:OK
                    onclick

                      // Retrieving data of dynamic controls, and stuffing into params collection of [eval]
                      _widgets
                      get-widget-property:x:/-/*?name
                        value
                        _mandatory
                      _evaluate:bool:true

                      // Looping through each input control of wizard, putting its value into [eval]
                      for-each:x:/../*/get-widget-property/*

                        // Checking if any of the mandatory fields are missing
                        if:x:/..for-each/*/__dp/#/*/_mandatory?value.bool
                          =:bool:true
                          and:x:/..for-each/*/__dp/#/*/value?value
                            =:

                          // Missing [_mandatory] field!! Only setting focus to the FIRST control that's missing
                          if:x:/../*/_evaluate?value
                            =:bool:true
                            send-javascript:@"$('#{0}').focus().select();"
                              :x:/..for-each/*/__dp/#?name

                          // Making sure [_evaluate] becomes false, such that dialogue doesn't close, and evaluates [onok]
                          set:x:/../*/_evaluate?value
                            src:bool:false

                          // Adding error feedback to mandatory controls that are missing values
                          // But only if "error" class is not already set!
                          get-widget-property:x:/..for-each/*/__dp/#?name
                            class
                          if:x:/-/*/*/=~error
                            not
                            set-widget-property:x:/..for-each/*/__dp/#?name
                              class:"{0} error"
                                :x:/./././-/*/*?value

                        // Adding control's value into [eval]
                        add:x:/../**/eval
                          src:"{0}:{1}"
                            :x:/..for-each/*/__dp/#?name
                            :x:/..for-each/*/__dp/#/*/value?value

                      // Contains code to be executed as user clicks OK
                      _eval

                      // Execute callback Hyperlisp
                      if:x:/../*/_evaluate?value

                        // Evaluating callback [onok], makings sure [offset] prevents properties of dynamic controls to be evaluated
                        set:x:/+/*/*/offset?value
                          src:x:/./+/*/*?count
                        if
                          eval:x:/././-
                            offset

                          // Hiding dialog if evaluation of [onok] yields true!
                          send-javascript:@"$('#modal-wizard').modal('toggle');"


  /*
   * Including JavaScript to help handle carriage return key in fields of dialogue
   */
  include-javascript:@"
  p5.keyModalWizardPress = function(e) {
    if(e.keyCode == 13) {
      p5.$('modal-wizard-ok').raise('onclick');
      return false;
    }
  }"





