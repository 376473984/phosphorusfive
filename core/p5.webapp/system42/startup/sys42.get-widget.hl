
/*
 * Responsible for creating the Active Event that returns the code necessary to create
 * a specific widget existing on page. Basically "reverse engineers" an existing Widget
 * on page, returning the Hyperlisp/lambda necessary to re-create it in its entirety.
 *
 * Pass in ID of widget to recursively iterate as value, expression or [_arg]
 */

create-event:sys42.get-widget

  /*
   * Used as "position node", to make sure all return values are
   * returned "in order"
   */
  _return-value

  /*
   * Figuring out type of widget
   */
  list-widgets:x:/../*/_arg?value

  /*
   * Looping through all widgets requested by caller
   */
  while:x:/-/0

    /*
     * Adding widget to root active event node as "return value"
     */
    insert-before:x:/../*/_return-value
      src:x:/../*/list-widgets/0

    /*
     * Fetching properties, and adding to return value
     */
    list-widget-properties:x:/../*/list-widgets/0?value
    add:x:/../*/_return-value/-
      src:x:/./-/*/*

    /*
     * Checking if this was an automatically generated ID,
     * and if it was, we remove the automatically assigned ID
     */
    match:x:/../*/list-widgets/0?value
      src:regex:/x[abcdef0-9]{7}/c
    if:x:/-/*/*?name
      and:x:/../*/_keep-empty-ids?value.bool
        !=:bool:true
      set:x:/../*/_return-value/-?value

    /*
     * Checking if this was an automatically generated name attribute,
     * and if it was, we remove the "name" attribute entirely
     */
    match:x:/../*/_return-value/-/*/name
      src:regex:/x[abcdef0-9]{7}/c
    if:x:/-/*/*?name
      set:x:/../*/_return-value/-/*/name

    /*
     * Checking if this is an "input" HTML widget, and has an "empty" value, 
     * and if it matches those conditions, we remove the [value] node altogether.
     */
    if:x:/../*/_return-value/-?name
      =:void
      and:x:/../*/_return-value/-/*/element?value
        =:input
      and:x:/../*/_return-value/-/*/value?value
        =:

      /*
       * Removing [value] entirely
       */
      set:x:/../*/_return-value/-/*/value

    /*
     * Widget ajax events
     */
    list-widget-ajax-events:x:/../*/list-widgets/0?value
    add:x:/+
      src:x:/./-/*/*
    get-widget-ajax-event:x:/-2/*?name

    /*
     * Removing all root node children of ajax event nodes who's names are "_event", before 
     * adding ajax events into "return collection", since these are automatically
     * injected into events as the events are created, and are referencing the ID of the widget,
     * which might change
     */
    set:x:/-/*/*/*/_event
    add:x:/../*/_return-value/-
      src:x:/..while/*/get-widget-ajax-event/*/*

    /*
     * Making sure all [container] widgets have the [widgets] child,
     * even if they're not supposed to fetch their children, to create a
     * more "consistent" return value from invocation
     */
    if:x:/../*/list-widgets/0?name
      =:container
      add:x:/../*/_return-value/-
        src
          widgets

    /*
     * Looping through all children, recursively invoking self, but only if we should,
     * and this is not a [data-usercontrol] type of widget, and it is not a [_dynamic]
     * type of control
     */
    if:x:/../*/_no-children?value.bool
      !=:bool:true
      and:x:/../*/_return-value/-/*/_dynamic?value.bool
        !=:bool:true
      and:x:/../*/_return-value/-/*/data-usercontrol
        not
        or:x:/../*/_no-wash-usercontrols?value.bool
          =:bool:true

      /*
       * Looping through all children widgets recursively
       */
      get-children-widgets:x:/../*/list-widgets/0?value
      for-each:x:/-/*/*?value

        /*
         * Dynamically creating recursive invocation, 
         * passing in id of currently iterated children widget
         */
        set:x:/..for-each/*/sys42.get-widget?value
          src:x:/..for-each/*/_dp?value

        /*
         * Making sure recursive invocation get the arguments [_flatten] and [_keep-empty-ids]
         */
        add:x:/..for-each/*/sys42.get-widget
          src:x:/../*(/_flatten|/_keep-empty-ids|/_no-wash-usercontrols)

        /*
         * Recursively invocing "self", now with arguments correctly setup
         */
        sys42.get-widget

        /*
         * Checking if we're supposed to "flatten" hierarchy, and if wo, add widget which
         * is a result of recursive invocation to "root", instead of as child widget of 
         * currently iterated widget
         */
        if:x:/../*/_flatten?value.bool

          /*
           * Returning widget as flat hierarchy
           */
          insert-before:x:/../*/_return-value
            src:x:/..for-each/*/sys42.get-widget/*
        else

          /*
           * Returning widget as relational hierarchy
           */
          add:x:/../*/_return-value/-/*/widgets
            src:x:/..for-each/*/sys42.get-widget/*

    /*
     * Widget lambda events, first retrieving list of all events, then retrieving content
     */
    list-widget-lambda-events:x:/../*/list-widgets/0?value
    add:x:/+
      src:x:/./-/*/*
    get-widget-lambda-event:x:/-2/*?name

    /*
     * Checking if we have any lambda events, and if so, add an [events] node to
     * currently iterated widget
     */
    if:x:/-3/*/*

      /*
       * We have lambda events, adding [events] node, for then to add all events into
       * this node. But first, we remove all [_event] nodes inside of lambda events
       */
      set:x:/./-/*/*/*/_event
      add:x:/../*/_return-value/-
        src:events
      add:x:/../*/_return-value/-/*/events
        src:x:/././-/*/*

    /*
     * Removing zeroth item of list-widget, to "decrement" while loop condition
     */
    set:x:/../*/list-widgets/0



