/*
 * Creates the default pages for our CMS if no pages exists in our database
 */

// Checking to see if there exists any [p5.page] objects in database from before
select-data:x:/*/*/p5.page?count
if:x:/-?value
  equals:int:0

  // Default landing page
  insert-data
    p5.page:/
      type:lambda
      name:Home
      template:/system42/cms/templates/main.hl
      lambda:@"/*
 * Default landing page for your system, automatically 
 * created by your own personal Marvin!
 */
whoami
if:x:/-/*/role?value
  =:root

  /*
   * Hey, my owner just paid a visit! I am so happy today!!
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hi there owner. I am so pleased to see you! [<strong>*wagging tail*</strong>]! Please tell me what to do! 
I am your servant! FYI, the first thing you will notice with me, is that this page is only visible for you! If you log out
and refresh the page, you will see a different page, showing the dynamic features of Phosphorus Five!""""<br/><br/>

""""System 42 and Phosphorus Five is a Web Operating System, allowing you to create your own 'Silicon
Valley', keeping your files secure, but accessible from any device, sending encrypted emails, or receiving encrypted emails, 
creating a website, setting up a file sharing service, setting up your own blog, video directory, publishing system, 
etc, etc, etc. You can also setup System42 such that your friends have access to use features, create articles, send and receive emails, 
retrieve or edit files, and so on. Basically, System 42 is your own private little version of 'Silicon Valley' :)""""<br/><br/>

""""Below you can find some of the main links in your system, that allows you to get started with Phosphorus Five and System42.""""</em></blockquote>

<table class=""""table table-hover"""">
    <thead><tr><th>Link</th><th>Explanation</th></tr></thead>
    <tr>
        <td><a href=""""/root/editor"""">Pages</a></td>
        <td>Allows you to edit your pages like you would in a CMS, or even create rich Web Applications</td>
    </tr>
    <tr>
        <td><a href=""""/root/executor"""">Evaluator</a></td>
        <td>Hyperlisp evaluator <em>""""shell""""</em> allowing you to evaluate Hyperlisp, almost like you would with a Linux Terminal window</td>
    </tr>
    <tr>
        <td><a href=""""/root/users"""">Users</a></td>
        <td>Edit users in your system, allowing your friends to gain privileged access to your system</td>
    </tr>
    <tr>
        <td><a href=""""/root/gnupg-database"""">Gnu Privacy Guard</a></td>
        <td>Manage your OpenPGP cryptography keys, create, delete or view all GnuPG cryptography key pairs in your server</td>
    </tr>
    <tr>
        <td><a href=""""/root/tests"""">Unit Tests</a></td>
        <td>Allows you to verify the integrity of your system by evaluating its unit tests, or even edit and/or add unit tests to your system</td>
    </tr>
    <tr>
        <td><a href=""""/superuser/files"""">File System</a></td>
        <td>Browse your server's file system, almost the same way you would with for instance the File Explorer in Windows</td>
    </tr>
    <tr>
        <td><a href=""""/user/profile"""">Profile</a></td>
        <td>Change, edit, or view your profile (user account)</td>
    </tr>
</table>""

else-if:x:/-2/*/role?value
  =:superuser

  /*
   * A close and personal friend of my owner possibly!
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hi there friend. My name is Marving, and since you are a friend of my owner, feel free to use my brain. A great
place for you to start, is probably the <a href=""""/superuser/files"""">file system</a>, where you can upload and store files in a secure manner""""</em></blockquote>""

else

  /*
   * Probably some random visitor
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hello, my name is Marvin, and I have just been adopted by my owner. That's why things looks a little bit odd here, since
he still haven't told me what he wants me to do. Until then, I'll just be attending these cars, and speak to this coffee machine. Maybe
this coffee machine would want to listen to my troubles ...""""</em></blockquote>"""


    p5.page:/root/editor
      type:lambda
      name:Pages
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"

/*
 * simply executes the file that loads up the 'page editor'
 */
sys42.execute-lisp-file:/system42/cms/page-editor/page-editor.hl
"

    p5.page:/root/executor
      type:lambda
      name:Evaluator
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"

/*
 * simply executes the file that loads up the 'executor'
 */
sys42.execute-lisp-file:/system42/apps/executor.hl
"

    p5.page:/root/users
      name:Users
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the 'Users' page
 */
sys42.execute-lisp-file:/system42/apps/users/edit-users.hl
"

    p5.page:/superuser/files
      type:lambda
      name:Files
      template:/system42/cms/templates/main.hl
      role:superuser
      lambda:@"/*
 * Simply executes the file that loads up the 'file browser'
 */
sys42.execute-lisp-file:/system42/apps/file-browser/launch.hl
"


    p5.page:/user/profile
      name:Profile
      template:/system42/cms/templates/main.hl
      type:lambda
      role:user
      lambda:@"/*
 * Simply executes the file that loads up the 'Profile' page
 */
sys42.execute-lisp-file:/system42/apps/profile/edit-profile.hl
"


    p5.page:/root/gnupg-database
      name:GnuPG
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the 'GnuPG database' page
 */
sys42.execute-lisp-file:/system42/apps/gnupg.hl
"


    p5.page:/root/tests
      name:Tests
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the unit tests page
 */
sys42.execute-lisp-file:/system42/tests/index.hl
"


    p5.page:/examples/ajax-widgets-1
      name:Ajax Widgets 1
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to dynamically create
 * an Ajax Web Widget hierarchy.
 */

/*
 * The [create-widget] Active Event is at the core, creating
 * a [container] type of widget, which allows for children widgets
 * inside its [widgets] child. The value of the [create-widget]
 * node becomes the ID of the HTML element rendered.
 * If you wish, you can replace the [create-widget] with either
 * [create-literal-widget] or [create-void-widget]
 */
create-widget:foo

  /*
   * Which widget is the parent widget, or where to inject
   * our widget
   */
  parent:content

  /*
   * Override the HTML element used to render your widget
   */
  element:strong

  /*
   * You can add up any attribute to your widget, by simply
   * adding a child node with the specified name, and the 
   * specified value. The next node will add a CSS class
   * attribute to the HTML element rendered, with the value
   * of 'col-xs-12', which is a Bootstrap CSS class
   */
  class:col-xs-12

  /*
   * The next is wrapper for all children widgets of our
   * root widget
   */
  widgets

    /*
     * The next node creates a [literal] type of widget. There
     * are three (actually four) different types of widgets;
     *   1. [literal] - has the [innerValue] attribute, that
     *      sets the innerHTML of your HTML element
     *   2. [container] - has the [widgets] element, that 
     *      sets the children widget collection for your widget
     *   3. [void] - that has neither [innerValue] nor [widgets],
     *      since it does not allow any content inside of its HTML tag.
     *   4. [tex] - that is a simple text literal, taking only a piece
     *      of HTML as its value, rendering without any element at all.
     */
    literal:bar
    
      /*
       * This becomes the 'innerHTML' value of our widget
       */
      innerValue:Howdy Lambda World!

      /*
       * All attributes starting with on, will automatically
       * be rendered as DOM events. If the attribute has a value,
       * it will be rendered as a JavaScript piece of code. If it
       * has children nodes, these nodes will be threaded as server-side 
       * Hyperlisp, to be evaluated as the user interacts with the widget,
       * raising the specified DOM event.
       */
      onclick
        sys42.info-window:Hello World 2.0

    /*
     * If you do not use any of the predefined widget types, such
     * as [literal], [container], [void] or [text], then the widget
     * will be rendered with the specified tag, and checked during
     * evaluation if it has a [widgets] node, or an [innerValue] node,
     * and late bound to your specified type to become either a [container]
     * or a [literal] widget. The next node will be rendered as a [literal]
     * widget
     */
    a
      href:""http://google.com""
      innerValue:Go to Google!

    /*
     * Creates a [container] widget, with its own children widgets. This
     * becomes a [container] type of widget, because it does not have an
     * [innerValue], but rather a [widgets] child widget control collection.
     * HTML element will be rendered as a 'ul' HTML element, since that's its 
     * name. The ID of the HTML element, will be automatically created as a unique
     * 8 digit long hexadecimal value, since no value of [ul] was explicitly assigned
     */
    ul
      class:prepend-top
      widgets
        li
          innerValue:foo 1

          /*
           * JavaScript event rendered to client as JavaScript
           */
          onclick:""alert('foo 1 clicked');""
        li
          innerValue:foo 2

          /*
           * JavaScript event rendered to client as JavaScript
           */
          onclick:""alert('foo 2 clicked');"""


    p5.page:/examples/databind-1
      name:Databind 1
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to use the [databind]
 * Active Event to create a table that is databound towards
 * some sort of data source. To understand how this page is
 * wired together, please visit;
 * https://phosphorusfive.wordpress.com/2016/02/13/hyperlisp-101-databind/
 */

/*
 * Data source
 */
_data
  person
    name:Thomas Hansen
    phone:98765432
    adr
      str:Dunbar
      no:54
  person
    name:John Doe
    phone:12345678
    adr
      str:Rocky
      no:67
  person
    name:Jane Doe
    phone:91919191
    adr
      str:Glen Allen
      no:76543

/*
 * Databinding table widget below to datasource above
 */
databind:x:/../*/create-widget/*/widgets
  src:x:/../*/_data/*
  template
    tr
      widgets
        td
          {innerValue}:x:/*/name?value
        td
          {innerValue}:x:/*/phone?value
        td
          {innerValue}:x:/*/adr/*/str?value
        td
          {innerValue}:x:/*/adr/*/no?value

// Uncomment the line below to see the results of our [databind] invocation
// sys42.show-code-window:x:/..

/*
 * Creating our databound widget
 */
create-widget
  parent:content
  element:table
  class:table table-hover
  widgets
    text:@""<thead><tr><th>Name</th><th>Phone</th><th>Street</th><th>Number</th></tr></thead>"""


    p5.page:/examples/databind-2
      name:Databind 2
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to use the [databind]
 * Active Event to databind towards *ANY* data, by creating
 * a table HTML element, that wraps every single 'leaf node'
 * in your datasource, automatically creating relevant table 
 * columns for your table.
 *
 * Notice that this type of logic can be used for databinding
 * literally any type of datasource, generically, and will
 * adapt according to the datasource supplied. This is therefor
 * a 'generic' [databind] piece of logic, working for anything,
 * as long as each databound object instance have the same structure
 */

/*
 * PS!
 * Try changing your datasource to 'anything'. As long as
 * each 'instance' in your datasource has the same structure,
 * it should work, and create one column for each leaf node value in
 * your datasource!
 */
_data
  person
    name:Thomas Hansen
    phone:98765432
    adr
      str:Dunbar
      no:54
  person
    name:John Doe
    phone:12345678
    adr
      str:Rocky
      no:67
  person
    name:Jane Doe
    phone:91919191
    adr
      str:Glen Allen
      no:76543

/*
 * Databinding table widget below to datasource above.
 * Notice the difference in the [src] node from this example
 * and the 'Databind 1' example, that ensures that only
 * leaf nodes' are being a part of your data source.
 *
 * Notice also that we have TWO [databind] invocations, one
 * for creating the table headers, and the second one to create
 * the table rows. Notice how the first [databind] that binds the
 * headers, only selects the 1st data source instance, by using the
 * range iterator. (the [0,1] parts)
 *
 * Notice also how we only select nodes that does NOT have children,
 * meaning only the 'leaf nodes', which is done through the inner expression
 * in the (!/0/.) parts
 */

// Databinding headers of table
databind:x:/../*/create-widget/*/widgets/*/thead/*/widgets/*/tr/*/widgets
  src:x:/../*/_data/*/[0,1]/**(!/0/.)
  template
    th
      {innerValue}:x:?name

// Databinding rows of table
databind:x:/../*/create-widget/*/widgets
  src:x:/../*/_data/*
  template

    tr
      widgets

        /*
         * Inner databound expression, will loop once for each
         * result from inner expression, and create one td HTML element
         * for each. The expression supplied here, will retrieve all
         * nodes that does NOT have 'children nodes', effectively returning
         * all 'leaf nodes'.
         *
         * When you supply an expression to a databound node, that returns a
         * node result, instead of a value or a name, it will be treated as
         * an 'inner databind expression', looping once for each result, recursively
         * inside of your 'outer databind expression'
         */
        {td}:x:/**(!/0/.)
          {innerValue}:x:?value

// Uncomment the line below to see the results of our [databind] invocations
// sys42.show-code-window:x:/..
/*
 * Creating our databound widget
 */
create-widget
  parent:content
  element:table
  class:table table-hover
  widgets
    thead
      widgets
        tr
          widgets"


    p5.page:/examples/cryptoxifier
      name:Cryptoxifier
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Creates a web widget that allows you to encrypt and decrypt plain text,
 * and cipher text, using OpenPGP cryptography. This application requires that
 * you have a Marvin PGP key defined in your web.config file
 */

/*
 * Informing user that he'll need to have a 'machine Marvin' cryptography key
 * defined to use app
 */
sys42.confirm-window
  _header:Info!
  _body:@""This app requires that you have a Marvin machine cryptography key created and defined in web.config, 
otherwise it won't work! Make sure you have valid settings in <em>'marvinPgpKey'</em> and <em>'marvinPgpKeyPassword'</em>
in your web.config file! And that these settings maps to an existing key in your GnuPG database!""

create-widget:crypto-wrapper
  parent:content
  class:col-xs-12 flash-from-left form
  widgets
    container
      class:form-group
      widgets
        container
          class:input-group
          widgets
            literal
              class:input-group-addon
              innerValue:PGP key email
            void:pgp-key
              events

                /*
                 * Stores your last used PGP encryption key in yoru session, such
                 * that the 'app' remembers it across page loads
                 */
                sys42.store-currently-used-encryption-key
                  get-widget-property:pgp-key
                    value
                  set-session-value:sys42.store-currently-used-encryption-key
                    src:x:/../*/get-widget-property/*/*?value
              oninit

                /*
                 * Retrieves tha last used encryption key from session, if any,
                 * and sets the 'Encryption key' property to that value
                 */
                get-session-value:sys42.store-currently-used-encryption-key
                set-widget-property:pgp-key
                  value:x:/../*/get-session-value/*?value
              element:input
              type:text
              placeholder:Encryption key ...
              class:form-control
              oninit

                /*
                 * Using jQuery to set focus to PGP key input text field
                 */
                send-javascript:""$('#pgp-key').focus().select();""
    container
      class:form-group prepend-top
      widgets

        /*
         * This is the input text, which might be cipher text, or plain text
         */
        literal:input-text
          element:textarea
          class:form-control
          rows:10
          placeholder:Input text ...
    container
      class:form-group col-xs-push-3 col-xs-9
      widgets
      
        /*
         * 'Encrypt' button, that assumes your input text is plain text,
         * and encrypts it using the specified encryption key
         */
        literal:encrypt
          element:button
          innerValue:Encrypt
          class:btn btn-default col-xs-4
          onclick

            /*
             * Storing key used for later
             */
            sys42.store-currently-used-encryption-key
            _widgets
              input-text
              pgp-key

            /*
             * Retrieving the values of 'input-text' and 'pgp-key'
             */
            get-widget-property:x:/../*/_widgets/*?name
              value
              innerValue

            /*
             * If no encryption key is supplied, we assume user is encrypting to himself,
             * using the default enryption key, by simply removing the email node as a child 
             * of the [encryption] node
             */
            if:x:/-/*/pgp-key/*/value?value
              =:
              set:x:/./+2/**/encryption/*

            /*
             * Forward evaluates expressions inside of [p5.mime.create]
             */
            eval-x:x:/+/*/**
            p5.mime.create
              text:plain
                encryption
                  email:x:/../*/get-widget-property/*/pgp-key/*/value?value
                content:x:/../*/get-widget-property/*/input-text/*/innerValue?value
                
            /*
             * Changing output text widget's innerValue to encrypted text
             */
            set-widget-property:output-text
              innerValue:x:/../*/p5.mime.create/*/result?value
        literal:decrypt
          element:button
          innerValue:Decrypt
          class:btn btn-default col-xs-4
          onclick

            /*
             * Retrieving the values of 'input-text'
             */
            get-widget-property:input-text
              innerValue

            /*
             * Parsing mime, assuming decryption key to use is 'machine key'
             */
            p5.mime.parse:x:/../*/get-widget-property/*/*?value

            /*
             * Settings output text to decrypted mime content, and removing
             * entire 'input text' to make field ready for next operation
             */
            set-widget-property:output-text
              innerValue:x:/../*/p5.mime.parse/**/content?value
            set-widget-property:input-text
              innerValue:

            /*
             * Using jQuery to set focus to 'input text field'
             */
            send-javascript:""$('#input-text').focus().select();""
        literal:clear-txt
          element:button
          innerValue:Clear
          class:btn btn-default col-xs-4
          onclick

            /*
             * Clearing all input/output widgets on page
             */
            _widgets
              input-text
              output-text
            set-widget-property:x:/-/*?name
              innerValue:
            send-javascript:""$('#input-text').focus().select();""
    container
      class:form-group prepend-top
      widgets
      
        /*
         * Used to holde output of either encryption or decryption operation
         */
        literal:output-text
          element:textarea
          class:form-control
          rows:10
          placeholder:Output text ..."


    p5.page:/examples/link-scraper
      name:Link scraper
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * This little application allows the user to type
 * in a URL, for then to fetch the document at the
 * supplied URL, and extract all links from that page,
 * that are in 'absolute format', displaying the links 
 * as an ordered list.
 *
 * 'absolute format' means the link starts with 'http'
 */

/*
 * Uses the 'wizard window' to fetch a URL from user
 */
sys42.wizard-window
  _header:Supply a link to fetch!
  _body:Type in a URL for a website from which to fetch all absolute links from. Please notice that this process might take some time ...
  _widgets
    text:url-to-fetch
      label:URL
      placeholde:Type in a URL ...
      mandatory:true
  _onok

    /*
     * Checks if URL contains a 'http' part, and if not,
     * add 'http://' to its beginning
     */
    index-of:x:/../*/url-to-fetch?value
      what:http
    if:x:/-/*?count
      =:int:0
      set:x:/../*/url-to-fetch?value
        src:{0}{1}
          :""http://""
          :x:/../*/url-to-fetch?value

    /*
     * Using the p5 net HTTP-GET Active Event to fetch the document from
     * the specified URL
     */
    p5.net.http-get:x:/../*/url-to-fetch?value

    /*
     * Creating a p5.lambda structure from the HTML retrieved from the 
     * specified URL
     */
    html2lambda:x:/-/**/content?value

    /*
     * Databinding our [create-widget] Active Event below to the hyperlinks
     * found in the HTML document
     */
    databind:x:/../*/create-widget/*/widgets
      src:x:/../*/html2lambda/**/a
      template
        li
          widgets
            a
              {href}:x:/*/@href?value
              {innerValue}:x:/*/#text?value
              target:_blank

    /*
     * Removing all URLs that have either empty anchor text,
     * empty URL, or does not contain the text 'http' in them
     */
    set:x:/+3/**/a/*/href(!/=~{0})/././.
      :http
    set:x:/+2/**/a/*/href/=~/././.
    set:x:/+/**/a/*/innerValue/=~/././.

    /*
     * Creating a widget to display all hyperlinks found.
     * Widget is of type 'ul', and each link is wrapped inside of a
     * 'li' HTML element
     */
    create-widget:links
      parent:content
      element:ol
      widgets

    /*
     * Returning 'true' to wizard-window, to make sure the window is closed
     */
    set:x:/..?value
      src:bool:true"


    p5.page:/about
      type:html
      name:About
      template:/system42/cms/templates/main.hl
      content:@"<p>Although Phosphorus Five and System42, is the architecture and creation of one single person, me that is, there are numerous others who have one way or another contributed. This page is to say thank you to all of these people.</p>

<ul>
	<li>Svein Daniel Solvenus - sveindaniel_phosphorus_at_solvenus_dot_no - for providing extensive testing and invaluable feedback, over a long period of time</li>
	<li><a href=""https://github.com/jstedfast/MimeKit/"">MimeKit</a>, <a href=""https://github.com/jstedfast/MailKit"">MailKit</a> and its brilliant creator, Jeffrey Steadfast, for always responding to my MimeKit/MailKit support requests within minutes, even on x-mas eve</li>
	<li><a href=""https://www.bouncycastle.org/"">The Legion of the Bouncy Castle</a>, and all who contributes to it, for creating a brilliant cryptography library for .net and Mono</li>
	<li><a href=""http://xamarin.com/"">Xamarin</a>, <a href=""http://www.mono-project.com/"">Mono</a>, and all the other people working on both of these great projects, for delivering a marvelous IDE and Free Software runtime for .Net </li>
	<li><a href=""https://github.com/icsharpcode/SharpZipLib"">SharpZipLib</a>, Mike Krueger and David Pierson, in addition to everyone contributing to this awesome library, for delivering an Open Source zip library for .Net and Mono</li>
	<li><a href=""http://ckeditor.com/"">CKEditor</a> and Frederico Knabben, its creator, for giving out the best HTML wysiwyg editor imaginable as Free Software</li>
	<li><a href=""https://codemirror.net/"">CodeMirror</a>, and Marijn Haverbeke, for creating a brilliant syntax highlighted code editor for the web</li>
	<li><a href=""https://htmlagilitypack.codeplex.com/"">HtmlAgilityPack</a> and all participants, for making the job of semantically parsing HTML a breeze</li>
	<li><a href=""http://getbootstrap.com/"">Bootstrap</a>, the CSS framework, for delivering a brilliant CSS framework, which Phosphorus and System42 is 100% dependent upon</li>
</ul>
<p>There are many more too, which either directly or indirectly have contributed.</p>


<p>PS!<br>
I am for hire, either to develop custom modules, teach, or do other things related to Phosphorus Five and System42!<br/>
Send me an <a href=""mailto:phosphorusfive@gmail.com"">email</a> if you wish to talk about such a proposal</p>"
