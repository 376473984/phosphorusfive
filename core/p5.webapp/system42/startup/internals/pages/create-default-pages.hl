/*
 * Creates the default pages for our CMS if no pages exists in our database
 */

// Checking to see if there exists any [p5.page] objects in database from before
select-data:x:/*/*/p5.page?count
if:x:/-?value
  equals:int:0

  // Default landing page
  insert-data
    p5.page:/
      type:lambda
      name:Home
      template:/system42/cms/templates/main.hl
      lambda:@"/*
 * Default landing page for your system, automatically 
 * created by your own personal Marvin!
 */
whoami
if:x:/-/*/role?value
  =:root

  /*
   * Hey, my owner just paid a visit! I am so happy today!!
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hi there owner. I am so pleased to see you! [<strong>*wagging tail*</strong>]! Please tell me what to do! 
I am your servant! FYI, the first thing you will notice with me, is that this page is only visible for you! If you log out
and refresh the page, you will see a different page, showing the dynamic features of Phosphorus Five!""""<br/><br/>

""""System 42 and Phosphorus Five is a Web Operating System, allowing you to create your own 'Silicon
Valley', keeping your files secure, but accessible from any device, sending encrypted emails, or receiving encrypted emails, 
creating a website, setting up a file sharing service, setting up your own blog, video directory, publishing system, 
etc, etc, etc. You can also setup System42 such that your friends have access to use features, create articles, send and receive emails, 
retrieve or edit files, and so on. Basically, System 42 is your own private little version of 'Silicon Valley' :)""""<br/><br/>

""""Below you can find some of the main links in your system, that allows you to get started with Phosphorus Five and System42.""""</em></blockquote>

<table class=""""table table-hover"""">
    <thead><tr><th>Link</th><th>Explanation</th></tr></thead>
    <tr>
        <td><a href=""""/root/editor"""">Pages</a></td>
        <td>Allows you to edit your pages like you would in a CMS, or even create rich Web Applications</td>
    </tr>
    <tr>
        <td><a href=""""/root/executor"""">Evaluator</a></td>
        <td>Hyperlisp evaluator <em>""""shell""""</em> allowing you to evaluate Hyperlisp, almost like you would with a Linux Terminal window</td>
    </tr>
    <tr>
        <td><a href=""""/root/users"""">Users</a></td>
        <td>Edit users in your system, allowing your friends to gain privileged access to your system</td>
    </tr>
    <tr>
        <td><a href=""""/root/gnupg-database"""">Gnu Privacy Guard</a></td>
        <td>Manage your OpenPGP cryptography keys, create, delete or view all GnuPG cryptography key pairs in your server</td>
    </tr>
    <tr>
        <td><a href=""""/root/tests"""">Unit Tests</a></td>
        <td>Allows you to verify the integrity of your system by evaluating its unit tests, or even edit and/or add unit tests to your system</td>
    </tr>
    <tr>
        <td><a href=""""/superuser/files"""">File System</a></td>
        <td>Browse your server's file system, almost the same way you would with for instance the File Explorer in Windows</td>
    </tr>
    <tr>
        <td><a href=""""/user/profile"""">Profile</a></td>
        <td>Change, edit, or view your profile (user account)</td>
    </tr>
</table>""

else-if:x:/-2/*/role?value
  =:superuser

  /*
   * A close and personal friend of my owner possibly!
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hi there friend. My name is Marving, and since you are a friend of my owner, feel free to use my brain. A great
place for you to start, is probably the <a href=""""/superuser/files"""">file system</a>, where you can upload and store files in a secure manner""""</em></blockquote>""

else

  /*
   * Probably some random visitor
   */
  create-widget:foo
    parent:content
    class:col-xs-12
    widgets
      literal:bar
        innerValue:@""<img src=""""/media/images/marvin-headshot.png"""" style=""""float:right;"""" class=""""prepend-left"""" />
<blockquote><em>""""Hello, my name is Marvin, and I have just been adopted by my owner. That's why things looks a little bit odd here, since
he still haven't told me what he wants me to do. Until then, I'll just be attending these cars, and speak to this coffee machine. Maybe
this coffee machine would want to listen to my troubles ...""""</em></blockquote>"""


    p5.page:/root/editor
      type:lambda
      name:Pages
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"

/*
 * simply executes the file that loads up the 'page editor'
 */
sys42.execute-lisp-file:/system42/cms/page-editor/page-editor.hl
"

    p5.page:/root/executor
      type:lambda
      name:Evaluator
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"

/*
 * simply executes the file that loads up the 'executor'
 */
sys42.execute-lisp-file:/system42/apps/executor.hl
"

    p5.page:/root/users
      name:Users
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the 'Users' page
 */
sys42.execute-lisp-file:/system42/apps/users/edit-users.hl
"

    p5.page:/superuser/files
      type:lambda
      name:Files
      template:/system42/cms/templates/main.hl
      role:superuser
      lambda:@"/*
 * Simply executes the file that loads up the 'file browser'
 */
sys42.execute-lisp-file:/system42/apps/file-browser/launch.hl
"


    p5.page:/user/profile
      name:Profile
      template:/system42/cms/templates/main.hl
      type:lambda
      role:user
      lambda:@"/*
 * Simply executes the file that loads up the 'Profile' page
 */
sys42.execute-lisp-file:/system42/apps/profile/edit-profile.hl
"


    p5.page:/root/gnupg-database
      name:GnuPG
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the 'GnuPG database' page
 */
sys42.execute-lisp-file:/system42/apps/gnupg.hl
"


    p5.page:/root/tests
      name:Tests
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * Simply executes the file that loads up the unit tests page
 */
sys42.execute-lisp-file:/system42/tests/index.hl
"


    p5.page:/examples/ajax-widgets-1
      name:Ajax Widgets 1
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to dynamically create
 * an Ajax Web Widget hierarchy.
 */

/*
 * The [create-widget] Active Event is at the core, creating
 * a [container] type of widget, which allows for children widgets
 * inside its [widgets] child. The value of the [create-widget]
 * node becomes the ID of the HTML element rendered.
 * If you wish, you can replace the [create-widget] with either
 * [create-literal-widget] or [create-void-widget]
 */
create-widget:foo

  /*
   * Which widget is the parent widget, or where to inject
   * our widget
   */
  parent:content

  /*
   * Override the HTML element used to render your widget
   */
  element:strong

  /*
   * You can add up any attribute to your widget, by simply
   * adding a child node with the specified name, and the 
   * specified value. The next node will add a CSS class
   * attribute to the HTML element rendered, with the value
   * of 'col-xs-12', which is a Bootstrap CSS class
   */
  class:col-xs-12

  /*
   * The next is wrapper for all children widgets of our
   * root widget
   */
  widgets

    /*
     * The next node creates a [literal] type of widget. There
     * are three (actually four) different types of widgets;
     *   1. [literal] - has the [innerValue] attribute, that
     *      sets the innerHTML of your HTML element
     *   2. [container] - has the [widgets] element, that 
     *      sets the children widget collection for your widget
     *   3. [void] - that has neither [innerValue] nor [widgets],
     *      since it does not allow any content inside of its HTML tag.
     *   4. [tex] - that is a simple text literal, taking only a piece
     *      of HTML as its value, rendering without any element at all.
     */
    literal:bar
    
      /*
       * This becomes the 'innerHTML' value of our widget
       */
      innerValue:Howdy Lambda World!

      /*
       * All attributes starting with on, will automatically
       * be rendered as DOM events. If the attribute has a value,
       * it will be rendered as a JavaScript piece of code. If it
       * has children nodes, these nodes will be threaded as server-side 
       * Hyperlisp, to be evaluated as the user interacts with the widget,
       * raising the specified DOM event.
       */
      onclick
        sys42.info-window:Hello World 2.0

    /*
     * If you do not use any of the predefined widget types, such
     * as [literal], [container], [void] or [text], then the widget
     * will be rendered with the specified tag, and checked during
     * evaluation if it has a [widgets] node, or an [innerValue] node,
     * and late bound to your specified type to become either a [container]
     * or a [literal] widget. The next node will be rendered as a [literal]
     * widget
     */
    a
      href:""http://google.com""
      innerValue:Go to Google!

    /*
     * Creates a [container] widget, with its own children widgets. This
     * becomes a [container] type of widget, because it does not have an
     * [innerValue], but rather a [widgets] child widget control collection.
     * HTML element will be rendered as a 'ul' HTML element, since that's its 
     * name. The ID of the HTML element, will be automatically created as a unique
     * 8 digit long hexadecimal value, since no value of [ul] was explicitly assigned
     */
    ul
      class:prepend-top
      widgets
        li
          innerValue:foo 1

          /*
           * JavaScript event rendered to client as JavaScript
           */
          onclick:""alert('foo 1 clicked');""
        li
          innerValue:foo 2

          /*
           * JavaScript event rendered to client as JavaScript
           */
          onclick:""alert('foo 2 clicked');"""


    p5.page:/examples/databind-1
      name:Databind 1
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to use the [databind]
 * Active Event to create a table that is databound towards
 * some sort of data source. To understand how this page is
 * wired together, please visit;
 * https://phosphorusfive.wordpress.com/2016/02/13/hyperlisp-101-databind/
 */

/*
 * Data source
 */
_data
  person
    name:Thomas Hansen
    phone:98765432
    adr
      str:Dunbar
      no:54
  person
    name:John Doe
    phone:12345678
    adr
      str:Rocky
      no:67
  person
    name:Jane Doe
    phone:91919191
    adr
      str:Glen Allen
      no:76543

/*
 * Databinding table widget below to datasource above
 */
databind:x:/../*/create-widget/*/widgets
  src:x:/../*/_data/*
  template
    tr
      widgets
        td
          {innerValue}:x:/*/name?value
        td
          {innerValue}:x:/*/phone?value
        td
          {innerValue}:x:/*/adr/*/str?value
        td
          {innerValue}:x:/*/adr/*/no?value

// Uncomment the line below to see the results of our [databind] invocation
// sys42.show-code-window:x:/..

/*
 * Creating our databound widget
 */
create-widget
  parent:content
  element:table
  class:table table-hover
  widgets
    text:@""<thead><tr><th>Name</th><th>Phone</th><th>Street</th><th>Number</th></tr></thead>"""


    p5.page:/examples/databind-2
      name:Databind 2
      template:/system42/cms/templates/main.hl
      type:lambda
      role:root
      lambda:@"/*
 * This example shows you how to use the [databind]
 * Active Event to databind towards *ANY* data, by creating
 * a table HTML element, that wraps every single 'leaf node'
 * in your datasource, automatically creating relevant table 
 * columns for your table.
 *
 * Notice that this type of logic can be used for databinding
 * literally any type of datasource, generically, and will
 * adapt according to the datasource supplied. This is therefor
 * a 'generic' [databind] piece of logic, working for anything,
 * as long as each databound object instance have the same structure
 */

/*
 * PS!
 * Try changing your datasource to 'anything'. As long as
 * each 'instance' in your datasource has the same structure,
 * it should work, and create one column for each leaf node value in
 * your datasource!
 */
_data
  person
    name:Thomas Hansen
    phone:98765432
    adr
      str:Dunbar
      no:54
  person
    name:John Doe
    phone:12345678
    adr
      str:Rocky
      no:67
  person
    name:Jane Doe
    phone:91919191
    adr
      str:Glen Allen
      no:76543

/*
 * Databinding table widget below to datasource above.
 * Notice the difference in the [src] node from this example
 * and the 'Databind 1' example, that ensures that only
 * leaf nodes' are being a part of your data source.
 *
 * Notice also that we have TWO [databind] invocations, one
 * for creating the table headers, and the second one to create
 * the table rows. Notice how the first [databind] that binds the
 * headers, only selects the 1st data source instance, by using the
 * range iterator. (the [0,1] parts)
 *
 * Notice also how we only select nodes that does NOT have children,
 * meaning only the 'leaf nodes', which is done through the inner expression
 * in the (!/0/.) parts
 */

// Databinding headers of table
databind:x:/../*/create-widget/*/widgets/*/thead/*/widgets/*/tr/*/widgets
  src:x:/../*/_data/*/[0,1]/**(!/0/.)
  template
    th
      {innerValue}:x:?name

// Databinding rows of table
databind:x:/../*/create-widget/*/widgets
  src:x:/../*/_data/*
  template

    tr
      widgets

        /*
         * Inner databound expression, will loop once for each
         * result from inner expression, and create one td HTML element
         * for each. The expression supplied here, will retrieve all
         * nodes that does NOT have 'children nodes', effectively returning
         * all 'leaf nodes'.
         *
         * When you supply an expression to a databound node, that returns a
         * node result, instead of a value or a name, it will be treated as
         * an 'inner databind expression', looping once for each result, recursively
         * inside of your 'outer databind expression'
         */
        {td}:x:/**(!/0/.)
          {innerValue}:x:?value

// Uncomment the line below to see the results of our [databind] invocations
// sys42.show-code-window:x:/..
/*
 * Creating our databound widget
 */
create-widget
  parent:content
  element:table
  class:table table-hover
  widgets
    thead
      widgets
        tr
          widgets"


    p5.page:/examples/cryptoxifier
      name:Cryptoxifier
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Creates a web widget that allows you to encrypt and decrypt plain text,
 * and cipher text, using OpenPGP cryptography. This application requires that
 * you have a Marvin PGP key defined in your web.config file
 */

/*
 * Informing user that he'll need to have a 'machine Marvin' cryptography key
 * defined to use app
 */
sys42.confirm-window
  _header:Info!
  _body:@""This app requires that you have a Marvin machine cryptography key created and defined in web.config, 
otherwise it won't work! Make sure you have valid settings in <em>'marvinPgpKey'</em> and <em>'marvinPgpKeyPassword'</em>
in your web.config file! And that these settings maps to an existing key in your GnuPG database!""

create-widget:crypto-wrapper
  parent:content
  class:col-xs-12 flash-from-left form
  widgets
    container
      class:form-group
      widgets
        container
          class:input-group
          widgets
            literal
              class:input-group-addon
              innerValue:PGP key email
            void:pgp-key
              events

                /*
                 * Stores your last used PGP encryption key in yoru session, such
                 * that the 'app' remembers it across page loads
                 */
                sys42.store-currently-used-encryption-key
                  get-widget-property:pgp-key
                    value
                  set-session-value:sys42.store-currently-used-encryption-key
                    src:x:/../*/get-widget-property/*/*?value
              oninit

                /*
                 * Retrieves tha last used encryption key from session, if any,
                 * and sets the 'Encryption key' property to that value
                 */
                get-session-value:sys42.store-currently-used-encryption-key
                set-widget-property:pgp-key
                  value:x:/../*/get-session-value/*?value
              element:input
              type:text
              placeholder:Encryption key ...
              class:form-control
              oninit

                /*
                 * Using jQuery to set focus to PGP key input text field
                 */
                send-javascript:""$('#pgp-key').focus().select();""
    container
      class:form-group prepend-top
      widgets

        /*
         * This is the input text, which might be cipher text, or plain text
         */
        literal:input-text
          element:textarea
          class:form-control
          rows:10
          placeholder:Input text ...
    container
      class:form-group col-xs-push-3 col-xs-9
      widgets
      
        /*
         * 'Encrypt' button, that assumes your input text is plain text,
         * and encrypts it using the specified encryption key
         */
        literal:encrypt
          element:button
          innerValue:Encrypt
          class:btn btn-default col-xs-4
          onclick

            /*
             * Storing key used for later
             */
            sys42.store-currently-used-encryption-key
            _widgets
              input-text
              pgp-key

            /*
             * Retrieving the values of 'input-text' and 'pgp-key'
             */
            get-widget-property:x:/../*/_widgets/*?name
              value
              innerValue

            /*
             * If no encryption key is supplied, we assume user is encrypting to himself,
             * using the default enryption key, by simply removing the email node as a child 
             * of the [encryption] node
             */
            if:x:/-/*/pgp-key/*/value?value
              =:
              set:x:/./+2/**/encryption/*

            /*
             * Forward evaluates expressions inside of [p5.mime.create]
             */
            eval-x:x:/+/*/**
            p5.mime.create
              text:plain
                encryption
                  email:x:/../*/get-widget-property/*/pgp-key/*/value?value
                content:x:/../*/get-widget-property/*/input-text/*/innerValue?value
                
            /*
             * Changing output text widget's innerValue to encrypted text
             */
            set-widget-property:output-text
              innerValue:x:/../*/p5.mime.create/*/result?value
        literal:decrypt
          element:button
          innerValue:Decrypt
          class:btn btn-default col-xs-4
          onclick

            /*
             * Retrieving the values of 'input-text'
             */
            get-widget-property:input-text
              innerValue

            /*
             * Parsing mime, assuming decryption key to use is 'machine key'
             */
            p5.mime.parse:x:/../*/get-widget-property/*/*?value

            /*
             * Settings output text to decrypted mime content, and removing
             * entire 'input text' to make field ready for next operation
             */
            set-widget-property:output-text
              innerValue:x:/../*/p5.mime.parse/**/content?value
            set-widget-property:input-text
              innerValue:

            /*
             * Using jQuery to set focus to 'input text field'
             */
            send-javascript:""$('#input-text').focus().select();""
        literal:clear-txt
          element:button
          innerValue:Clear
          class:btn btn-default col-xs-4
          onclick

            /*
             * Clearing all input/output widgets on page
             */
            _widgets
              input-text
              output-text
            set-widget-property:x:/-/*?name
              innerValue:
            send-javascript:""$('#input-text').focus().select();""
    container
      class:form-group prepend-top
      widgets
      
        /*
         * Used to holde output of either encryption or decryption operation
         */
        literal:output-text
          element:textarea
          class:form-control
          rows:10
          placeholder:Output text ..."


    p5.page:/examples/link-scraper
      name:Link scraper
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * This little application allows the user to type
 * in a URL, for then to fetch the document at the
 * supplied URL, and extract all links from that page,
 * that are in 'absolute format', displaying the links 
 * as an ordered list.
 *
 * 'absolute format' means the link starts with 'http'
 */

/*
 * Uses the 'wizard window' to fetch a URL from user
 */
sys42.wizard-window
  _header:Supply a link to fetch!
  _body:Type in a URL for a website from which to fetch all absolute links from. Please notice that this process might take some time ...
  _widgets
    text:url-to-fetch
      label:URL
      placeholde:Type in a URL ...
      mandatory:true
  _onok

    /*
     * Checks if URL contains a 'http' part, and if not,
     * add 'http://' to its beginning
     */
    index-of:x:/../*/url-to-fetch?value
      what:http
    if:x:/-/*?count
      =:int:0
      set:x:/../*/url-to-fetch?value
        src:{0}{1}
          :""http://""
          :x:/../*/url-to-fetch?value

    /*
     * Using the p5 net HTTP-GET Active Event to fetch the document from
     * the specified URL
     */
    p5.net.http-get:x:/../*/url-to-fetch?value

    /*
     * Creating a p5.lambda structure from the HTML retrieved from the 
     * specified URL
     */
    html2lambda:x:/-/**/content?value

    /*
     * Databinding our [create-widget] Active Event below to the hyperlinks
     * found in the HTML document
     */
    databind:x:/../*/create-widget/*/widgets
      src:x:/../*/html2lambda/**/a
      template
        li
          widgets
            a
              {href}:x:/*/@href?value
              {innerValue}:x:/*/#text?value
              target:_blank

    /*
     * Removing all URLs that have either empty anchor text,
     * empty URL, or does not contain the text 'http' in them
     */
    set:x:/+3/**/a/*/href(!/=~{0})/././.
      :http
    set:x:/+2/**/a/*/href/=~/././.
    set:x:/+/**/a/*/innerValue/=~/././.

    /*
     * Creating a widget to display all hyperlinks found.
     * Widget is of type 'ul', and each link is wrapped inside of a
     * 'li' HTML element
     */
    create-widget:links
      parent:content
      element:ol
      widgets

    /*
     * Returning 'true' to wizard-window, to make sure the window is closed
     */
    set:x:/..?value
      src:bool:true"


    p5.page:/examples/todo-app
      name:TODO app
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Creates a 'TODO' CRUD application, that stores
 * its data in the p5 database as 'todo-item' records.
 *
 * Shows how to include and consume JavaScript in your form,
 * to among other things trap CR/LF in textboxes.
 *
 * Shows how to insert, select and delete items from the p5.data
 * database.
 *
 * Shows how to create beautiful forms using the Bootstrap CSS
 * classes that are included in Phosphorus Five.
 * 
 * etc, etc, etc ...
 */


/*
 * Include JavaScript to trap Carriage Return key in 'new item' textbox.
 * This JavaScript function is consumed in 'onkeypress' further down on page
 */
include-javascript:@""
p5.examples = {};
p5.examples.todo_item_enter = function(e) {
  if(e.keyCode == 13) {
    p5.$('add-new-todo-item-button').raise('onclick');
    return false;
  }
}""

/*
 * Creates the main widget that contains our entire TODO form
 */
create-widget:todo-main-form
  parent:content
  widgets

    /*
     * Wraps our 'add new item' part, with some Bootstrap CSS classes,
     * to beautify the form
     */
    container
      class:form-group col-xs-11
      widgets
        container
          class:input-group
          widgets
            span
              class:input-group-addon
              innerValue:Add item

            /*
             * This is the actual 'new item textbox' parts
             */
            input:todo-item-txt
              type:text
              class:form-control
              placeholder:Type in your item here ...

              /*
               * Making sure we handle Carriage Return key in textbox
               */
              onkeypress:@""return p5.examples.todo_item_enter(event);""

              /*
               * Making sure 'new item' textbox initially has focus when
               * form is loaded
               */
              oninit
              
                /*
                 * Making sure 'input new item' textbox gets focus initially when form
                 * is loaded
                 */
                send-javascript:@""$('#todo-item-txt').select().focus();""

    /*
     * The button that saves your new TODO item
     */
    button:add-new-todo-item-button
      class:btn btn-primary col-xs-1
      innerValue:+
      onclick

        /*
         * Retrieves the textbox value
         */
        get-widget-property:todo-item-txt
          value

        /*
         * Forward evaluates expression in [insert-data]
         */
        eval-x:x:/+/*/*
        insert-data
          todo-item
            txt:x:/../*/get-widget-property/*/*?value

        /*
         * Databinds table showing all TODO items
         */
        sys42.examples.databind-todo-list

        /*
         * Making sure 'new item' textbox gets focus again, and selects all text,
         * using jQuery
         */
        send-javascript:@""$('#todo-item-txt').select().focus();""

    /*
     * Wrapper around your TODO items from your database. Basically
     * contains a table HTML element, wrapped inside a div element, where
     * the table HTML element is dynamically created according to your
     * database [todo-item] items
     */
    container:todo-item-wrapper
      class:prepend-top
      oninit

        /*
         * Initially databinding and creating our table HTML element, containing
         * all [todo-item]'s from database
         */
        sys42.examples.databind-todo-list

      /*
       * All widgets can have an [events] segment associated with them,
       * which are local events for the page, only existing as long as widget exists.
       * Here we supply our 'databind TODO items' Active Event
       */
      events

        /*
         * This Active Event simply databinds a table HTML element, and stuffs it into
         * our 'todo-item-wrapper' div HTML element
         */
        sys42.examples.databind-todo-list

          /*
           * Making sure we clean our widgets from any previous databind operations
           */
          clear-widget:todo-item-wrapper

          /*
           * Selects all TODO items from database (all items being of type [todo-item])
           */
          select-data:x:/*/*/todo-item

          /*
           * Checking if there are any [todo-item]'s, and if not, returning immediately
           */
          if:x:/-/*?count
            =:int:0
            return

          /*
           * Databinds the table widget below to [todo-item]'s from database
           */
          databind:x:/+/*/widgets
            src:x:/../*/select-data/*
            template
              tr
                widgets
                  td
                    {innerValue}:x:/*/txt?value
                  td
                    widgets
                      a
                        class:glyphicon glyphicon-remove-circle
                        href:#
                        onclick

                          /*
                           * This 'static' ID will be databound, just like any other node in
                           * the [template] parts of your [databind] invocation. This just so
                           * happens to contain the ID of the currently iterated [todo-item].
                           * Which means we can retrieve which item was clicked when deletion
                           * of one item is requested.
                           */
                          {_id}:x:?value

                          /*
                           * Deletes the specified [todo-item] from database.
                           * Notice how we make sure we use the guid type in our 
                           * value iterator by adding the :guid: type declaration for
                           * our value iterator below
                           */
                          delete-data:x:@""/*/*/todo-item/""""=:guid:{0}""""""
                            :x:/../*/_id?value

                          /*
                           * Databinds the table HTML widget again, since we've now deleted on item
                           * from database
                           */
                          sys42.examples.databind-todo-list

                          /*
                           * Make sure we set focus to 'new item' textbox afterwards
                           */
                          send-javascript:@""$('#todo-item-txt').select().focus();""

          /*
           * This is the actual table HTML element that contains all of 
           * our [todo-item] from database
           */
          create-widget
            parent:todo-item-wrapper
            element:table
            class:table
            widgets

              /*
               * Simple 'static' text widget to provide headers for table HTML element
               */
              text:@""<thead><tr><th>Item</th><th style='width:100px;'>Delete</th></tr></thead>"""


    p5.page:/examples/rss-reader
      name:RSS reader
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Example that shows how to load an RSS document,
 * parse it using the [xml2lambda] Active Event, 
 * and [databind] the results to an unordered list
 */

/*
 * Fetch the RSS XML feed. Try to fetch it first from
 * cache, if that's not successful, we fetch it from its URL,
 * and puts the resulting XML into cache. Regardless of from
 * where it's fetched, after fetching it, it will be stored into
 * [_result]'s value, which will be used for parsing it afterwards
 */
_result

// Checking cache
get-cache-value:sys42.examples.rss-feed
if:x:/-/*?value

  /*
   * We found our RSS/XML in cache, no need to go to RSS URL
   */
  set:x:/../*/_result?value
    src:x:/../*/get-cache-value/*?value
else

  /*
   * We did not find the RSS in our cache, fetching it
   * from the URL, and storing into cache, before setting
   * the [_result] node's value to the XML/RSS
   */
  p5.net.http-get:@""http://digg.com/rss/top.rss""
  set-cache-value:sys42.examples.rss-feed
    src:x:/..else/*/p5.net.http-get/**/content?value
    minutes:5
  set:x:/../*/_result?value
    src:x:/..else/*/p5.net.http-get/**/content?value

/*
 * Transform the RSS XML into a p5.lambda structure
 */
xml2lambda:x:/../*/_result?value

/*
 * Change the inner value of the header of our CMS page
 */
set-widget-property:header
  innerValue:x:/../*/xml2lambda/*/rss/*/channel/*/title?value

/*
 * Databind the widget below to the items from digg's RSS feed
 */
databind:x:/../*/create-widget/*/widgets
  src:x:/../*/xml2lambda/*/rss/*/channel/*/item
  template
    li
      widgets
        a
          href:#
          {innerValue}:x:/*/title?value
          onclick
            eval-x:x:/../*/create-widget/*/after
            create-widget
              after:x:/../*/_event?value
              element:p
              widgets
                strong
                  {innerValue}:x:/*/description?value
                br
                a
                  {href}:x:/*/link?value
                  innerValue:Read more ...
                  target:_blank
            set-widget-property:x:/../*/_event?value
              element:em
                

/*
 * Creates the ul widget that contains the list of RSS items fetched
 */
eval-x:x:/+/**/innerValue
create-widget
  parent:content
  element:ul
  widgets
    p
      innerValue:<em>{0}</em>
        :x:/../*/xml2lambda/*/rss/*/channel/*/description?value"


    p5.page:/examples/address-book
      name:Address Book
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Creates an Address Book application, that allows you
 * to maintain a list of contacts, and their addresses 
 * and phone numbers. Please notice that this is a web
 * version and port of the famous 'Address Book' application
 * from Qt, only with much more features, and way less code ... ;)
 */

/*
 * Include JavaScript to be able to trap carriage return in search
 * textbox
 */
include-javascript:@""
p5.examples = {};
p5.examples.address_search_enter = function(e) {
  if(e.keyCode == 13) {
    p5.$('search-address-book').raise('_onsearch');
    return false;
  }
}""

/*
 * Main address book widget, contains search field, 
 * add new address book item button, and table showing list of
 * address book items
 */
create-widget:address-book-main
  parent:content
  class:col-xs-12
  oninit

    /*
     * Making sure we initially create our address 
     * list table widget
     */
    sys42.examples.databind-address-book

  widgets
    container
      class:col-xs-12 col-md-6 col-md-push-6
      widgets

        /*
         * Search for items in address book widget
         */
        input:search-address-book
          class:form-control
          type:search
          placeholder:Search ...
          onkeypress:""return p5.examples.address_search_enter(event);""
          _onsearch

            /*
             * Since [sys42.examples.databind-address-book] takes care of
             * checking search criteria, we simply invoke it here, and give focus
             * to search field afterwards
             */
            sys42.examples.databind-address-book
            send-javascript:@""$('#search-address-book').select().focus();""
    button:add-button
      class:col-xs-2 col-xs-push-10 col-md-1 col-md-push-11 btn btn-primary
      innerValue:+
      title:Create new contact ...
      onclick

        /*
         * Using wizard window to create new contact
         */
        sys42.wizard-window
          _header:New contact
          _body:Please provide the contact details
          _widgets
            text:name
              label:Name
              placeholder:Contact name ...
              mandatory:true
            text:phone
              label:Phone
              placeholder:Contact phone no ...
              mandatory:true
            text:email
              label:Email
              placeholder:Contact email address ...
              mandatory:true
            textarea:address
              placeholder:Contact address ...
              mandatory:true
          _onok

            /*
             * Forward evaluates all expressions inside [insert-data]
             */
            eval-x:x:/+/*/*

            /*
             * Insert new contact into p5 database
             */
            insert-data
              examples.address-book-item
                name:x:/../*/name?value
                phone:x:/../*/phone?value
                email:x:/../*/email?value
                address:x:/../*/address?value

            /*
             * Making sure we return true, to close wizard window
             */
            set:x:/..?value
              src:bool:true

            /*
             * Removing value from search box
             */
            set-widget-property:search-address-book
              value

            /*
             * re-databind address book widget table
             */
            sys42.examples.databind-address-book

  /*
   * Events for widget
   */
  events

    /*
     * Databinds table widget towards items in database
     */
    sys42.examples.databind-address-book

      /*
       * Checking if table widget already exists, and if so, delete old table
       */
      if
        fetch:x:/0/0?value
          widget-exist:address-list
        delete-widget:address-list

      /*
       * Selecting all address items from database, unless [_arg] is given, at 
       * which point we filter fields according to [_arg]'s value
       */
      get-widget-property:search-address-book
        value
      if:x:/-/*/*?value
        not
        or:x:/../*/_arg?value
          =:

        /*
         * No search criteria, fetching all items
         */
        set:x:/./+2
          src
            select-data:x:/*/*/examples.address-book-item
      else

        /*
         * Search criteria in search widget, fetching only items matching criteria.
         * Notice, using regular expression to search
         */
        set:x:/./+
          src
            select-data:x:@""/*/*/examples.address-book-item/*/""""=:regex:/{0}/i""""/.""
              :x:/../*/get-widget-property/*/*?value

      /*
       * This will be transformed by one of the above [if]/[else] logics to
       * a [select-data], with an expression, according to whether ot not
       * we've got a search criteria
       */
      _select

      /*
       * Databinding table widget below
       */
      databind:x:/../*/create-widget/*/widgets
        src:x:/../*/select-data/*
        template
          tr
            widgets
              td
                widgets
                  button
                    class:btn btn-default
                    innerValue:Edit
                    onclick

                      /*
                       * Using wizard window to edit existing contact
                       */
                      sys42.wizard-window
                        _header:Edit contact
                        _body:Please provide new contact details
                        _widgets
                          text:name
                            label:Name
                            placeholder:Contact name ...
                            mandatory:true
                            {value}:x:/*/name?value
                          text:phone
                            label:Phone
                            placeholder:Contact phone no ...
                            mandatory:true
                            {value}:x:/*/phone?value
                          text:email
                            label:Email
                            placeholder:Contact email address ...
                            mandatory:true
                            {value}:x:/*/email?value
                          textarea:address
                            placeholder:Contact address ...
                            mandatory:true
                            {innerValue}:x:/*/address?value
                        _onok
                          {_id}:x:?value

                          /*
                           * Forward evaluates all expressions inside of [src] inside of [update-data]
                           */
                          eval-x:x:/../*/update-data/*/src/**
                          update-data:x:@""/*/*/""""=:guid:{0}""""""
                            :x:/../*/_id?value
                            src
                              examples.address-book-item:x:/../*/_id?value
                                name:x:/../*/name?value
                                phone:x:/../*/phone?value
                                email:x:/../*/email?value
                                address:x:/../*/address?value

                          /*
                           * Returning true to make sure wizard window is closed
                           */
                          set:x:/..?value
                            src:bool:true

                          /*
                           * Re-databinding address book items table widget
                           */
                          sys42.examples.databind-address-book
              td
                widgets
                  strong
                    {innerValue}:x:/*/name?value
              td
                widgets
                  a

                    /*
                     * Making sure telephone number is 'clickable' on smart 
                     * phones and similar devices
                     */
                    {href}:""tel:{0}""
                      :x:/*/phone?value
                    {innerValue}:x:/*/phone?value
              td
                widgets
                  a
                    href:#
                    {innerValue}:x:/*/email?value
                    onclick

                      /*
                       * Using wizard window to send person an email.
                       * Notice that this logic depends upon your web.config
                       * being correctly setup with an SMTP server setting,
                       * and you having a private key defined in web.config,
                       * and in case you wish to encrypt email sent, you having 
                       * access to a GnuPG public encryption key matching the 
                       * person's email address
                       */
                      eval-x:x:/+/*/_header
                      sys42.wizard-window
                        _header:Send an email to {0}
                          {}:x:/*/email?value
                        _body:@""Please provide header and body of email you wish to send to person.
Please notice that this feature requires that you've setup your web.config with a valid SMTP server and username/password combination ...""
                        _widgets
                          text:subject
                            label:Subject
                            mandatory:true
                            placeholder:Subject line ...
                          textarea:body
                            mandatory:true
                            placeholder:Body of email ...
                        _onok
                          {_email}:x:/*/email?value

                          /*
                           * Forward evaluates all expressions inside of [p5.mail.smtp.send-email]
                           */
                          eval-x:x:/../*/p5.mail.smtp.send-email/**
                          p5.mail.smtp.send-email
                            envelope
                              Subject:x:/../*/subject?value
                              To
                                :x:/../*/_email?value
                              body
                                signature
                                encryption
                                text:plain
                                  content:x:/../*/body?value

                          /*
                           * Returning true to make sure wizard window is closed
                           */
                          set:x:/..?value
                            src:bool:true
              td
                widgets
                  pre
                    {innerValue}:x:/*/address?value
              td
                style:""width:70px;""
                widgets
                  button
                    class:btn btn-default
                    style:""width:100%;""
                    onclick

                      /*
                       * Using confirm window to confirm deletion of address book item,
                       * before deletion is accepted
                       */
                      sys42.confirm-window
                        _header:Confirm deletion of item
                        _body:Please confirm that you wish to delete this item. Action cannot be undone after deletion is done!
                        _onok
                          delete-data:x:@""/*/*/""""=:guid:{0}""""""
                            {}:x:?value
                          sys42.examples.databind-address-book
                    widgets
                      span
                        class:glyphicon glyphicon-remove

      /*
       * Creating our address item table widget
       */
      create-widget:address-list
        before:add-button
        element:table
        class:table table-hover
        widgets
          thead
            innerValue:<tr><th>Edit</th><th>Name</th><th>Phone</th><th>Email</th><th>Address</th><th>Delete</th></tr>"


    p5.page:/examples/csv-editor
      name:CSV editor
      type:lambda
      template:/system42/cms/templates/main.hl
      role:root
      lambda:@"/*
 * Shows how you could create a CSV file editor, for
 * editing CSV files. Will iterate all .csv files in
 * your /documents/private folder, and ask you if you 
 * wish to import these files, to allow editing these 
 * files, in a web User Interface
 */

/*
 * Include JavaScript to be able to trap carriage return in search
 * textbox
 */
include-javascript:@""p5.examples = {};
p5.examples.csv_editor_search_enter = function(e) {
  if(e.keyCode == 13) {
    p5.$('search-csv-editor').raise('_onsearch');
    return false;
  }
}""


/*
 * Showing user some general information about application,
 * and informing user that he has to upload his CSV files
 * to his private document folder, with the possibility of
 * letting him open up his file manager, to do just that.
 */
whoami
list-files:/users/{0}/documents/private/
  :x:/../*/whoami/*/username?value
  filter:csv
select-data:x:/*/*/examples.csv-file-declaration?count
if:x:/-?value
  =:int:0
  and:x:/../*/list-files/*?count
    =:int:0

  /*
   * User has no CSV files in his private documents folder, and
   * neither does he have any previously imported CSV files in database
   */
  eval-x:x:/+/*/_body
  sys42.confirm-window
    _header:General information
    _body:@""<p>This app will allow you to import any CSV files you have in your <em>'/users/{0}/documents/private/'</em> folder, and
edit these files, almost like you would in for instance Microsoft Office or Open Office, only through a web interface.</p>
<p>If there are no files to import, then please go to your file browser, and drag and drop
one or more .csv files to your browser, from within your <em>'/users/{0}/documents/private/'</em> folder.</p>

<p>Each file you upload and import like this, will be stored in your database, and you can use this app as a CRUD application,
to allow editing these items in a CRUD manner ...</p>

<p>When you are done uploading your CSV files, then just click <em>'back'</em> in your browser to come back to this app,
and import your CSV file(s) ...</p>

<p>This app does not feature paging, in addition it uses the p5 database, which is in-memory, meaning if you have humongously large
CSV files, you will probably not be able to adequately edit them. First of all, all items are visible on the same page, always, 
which makes it slow to edit humongously large files. Secondly, items are stored in memory, making your web server perform
badly due to memory hogs.</p>

<p>If you have needs for something that scales better, and has the capacity to edit files with
millions of records, feel free to contact me on <a href='mailto:phosphorusfive@gmail.com'>phosphorusfive@gmail.com</a>, 
and I can probably create something that scales better for you ... (in exchange for money)</p>""
      :x:/../*/whoami/*/username?value
    _extra-buttons

      /*
       * An additional button to our confirm window,
       * that allows user to open up his file manager,
       * in the correct folder, to let him upload CSV files,
       * such that they can be handled by application
       */
      button
        class:btn btn-default
        innerValue:Upload CSV files
        onclick
          whoami
          set-session-value:sys42.current-folder
            src:/users/{0}/documents/private/
              :x:/../*/whoami/*/username?value
          set-location:/superuser/files
else-if:x:/-2?value
  =:int:0
  and:x:/../*/list-files/*?count
    >:int:0

  /*
   * User has CSV files in his private documents folder, informing
   * him that he has to import these to allow editing them
   */
  sys42.confirm-window
    _header:Additional information
    _body:@""Now click <em>'Import CSV file'</em> to choose which CSV files you wish to import into your Phosphorus Five database""
    _onok
      send-javascript:@""$('#import-csv-file-btn').focus();""

/*
 * Creating main CSV file editor widget
 */
create-widget:main-csv-editor
  parent:content
  widgets

    /*
     * Wraps the import/close button
     */
    div:csv-import-button-wrapper
      class:col-xs-12 text-right prepend-bottom
      widgets
        div
          class:col-xs-6 col-xs-push-6 col-md-3 col-md-push-9
          widgets

            /*
             * Button that shows 'help' window
             */
            button:csv-files-help
              class:btn btn-default form-control
              innerValue:Help
              onclick
                sys42.confirm-window
                  _header:Help
                  _body:@""<img src='/media/images/marvin-headshot.png' style='float:right;' /><p>This is a small CSV file editor. It allows you to import, edit, and export canonical CSV files. 
It can only handle CSV files with comma values (','), and without quoted items. It also requires a header row in your CSV files.
It does not scale very well, since there
is no paging, and all items are stored in the memory based Phosphorus Five database. There is no sorting, and no aggregating
features in it. It also does not allow you to create new CSV files.</p>
<p>If these are features which are crucial to you, and you are willing to pay for such features, you can contact me on
<a href='mailto:phosphorusfive@gmail.com'>phosphorusfive@gmail.com</a>, and I might be able to help you out.</p>

<p>My living is created from creating additional features to Phosphorus Five, which I give away for free as Open Source and
Free Software. If you want to donate money to me, either in exchange for features, or simply because you for some reasons
like me, feel free to contact me through the above email.</p>""

            /*
             * Button that shows 'import CSV files' table widget
             */
            button:import-csv-file-btn
              class:btn btn-default form-control
              innerValue:Import CSV file
              onclick

                /*
                 * Checking the innerValue of our Import button, and
                 * if it is 'Import CSV file', we show the import table,
                 * and allow the user to import his CSV files. Otherwise,
                 * we delete the import file table. This way, we use the
                 * same button to show the list of CSV files the user can
                 * import, as we use to hide the table
                 */
                if
                  fetch:x:/0/0/0?value
                    get-widget-property:import-csv-file-btn
                      innerValue
                  =:Import CSV file

                  /*
                   * Making sure we 'unselect' file to edit item from select list
                   */
                  set-widget-property:select-csv-file-to-edit
                    value:_default

                  /*
                   * Showing our import CSV file table
                   */
                  sys42.examples.show-csv-files
                  set-widget-property:import-csv-file-btn
                    innerValue:Close
                else

                  /*
                   * Hiding our import CSV file table
                   */
                  delete-widget:import-csv-file-table
                  set-widget-property:import-csv-file-btn
                    innerValue:Import CSV file

            /*
             * Select dropdown list that allows user to select previously
             * imported CSV files for editing
             */
            select:select-csv-file-to-edit
              title:Choose which CSV file to edit
              class:form-control
              oninit
              
                /*
                 * Initially populating select dropdown list 
                 * with all different types of CSV objects
                 */
                sys42.examples.populate-csv-types-select-list

              events

                sys42.examples.populate-csv-types-select-list

                  /*
                   * Checking if import table widget exists, and if
                   * it does, we delete it
                   */
                  if
                    fetch:x:/0/0?value
                      widget-exist:import-csv-file-table
                    delete-widget:import-csv-file-table
                    set-widget-property:import-csv-file-btn
                      innerValue:Import CSV file

                  /*
                   * Populating select CSV file to edit dropdown with all
                   * types of files we have imported into our database
                   */
                  select-data:x:/*/*/~examples.csv-file-declaration
                  if:x:/-/*?count
                    >:int:0
                    clear-widget:select-csv-file-to-edit
                    create-literal-widget
                      parent:select-csv-file-to-edit
                      element:option
                      value:_default
                      innerValue:Choose CSV file to edit ...
                    for-each:x:/../*/select-data/*
                      eval-x:x:/+/*
                      create-literal-widget
                        parent:select-csv-file-to-edit
                        element:option
                        value:x:/..for-each/*/_dp/#/*/type?value
                        innerValue:x:/..for-each/*/_dp/#/*/type?value
              onchange
                sys42.examples.edit-csv-objects
              widgets
                option
                  value:_default
                  innerValue:You have no CSV files!

            /*
             * Textbox that allows user to filter CSV files according to
             * some search criteria
             */
            input:search-csv-editor
              type:search
              class:form-control
              placeholder:Filter ...
              onkeypress:@""return p5.examples.csv_editor_search_enter(event);""
              _onsearch
                sys42.examples.csv-editor-filter

    /*
     * Wraps the import file main table widget, that shows
     * all files user can import from his private documents folder
     */
    div:import-file-wrapper
      class:col-xs-12
      events
        sys42.examples.show-csv-files

          /*
           * Making sure we delete any existing 'edit CSV items' widgets
           */
          if
            fetch:x:/0/0?value
              widget-exist:csv-items-table
            delete-widget:csv-items-table

          /*
           * Evaluation object, used in databinding, for
           * getting 'friendly name' of filename (without the path)
           */
          _x-get-name
            split:x:/../*/_dn/#?name
              =:/
            split:x:/-/0/-
              =:.
            eval-x:x:/+/*/*
            insert-before:x:
              src
                innerValue:x:/../*/split/[1,2]/0?name

          /*
           * Finding username of user, to list files from user's private
           * documents folder
           */
          whoami
          list-files:/users/{0}/documents/private/
            :x:/../*/whoami/*/username?value
            filter:csv

          /*
           * Databinding 'import CSV files' table towards files from
           * user's private documents folder. Her we show simple databinding,
           * in addition to Active Event databinding, invoking [eval] to
           * evaluation object above to create a friendly filename, without the
           * extension and the full path
           */
          databind:x:/../*/create-widget/*/widgets
            src:x:/../*/list-files/*
            template
              tr
                {title}:x:?name
                widgets
                  td
                    {@eval}:x:/../*/_x-get-name
                  td
                    widgets
                      button
                        class:btn btn-default
                        innerValue:Import file
                        onclick

                          /*
                           * User clicked the 'Import' button, to import one
                           * CSV file. Now asking user to confirm action, since 
                           * this will delete all existing items in database of 
                           * the same type, before we actually do import
                           */
                          sys42.confirm-window
                            _header:Confirm import!
                            _body:@""This will <strong>delete all previously imported and edited items of specified type</strong>. Are you
sure you wish to do this? This action cannot be undone afterwards!""
                            _onok

                              /*
                               * This guy will be databound to the name of the file,
                               * with the full path, and file extension
                               */
                              {_filename}:x:?name

                              /*
                               * Loads file, and splits on each carriage/return
                               */
                              load-file:x:/../*/_filename?value

                              /*
                               * Splitting file upon carriage return, to get each
                               * 'record' in file.
                               */
                              split:x:/../*/load-file/*?value
                                =:""\r\n""

                              /*
                               * Splitting first row in file upon ',', to fetch
                               * all column headers in file. This logic assumes the
                               * first row is a 'headers row'.
                               */
                              split:x:/-/0?name
                                =:,

                              /*
                               * Splitting filename upon first '/', and then '.', to retrieve
                               * only the filename for file, to use as an 'object type declaration'
                               * when inserting items into database
                               */
                              split:x:/../*/_filename?value
                                =:/
                                =:.

                              /*
                               * Adding each item from first line in file to the
                               * [insert-data] operation that inserts the 'declaration'
                               * for our CSV file
                               */
                              add:x:/../*/insert-data/[0,1]/*/*/columns
                                src:x:/../*/split/[1,2]/*?name

                              /*
                               * Deleting all old items of specified type from database
                               */
                              delete-data:x:@""/*/*/~examples.csv-file-/*/type/""""={0}""""/.""
                                :x:/../*/split/[2,3]/0/-2?name

                              /*
                               * Forward evaluates expressions in [insert-data]
                               */
                              eval-x:x:/+/*/*

                              /*
                               * Inserts CSV file's 'declaration' object, that contains
                               * the filename (in friendly format, without extension and path),
                               * and the columns headers from file. Basically the first line
                               * from our CSV file
                               */
                              insert-data
                                examples.csv-file-declaration
                                  type:x:/../*/split/[2,3]/0/-2?name
                                  columns

                              /*
                               * Now that we have inserted 'type declaration object' into
                               * database, we can insert each item in file. First we remove
                               * column header declaration from file. Then we use [databind]
                               * to databind an [insert-data] invocation, which inserts each
                               * item record into our database
                               */
                              set:x:/../*/split/[0,1]/0

                              /*
                               * If file did not in fact contain anything but the headers, we
                               * don't even try to import any items
                               */
                              if:x:/../*/split/[0,1]?count
                                >:int:0

                                /*
                                 * Used as callback during [databind] to create items, making sure
                                 * we create it such that it inserts both column names and column values.
                                 * Adding columns to evaluation object from the column names from CSV file
                                 */
                                add:x:/+/*/_columns
                                  src:x:/../*/split/[1,2]/*?name
                                _x-create-insert-item
                                  _columns

                                  /*
                                   * Splits each line in CSV file on every occurrency of ',',
                                   * making sure we keep also empty string values, to get
                                   * the count right
                                   */
                                  split:x:/../*/_dn/#?name
                                    keep-empty:true
                                    =:,

                                  /*
                                   * Adding each value for column up as return value
                                   */
                                  for-each:x:/../*/_columns/*
                                    set:x:/./*/_dp/#?value
                                      src:x:/../*/split/0?name
                                    set:x:/../*/split/0

                                  /*
                                   * Here we make sure our evaluation object for [databind]
                                   * returns all columns, and their values for row
                                   */
                                  insert-before:x:
                                    src:x:/../*/_columns/*

                                /*
                                 * Databinding [append-data] below, for appending items into database.
                                 * [append-data] will make sure it appends the data items at the end, to not
                                 * mess up original order of items
                                 */
                                eval-x:x:/+/*/*/*/type
                                databind:x:/..if/*/append-data
                                  src:x:/../*/split/[0,1]/*
                                  template
                                    examples.csv-file-content
                                      type:x:/../*/split/[2,3]/0/-2?name
                                      items

                                        /*
                                         * Notice that since we're inside a double nested [databind]
                                         * operation here, we need to 'escape' our '{', such that it
                                         * doesn't become evaluated by the outer most (first) [databind],
                                         * but rather exclusively by the second (inner) [databind]
                                         */
                                        \{@eval}:x:/..if/*/_x-create-insert-item

                                /*
                                 * At this point, [append-data] below should contain one record for 
                                 * each line in file, except header line
                                 */
                                append-data

                                /*
                                 * Providing some feedback to user about operation, making sure
                                 * we forward evaluest expressions inside our [sys42.info-window]
                                 */
                                eval-x:x:/+
                                sys42.info-window:{0} items successfully imported as '{1}'
                                  :x:/..if/*/append-data/*?count
                                  :x:/../*/split/[2,3]/0/-2?name

                              else

                                /*
                                 * File didn't contain any items, alerting user
                                 */
                                eval-x:x:/+
                                sys42.info-window:There were no items in file, but successfully created '{1}' object type declaration
                                  :x:/../*/split/[2,3]/0/-2?name

                              /*
                               * Re-populating the select list of which files
                               * to edit, in addition to deleting any existing
                               * 'editing CSV items' widget
                               */
                              sys42.examples.populate-csv-types-select-list

                              /*
                               * Settings currently imported file into 'edit mode' by
                               * settings the selected item of select CSV file to edit
                               * widget to file that was imported, before invoking our
                               * edit file Active Event
                               */
                              set-widget-property:select-csv-file-to-edit
                                value:x:/../*/split/[2,3]/0/-2?name

                              /*
                               * After import, we by default edit the content of the 
                               * newly imported file
                               */
                              sys42.examples.edit-csv-objects

          /*
           * this is the table HTML widget, that shows all CSV files
           * user can import
           */
          create-widget:import-csv-file-table
            parent:import-file-wrapper
            element:table
            class:table table-hover
            widgets

              /*
               * The [text] widget, is not a 'real widget', but in fact only
               * a place holder for HTML, injected directly into the DOM, at
               * the specified position. For simplicity, we use [text] here to
               * render the table headers
               */
              text:@""<thead><tr><th>Filename</th><th style=""""width:100px;"""">Import</th></tr></thead>""

        /*
         * Creates table that allows user to edit objects of specified type
         */
        sys42.examples.edit-csv-objects

          /*
           * Deleting import table, if it exists
           */
          if
            fetch:x:/0/0?value
              widget-exist:import-csv-file-table
            delete-widget:import-csv-file-table
            set-widget-property:import-csv-file-btn
              innerValue:Import CSV file

          /*
           * Deleting previously created table widget, if it exists
           */
          if
            fetch:x:/0/0?value
              widget-exist:csv-items-table
            delete-widget:csv-items-table

          /*
           * Fetching selected option from dropdown, and initiating
           * editing of objects of specified type
           */
          get-widget-property:select-csv-file-to-edit
            value

          /*
           * Retrieves filter for items to show, if any
           */
          get-widget-property:search-csv-editor
            value

          /*
           * If user selected [_default] select dropdown list item,
           * we simply return, since that signifies he is finished editing
           * CSV objects
           */
          if:x:/../*/get-widget-property/[0,1]/*/*?value
            =:_default
            return

          /*
           * Selecting 'type declaration object' first
           */
          select-data:x:@""/*/*/~examples.csv-file-declaration/*/type/""""={0}""""/.""
            :x:/../*/get-widget-property/[0,1]/*/*?value

          /*
           * This piece of logic, will dynamically exchange the [select-data]
           * operation, according to whether or not the user has provided
           * a filter (search) criteria or not. Either it will select all
           * items (if no filter is given), or it will select only those items
           * matching the filter criteria, which becomes a regular expression
           * search through all values of items
           */
          if:x:/../*/get-widget-property/[1,2]/*/*?value
            =:

            /*
             * User has NOT provided a filter, simply selecting all items from database
             * Please notice, if you want paging with this app, I can probably create
             * it for you, in exchange for some money
             */
            set:x:/../*/_select-data
              src
                select-data:x:@""/*/*/~examples.csv-file-content/*/type/""""={0}""""/.""
                  :x:/../*/get-widget-property/[0,1]/*/*?value
          else

            /*
             * User HAS provided a filter
             * Using regular expressions to filter upon values from items in database
             */
            set:x:/../*/_select-data
              src
                select-data:x:@""/*/*/~examples.csv-file-content/*/type/""""={0}""""/./*/items/*/""""=:regex:/{1}/i""""/./.""
                  :x:/../*/get-widget-property/[0,1]/*/*?value
                  :x:/../*/get-widget-property/[1,2]/*/*?value

          /*
           * This will be dynamically created according to filter logic
           * above, and be exchanged with a [select-data] invocation
           */
          _select-data

          /*
           * Databinding table widget's header
           */
          databind:x:/../*/create-widget/*/widgets/*/thead/*/widgets/*/tr/*/widgets
            src:x:/../*/select-data/[0,1]/0/*/columns/*
            template
              th
                {innerValue}:x:?name

          /*
           * Adding up delete column header
           */
          add:x:/../*/create-widget/*/widgets/*/thead/*/widgets/*/tr/*/widgets
            src
              th

          /*
           * Then databinding table widget's rows, using a callback to get 
           * each column
           */
          _x-insert-row
            for-each:x:/../*/_dn/#/*/items/*?value
              eval-x:x:/+/*/*/*
              insert-before:x:/.
                src
                  td
                    innerValue:x:/..for-each/*/_dp?value

          /*
           * Now we can invoke [databind], with evaluation callback,
           * to create each data item row in table showing CSV file in
           * edit mode
           */
          databind:x:/../*/create-widget/*/widgets
            src:x:/../*/select-data/[1,2]/*
            template
              tr

                /*
                 * This will create a 'hidden' attribute on widget, not
                 * visible on the client-side (since it starts with an underscore '_'),
                 * but possible to retrieve from the server-side. This will become
                 * an [_id] attribute, with the value being the ID from database,
                 * which we're using later when we're deleting items, such that we
                 * can more easily delete the HTML table's row (tr element) from
                 * the widget hierarchy, to prevent forcing a re-databind, and flush, 
                 * of entire HTML for table as deletion of items is done
                 */
                {_id}:x:?value
                widgets
                  td
                    widgets

                      /*
                       * Edit single CSV item (row)'s properties button
                       */
                      button
                        class:btn btn-default
                        innerValue:Edit
                        title:Click to edit item ...

                        /*
                         * To make it easier to retrieve id of item
                         * user wants to delete, we databind also a hidden attribute
                         * on button HTML element to the id from database
                         */
                        {_id-btn}:x:?value
                        onclick
                          get-widget-property:x:/../*/_event?value
                            _id-btn
                          sys42.examples.edit-csv-item:x:/../*/get-widget-property/*/*?value

                  /*
                   * Hooks into our evaluation object above, that creates each
                   * row's content for item
                   */
                  {@eval}:x:/../*/_x-insert-row
                  td
                    widgets

                      /*
                       * Button that allows user to delete a single
                       * item from CSV file
                       */
                      button
                        class:btn btn-default glyphicon glyphicon-remove
                        title:Click to delete item
                        onclick

                          /*
                           * Asking user to confirm his actions, before deletion is done,
                           * since this operation cannot be undone
                           */
                          sys42.confirm-window
                            _header:Confirm action
                            _body:@""Please confirm deletion of item from database. 
This action cannot be undone when it is finished""
                            _onok

                              /*
                               * For simplicity, we databind the [_id] node below to
                               * the id of the item from the database. We could have
                               * used [get-parent-widget] a couple of times, but this
                               * would have created more complex Hyperlisp, in addition
                               * to more dependencies upon the widget hierarchy
                               */
                              {_id}:x:?value

                              /*
                               * Actual deletion of item from database
                               */
                              delete-data:x:@""/*/*/""""=:guid:{0}""""""
                                :x:/../*/_id?value

                              /*
                               * Instead of re-databinding the entire grid, we
                               * simply remove the tr HTML item from the table.
                               * I love p5.ajax ;)
                               */
                              find-widget
                                _id:x:/../*/_id?value.string
                              delete-widget:x:/-/*?value

          /*
           * Adding last row(s), which is simply the 'add new item' button,
           * and the 'Save to CSV file' button
           */
          +:x:/../*/select-data/[0,1]/0/*/columns/*?count
            _:int:1
          eval-x:x:/+/*/*/*/*/*
          add:x:/../*/create-widget/*/widgets
            src
              tr
                widgets
                  td

                    /*
                     * Since we're referring to a named item (named iterator), 
                     * which happens to have a name that is also an iterator type
                     * declaration, we need to escape the iterator's name with a '\'
                     */
                    colspan:x:/../*/\+?value
                  td
                    widgets

                      /*
                       * Add new item button
                       */
                      button:add-new-item
                        class:btn btn-primary glyphicon glyphicon-plus
                        title:Create new item ...
                        onclick

                          /*
                           * If this Active Event is invoked without an ID,
                           * it will create a new item instead of editing an 
                           * existing item
                           */
                          sys42.examples.edit-csv-item
              tr
                widgets
                  td
                    colspan:x:/../*/\+?value
                  td
                    widgets

                      /*
                       * Export CSV items to file button
                       */
                      button:export-csv-file
                        class:btn btn-default glyphicon glyphicon-floppy-disk
                        title:Save CSV file ...
                        onclick
                          sys42.examples.save-csv-file

          /*
           * Now we can actually create our table HTML element, 
           * wrapping CSV file's headers, content, and a couple of 
           * helper buttons at the bottom
           */
          create-widget:csv-items-table
            parent:main-csv-editor
            element:table
            class:table table-hover
            widgets
              thead
                widgets
                  tr
                    widgets
                      th
            events

              /*
               * Filters table of csv items
               */
              sys42.examples.csv-editor-filter

                /*
                 * Using jQuery to set focus back to search textbox again,
                 * before we re-databind the HTML table showing the content
                 * of the CSV file
                 */
                send-javascript:@""$('#search-csv-editor').focus().select();""
                sys42.examples.edit-csv-objects

        /*
         * Updates a single item in table, to conserve bandwidth usage.
         * Expects an ID to database record wrapping item
         */
        sys42.examples.re-databind-item

          /*
           * Finding the HTML tr element that wraps the CSV item
           * on form. See above comments about 'hidden attribute' further
           * up in this file.
           */
          find-widget
            _id:x:/../*/_arg?value.string

          /*
           * Retrieving the CSV item from database, matching the given ID
           */
          select-data:x:@""/*/*/""""=:guid:{0}""""""
            :x:/../*/_arg?value

          /*
           * Removing all tds of row, except the first and last,
           * which are the edit and delete buttons
           */
          get-children-widgets:x:/../*/find-widget/*?value
          for-each:x:/-/*/*/[1,]

            /*
             * This [if], combined with the range iterator in the [for-each], and
             * the [set] invocation inside of the [if], will ensure that the first 
             * and last td HTML widgets are NOT removed. This is done since these 
             * widgets are the 'Edit item button' and the 'Delete item button'
             */
            if:x:/../*/get-children-widgets/*/*?count
              >:int:2
              delete-widget:x:/..for-each/*/_dp/#?value
              set:x:/..for-each/*/_dp/#

          /*
           * Now looping through the results from [select-data] (or rather
           * the [items] from the record) and creating a td HTML widget for
           * each item's value
           */
          for-each:x:/../*/select-data/*/*/items/*

            /*
             * Forward evaluates expressions inside of [create-literal-widget]
             */
            eval-x:x:/+/*

            /*
             * The [before] argument, will insert the item before the
             * 'Delete item button', which means that the record's values
             * will be injected in between the 'Edit item button' and the 
             * 'Delete item button'. Notice, if we had used [after] here, 
             * and chosen the 'Edit item button' as the value, the values would
             * have been added in reverse order, messing things up 100%
             */
            create-literal-widget
              before:x:/../*/get-children-widgets/*/0/-?value
              element:td
              innerValue:x:/..for-each/*/_dp/#?value

        /*
         * Allows user to edit or create a CSV item
         */
        sys42.examples.edit-csv-item

          /*
           * If no [_arg] argument is passed in, we're supposed to create
           * a new CSV item. If an [_arg] is supplied, we're editing an
           * existing item
           */
          if:x:/../*/_arg?value
            not

            /*
             * Creating new item, figuring out item's type, by
             * retrieving the value of the 'Select CSV file to edit'
             * select dropdown list
             */
            get-widget-property:select-csv-file-to-edit
              value
            eval-x:x:/+/*/*/*

            /*
             * Dynamically changing the [_select-data] invocation
             * below to reflect the fact of that we're interested in
             * the type declaration of item, and not any specific item
             */
            set:x:/../*/_select-data
              src
                select-data:x:@""/*/*/examples.csv-file-declaration/*/type/""""={0}""""/.""
                  :x:/..if/*/get-widget-property/*/*?value
          else

            /*
             * Dynamically changing the [_select-data] invocation
             * below to reflect the fact of that we're interested in
             * a specific CSV item from database
             */
            set:x:/../*/_select-data
              src
                select-data:x:@""/*/*/""""=:guid:{0}""""""
                  :x:/../*/_arg?value

          /*
           * The next node, will be dynamically changed, according to
           * logic above, to either becomes a 'select item' or a 'select
           * item type' invocation
           */
          _select-data

          /*
           * Evaluation callback provided to [databind], to (among other things)
           * create a unique ID for HTML input element, such that wizard window
           * below, will function properly
           */
          _x-create-template-item

            /*
             * Since the name of the column we're editing, might
             * contain illegal characters for an HTML element's ID,
             * we create a new random Guid, to use as parts of the ID
             * for our wizard window input elements
             */
            new-guid
            _label

            /*
             * If length of name of column is longer than 10 characters,
             * we remove parts of the name, to make sure the label, associated
             * with the input control, has room to display the name, without messing
             * up the formatting of our wizard window input element. The [if] and
             * [else-if] below, do just that
             */
            if
              length:x:/../*/_dn/#?name
              >:int:10

              /*
               * Name of column was more than 10 characters, making sure
               * we remove everything above 10 characters, and add up
               * something resembling the ellipsis characters, to signal
               * that column name has been truncated
               */
              set:x:/../*/_label?value
                fetch:x:/0/0?name
                  split:x:/../*/_dn/#?name
                    =:int:10
              set:x:/../*/_label?value
                src:{0}...
                  :x:/../*/_label?value
            else

              /*
               * No need to trim label, since it's below or equal to 
               * 10 characters in length
               */
              set:x:/../*/_label?value
                src:x:/../*/_dn/#?name

            /*
             * Forward evaluates all expression inside of [insert-before]
             */
            eval-x:x:/+/*/**

            /*
             * The next piece of logic, will return a [text] item to
             * caller, which is used to [databind] the [_widgets] of
             * our wizard window, making sure we get a textbox input
             * for each value of our CSV item
             */
            insert-before:x:
              src
                text:item-value-{0}
                  :x:/../*/new-guid?value.string
                  label:x:/../*/_label?value
                  value:x:/../*/_dn/#?value
                  placeholder:x:/../*/_dn/#?name
                  title:x:/../*/_dn/#?name

          /*
           * Dynamically creating our textbox input elements of
           * our wizard window, by invoking [databind], supplying the
           * above evaluation object as [template]. This is a nice
           * example of that [databind] can be used for things you
           * wouldn't normally use it for in a traditional sense
           */
          databind:x:/../*/sys42.wizard-window/*/_widgets
            src:x:/../*/select-data/*/*(/items/*|/columns/*)
            template
              {@eval}:x:/../*/_x-create-template-item

          /*
           * The [_onok] of our wizard window, has different logic if
           * we're editing an existing item, or creating a new item. The
           * next [if], makes sure the wizard window gains access to the ID
           * of the element from the database, and knows it is 'Editing an
           * existing item', if that's its purpose
           */
          if:x:/../*/_arg?value
            set:x:/../*/sys42.wizard-window/**/_data-id?value
              src:x:/../*/_arg?value.guid
          sys42.wizard-window
            _header:Edit item
            _body:Please provide new data for item ...
            _widgets
            _onok
            
              /*
               * If [_data-id] has a value, we're editing an existing
               * item, and its ID can be found in [_data-id]'s value.
               * Otherwise we're creating a new item
               */
              _data-id

              /*
               * Checking if we're editing an existing item, or creating 
               * a new item
               */
              if:x:/../*/_data-id?value

                /*
                 * Editing existing item.
                 * First selecting item from database, before updating
                 * all item's values to reflect new values, and using
                 * [update-data] to save changes to database, before
                 * re-databinding that single item in table widget
                 */
                select-data:x:@""/*/*/""""=:guid:{0}""""""
                  :x:/../*/_data-id?value

                /*
                 * Looping through all values in item, updating to reflect new
                 * value after editing. Notice that this is looping through each
                 * value returned from database, assuming the order is the same
                 * in our wizard window textbox input value list
                 */
                for-each:x:/..if/*/select-data/*/*/items/*

                  /*
                   * This logic assumes (correctly) that in database, each
                   * value of item, is stored sequentially correctly, such
                   * that the first value, corresponds to the first result from
                   * wizard window (which can be found as '~item-value-xxx', where
                   * 'xxx' is some Guid, randomly created. First it fetches that
                   * return value, as the first of the return values matchin
                   * '~item-value-' from the wizard window, before it removes 
                   * that same node. This is why the range iterator is in use below.
                   * Notice also that we set the values inside our [select-data] here,
                   * which is later [add]'ed into our [update-data] invocation
                   */
                  set:x:/./*/_dp/#?value
                    src:x:/../*/~item-value-/[0,1]?value

                  /*
                   * Removing the item we retrieved the value from above in
                   * the [set]
                   */
                  set:x:/../*/~item-value-/[0,1]

                /*
                 * Adding the now changed values from our [select-data] into
                 * our [update-data] invocation
                 */
                add:x:/..if/*/update-data/*/src
                  src:x:/..if/*/select-data/*

                /*
                 * Updating item in database
                 */
                update-data:x:@""/*/*/""""=:guid:{0}""""""
                  :x:/../*/_data-id?value
                  src

                /*
                 * To conserve bandwidth, we try to avoid re-databinding
                 * entire table widget, but rather only its row. This next
                 * Active Event invocation do just that!
                 */
                sys42.examples.re-databind-item:x:/../*/_data-id?value
              else

                /*
                 * Inserting new item.
                 * Since we were not given an ID to any item, we assume (correctly)
                 * that this is an insertion operation, and not an edit existing item 
                 * operation. Retrieve type of object to insert, as value of our 
                 * 'Select CSV file to edit' select dropdown listbox
                 */
                get-widget-property:select-csv-file-to-edit
                  value

                /*
                 * Fetching the type declaration item from database, such that we
                 * can now which columns to insert into database
                 */
                select-data:x:@""/*/*/examples.csv-file-declaration/*/type/""""={0}""""/.""
                  :x:/..else/*/get-widget-property/*/*?value

                /*
                 * Adding all columns from [select-data] into [append-data], such
                 * that we get the columns ordered correctly according to type declaration
                 * of CSV item
                 */
                add:x:/..else/*/append-data/*/*/items
                  src:x:/..else/*/select-data/*/*/columns/*

                /*
                 * Looping through each result from wizard window.
                 * See above comments (about editing) to understand how 
                 * this logic works
                 */
                for-each:x:/..else/*/append-data/*/*/items/*
                  set:x:/./*/_dp/#?value
                    src:x:/../*/~item-value-/[0,1]?value
                  set:x:/../*/~item-value-/[0,1]

                /*
                 * Forward evaluates all expressions inside of [append-data]
                 */
                eval-x:x:/+/*/*/type

                /*
                 * At this point, we should have a perfectly valid [append-data]
                 * invocation, creating a record, matching the declaration object
                 * for CSV file items
                 */
                append-data
                  examples.csv-file-content
                    type:x:/..else/*/get-widget-property/*/*?value
                    items

                /*
                 * re-databind entire form (TODO; Make it possible to only
                 * re-binding the last row by creating a new table tr element)
                 */
                sys42.examples.edit-csv-objects

                /*
                 * Providing feedback to user
                 */
                sys42.info-window:@""Item was successfully appended into database. If it is not visible on page, make sure you remove your filter""
                  _time:more

              /*
               * Returning true to wizard window, to signal that
               * window can be closed
               */
              set:x:/..?value
                src:bool:true

        /*
         * Saves CSV file to disk
         */
        sys42.examples.save-csv-file

          /*
           * Asking user to confirm action, since this will (probably)
           * overwrite any old files, with the same name
           */
          sys42.confirm-window
            _header:Confirm saving
            _body:@""This operation will <strong>overwrite your existing CSV file</strong>, in your <em>/documents/private/</em> folder.
Are you sure you wish to do this? This operation cannot be undone once finished.""
            _onok

              /*
               * This node's value, will be dynamically built, containing the
               * CSV file's content, according to the items in the database
               */
              _file-content

              /*
               * Retrieving friendly name of CSV file we're editing, to use
               * as basis for filename/path
               */
              get-widget-property:select-csv-file-to-edit
                value

              /*
               * Retrieving declaration object from database, to create first line
               * in CSV file, according to header names
               */
              select-data:x:@""/*/*/examples.csv-file-declaration/*/type/""""={0}""""/.""
                :x:/../*/get-widget-property/*/*?value

              /*
               * Settings first line in file to column names, according to type
               * declaration object for file
               */
              set:x:/../*/_file-content?value
                join:x:/../*/select-data/[0,1]/*/*/columns/*?name
                  sep:,

              /*
               * Retrieving each CSV file item from database, and concatenating into
               * [_file-content] above, with an initial carriage return, to separate records
               */
              select-data:x:@""/*/*/examples.csv-file-content/*/type/""""={0}""""/.""
                :x:/../*/get-widget-property/*/*?value

              /*
               * Looping through each CSV item of specified type, retrieved from 
               * database above
               */
              for-each:x:/-/*

                /*
                 * Joining each value from database for currently iterated
                 * item, with a ',' in between each value
                 */
                join:x:/./*/_dp/#/*/items/*?value
                  sep:,

                /*
                 * Appending current line to [_file-content], with a 
                 * carriage return in between each item
                 */
                set:x:/../*/_file-content?value
                  src:""{0}\r\n{1}""
                    :x:/../*/_file-content?value
                    :x:/..for-each/*/join?value

              /*
               * Retrieving username of currently logged in user,
               * to use as basis for figuring out which filepath to
               * use
               */
              whoami

              /*
               * Saving CSV file to '/users/{USERNAME}/documents/private'
               */
              save-file:/users/{0}/documents/private/{1}.csv
                :x:/../*/whoami/*/username?value
                :x:/../*/select-data/[0,1]/*/*/type?value
                src:x:/../*/_file-content?value

              /*
               * Feedback to user that operation was successful
               */
              sys42.info-window:File was successfully saved
      widgets"


    p5.page:/about
      type:html
      name:About
      template:/system42/cms/templates/main.hl
      content:@"<p>Although Phosphorus Five and System42, is the architecture and creation of one single person, me that is, there are numerous others who have one way or another contributed. This page is to say thank you to all of these people.</p>

<ul>
	<li>Svein Daniel Solvenus - sveindaniel_phosphorus_at_solvenus_dot_no - for providing extensive testing and invaluable feedback, over a long period of time</li>
	<li><a href=""https://github.com/jstedfast/MimeKit/"">MimeKit</a>, <a href=""https://github.com/jstedfast/MailKit"">MailKit</a> and its brilliant creator, Jeffrey Steadfast, for always responding to my MimeKit/MailKit support requests within minutes, even on x-mas eve</li>
	<li><a href=""https://www.bouncycastle.org/"">The Legion of the Bouncy Castle</a>, and all who contributes to it, for creating a brilliant cryptography library for .net and Mono</li>
	<li><a href=""http://xamarin.com/"">Xamarin</a>, <a href=""http://www.mono-project.com/"">Mono</a>, and all the other people working on both of these great projects, for delivering a marvelous IDE and Free Software runtime for .Net </li>
	<li><a href=""https://github.com/icsharpcode/SharpZipLib"">SharpZipLib</a>, Mike Krueger and David Pierson, in addition to everyone contributing to this awesome library, for delivering an Open Source zip library for .Net and Mono</li>
	<li><a href=""http://ckeditor.com/"">CKEditor</a> and Frederico Knabben, its creator, for giving out the best HTML wysiwyg editor imaginable as Free Software</li>
	<li><a href=""https://codemirror.net/"">CodeMirror</a>, and Marijn Haverbeke, for creating a brilliant syntax highlighted code editor for the web</li>
	<li><a href=""https://htmlagilitypack.codeplex.com/"">HtmlAgilityPack</a> and all participants, for making the job of semantically parsing HTML a breeze</li>
	<li><a href=""http://getbootstrap.com/"">Bootstrap</a>, the CSS framework, for delivering a brilliant CSS framework, which Phosphorus and System42 is 100% dependent upon</li>
</ul>
<p>There are many more too, which either directly or indirectly have contributed.</p>


<p>PS!<br>
I am for hire, either to develop custom modules, teach, or do other things related to Phosphorus Five and System42!<br/>
Send me an <a href=""mailto:phosphorusfive@gmail.com"">email</a> if you wish to talk about such a proposal</p>"
