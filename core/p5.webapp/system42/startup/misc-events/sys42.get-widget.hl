
/*
 * Responsible for creating the Active Event that returns the code necessary to create
 * a specific widget existing on page. Basically "reverse engineers" an existing Widget
 * on page, returning the Hyperlisp/lambda necessary to re-create it in its entirety.
 *
 * Pass in ID of widget to recursively iterate as value, expression or [_arg]
 */

create-protected-event:sys42.get-widget

  // Figuring out type of widget
  list-widgets:x:/../*/_arg?value

  // Looping through all widgets requested by caller
  while:x:/-/0

    // Adding widget to root active event node as "return value"
    add:x:/..
      src:x:/../*/list-widgets/0

    // Checking if this was an automatically generated ID
    // and if it was, we remove the automatically assigned ID
    split:x:/../*/list-widgets/0?value
    if:x:/-/*(!/\0!/\1!/\2!/\3!/\4!/\5!/\6!/\7!/\8!/\9!/a!/b!/c!/d!/e!/f!/x)?name
      not
      and:x:/./-/0?name
        equals:x
      and:x:/./-/*?count
        equals:int:8
      and:x:/../*/_keep-empty-ids?value.bool
        !=:bool:true
      set:x:/../0/-?value

    // Fetching properties
    list-widget-properties:x:/../*/list-widgets/0?value
    add:x:/../0/-
      src:x:/./-/*/*

    // Widget ajax events
    list-widget-ajax-events:x:/../*/list-widgets/0?value
    add:x:/+
      src:x:/./-/*/*
    get-widget-ajax-event:x:/-2/*?name

    // Removing all root node children of event nodes who's names are "_event", before 
    // adding ajax events into "return collection" of event
    set:x:/-/**/~on/*/_event
    add:x:/../0/-
      src:x:/./-2/*/*

    // Trickery to be able to get "execute" widget, which will create a recursive never ending
    // loop during conversion to hyperlisp, since it contains a node value, referencing code executed
    if:x:/../*/list-widgets/0?value
      equals:execute
      set:x:/../0/-/*/_onclick/*/_exe?value
        src:node:"_executed-code"

    /*
     * Making sure all [container] widgets have the [widgets] child,
     * even if they're not supposed to fetch their children
     */
    if:x:/../*/list-widgets/0?name
      =:container
      add:x:/../0/-
        src
          widgets

    /*
     * Looping through all children, recursively invoking self, but only if we should,
     * and this is not a [data-usercontrol] ==> true type of widget
     */
    if:x:/../*/_no-children?value.bool
      !=:bool:true
      and:x:/../0/-/*/data-usercontrol/=true
        not
        or:x:/../*/_flatten/=true
          not

      /*
       * Looping through all children widgets recursively
       */
      get-children-widgets:x:/../*/list-widgets/0?value
      for-each:x:/-/*/*?value
        set:x:/..for-each/*/sys42.get-widget?value
          src:x:/..for-each/*/_dp?value
        if:x:/../*/_keep-empty-ids?value
          eval-x:x:/+/*/*
          add:x:/..for-each/*/sys42.get-widget
            src
              _keep-empty-ids:x:/../*/_keep-empty-ids?value
        if:x:/../*/_flatten?value
          eval-x:x:/+/*/*
          add:x:/..for-each/*/sys42.get-widget
            src
              _flatten:x:/../*/_flatten?value
        sys42.get-widget
        if:x:/../*/_flatten?value.bool
          add:x:/+/*/src
            src:x:/..for-each/*/sys42.get-widget/*
          add:x:/..
            src
        else
          add:x:/+/*/src
            src:x:/..for-each/*/sys42.get-widget/*
          add:x:/../0/-/*/widgets
            src

    // Widget lambda events, at last
    list-widget-lambda-events:x:/../*/list-widgets/0?value
    add:x:/+
      src:x:/./-/*/*
    get-widget-lambda-event:x:/-2/*?name
    if:x:/-3/*/*
      // We have lambda events
      add:x:/../0/-
        src:events
      add:x:/../0/-/*/events
        src:x:/././-/*/*

    // Removing zeroth item of list-widget, to decrement while loop condition
    set:x:/../*/list-widgets/0



