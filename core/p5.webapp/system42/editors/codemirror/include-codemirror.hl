
/*
 * Helps you include CodeMirror on page, with correct settings
 */



/*
 * Making sure necessary JavaScript files are included
 */
include-javascript-file
  /system42/editors/codemirror/lib/codemirror.js
  /system42/editors/codemirror/addon/selection/active-line.js
  /system42/editors/codemirror/addon/display/placeholder.js



/*
 * Making sure language mode file is included
 */
include-javascript-file:"/system42/editors/codemirror/mode/{0}/{0}.js"
  :x:/../*/_editor/*/*/mode?value



/*
 * Making sure necessary Stylesheet files are included
 */
include-stylesheet-file
  /system42/editors/codemirror/lib/codemirror.css




/*
 * Defaulting theme to "paraiso", if not overridden.
 * "paraiso" is a CodeMirror theme created by Thomas Hansen, but inspired
 * by "paraiso-light" by Jan T. Scott
 */
if:x:/../*/_editor/*/*/theme
  not
  add:x:/../*/_editor/*
    src:"theme:paraiso"





/*
 * Notice that the next two pieces of logic, that includes autocomplete and
 * fullscreen, needs to be *before* we start checking for keyboard shortcuts
 * from incoming arguments, since they modify these arguments with keyboard shortcuts
 * relevant for autocompletion and fullscreen toggling
 */


/*
 * Making sure fullscreen is enabled, if it should be allowed
 */
if:x:/../*/_editor/*/*/fullscreen?value.bool

  /*
   * Including JavaScript and CSS files for "fullscreen" plugin, in addition to
   * adding up Alt-F as keyboard shortcut to toggle fullscreen
   */
  include-javascript-file:/system42/editors/codemirror/addon/display/fullscreen.js
  include-stylesheet-file:/system42/editors/codemirror/addon/display/fullscreen.css

  /*
   * In case user did not provide any keyboard shortcuts of his own, we need
   * to add the "argument node" to not break logic further down in file
   */
  if:x:/../*/_editor/*/*/keys
    not
    add:x:/../*/_editor/*
      src:keys

  /*
   * Then adding keyboard shortcut for "fullscreen mode"
   */
  add:x:/../*/_editor/*/*/keys
    src:@"Alt-F:function(cm) {cm.setOption('fullScreen', !cm.getOption('fullScreen'));}"


/*
 * Checking if callers wants to supply autocomplete, which
 * we currently only provide for Hyperlisp
 */
if:x:/../*/_editor/*/*/autocomplete?value.bool
  and:x:/../*/_editor/*/*/mode?value
    =:hyperlisp

  /*
   * Including AutoComplete CSS and JavaScript files, in addition to adding Ctrl+Space
   * as its keyboard shortcut
   */
  include-javascript-file:/system42/editors/codemirror/addon/hint/show-hint.js
  include-stylesheet-file:/system42/editors/codemirror/addon/hint/show-hint.css

  /*
   * In case user did not provide any keyboard shortcuts of his own, we need
   * to add the "argument node" to not break logic further down in file
   */
  if:x:/../*/_editor/*/*/keys
    not
    add:x:/../*/_editor/*
      src:keys

  /*
   * Then adding keyboard shortcut for "autocomplete" (Ctrl + Space)
   */
  add:x:/../*/_editor/*/*/keys
    src:@"Ctrl-Space:'autocomplete'"

  /*
   * Then including json object with entire Hyperlisp vocabulary to client
   */
  vocabulary

  /*
   * Then removing all operators, since they're probably not thought of as Active Events by users
   */
  set:x:/..if/*/vocabulary/*(/"=-"|/"=!~"|/"=!="|/=%|/=*|/"=/"|/"=^"|/"=\\~"|/=+|/=<|/=<=|/==|/=>|/=>=)
  join:x:/..if/*/vocabulary/*?value
    sep:,
    wrap:@""""
  send-javascript:@"CodeMirror._hyperlispKeywords = [{0}];"
    :x:/..if/*/join?value



/*
 * Making sure theme is included.
 * Notice this is done AFTER including all other files, to be able to override CSS
 * class values from plugins, etc...
 */
include-stylesheet-file:"/system42/editors/codemirror/theme/{0}.css"
  :x:/../*/_editor/*/*/theme?value



/*
 * Checking if callers did not provide an [autofocus] argument,
 * and if not, set it to false by default
 */
if:x:/../*/_editor/*/*/autofocus
  not
  add:x:/../*/_editor/*
    src:"autofocus:false"



/*
 * Making sure we trap any custom keyboard shortcuts.
 * First checking if there are any keys, which there might be, either
 * because caller explicitly defined his own keys, or because of fullscreen or
 * autocomplete being turned on.
 */
_keys
if:x:/../*/_editor/*/*/keys/*

  /*
   * Then looping through all keyboard shortcuts, and setting the [_keys] node
   * above to the JavaScript necessary to include as settings to CodeMirror instantiation later
   */
  for-each:x:/../*/_editor/*/*/keys/*

    /*
     * Checking if we need a ",", or if this is not our first
     * keyboard shortcut with other words
     */
    if:x:/../*/_keys?value
      set:x:/../*/_keys?value
        src:{0},
          :x:/../*/_keys?value

    /*
     * Adding currently iterated keyboard shortcut
     */
    set:x:/../*/_keys?value
      src:@"{0}
    ""{1}"":{2}"
        :x:/../*/_keys?value
        :x:/..for-each/*/_dp/#?name
        :x:/..for-each/*/_dp/#?value


/*
 * Changing the 4th formatting parameter's value in [send-javascript] to our now
 * finished parsed keyboard shortcut logic.
 * [_keys] should now either be empty, or a valid "extraKeys" JavaScript inclusion
 * for the settings for CodeMirror instantation
 */
set:x:/../*/send-javascript/4?value
  src:@",
extraKeys: {{{0}}}"
    :x:/../*/_keys?value



/*
 * Making sure given "textarea" inputs are 
 * replaced with the CodeMirror editor, with all arguments correctly
 * passed in
 */
send-javascript:@"window.{0} = CodeMirror.fromTextArea(document.getElementById('{0}'), {{
  mode:'{1}',
  theme:'{2}',
  lineNumbers:true,
  styleActiveLine:true,
  path:'/system42/editors/codemirror/',
  autofocus:{3},
  tabSize:2,
  indentAuto:true{4}
}});
window.{0}.on('change',function (cMirror) {{
  var wdg = p5.$('{0}');
  wdg.el.value = cMirror.getValue();
}});
CodeMirror.keyMap.default[""Shift-Tab""] = ""indentLess"";
CodeMirror.keyMap.default[""Tab""] = ""indentMore"";"
  :x:/../*/_editor/*?name
  :x:/../*/_editor/*/*/mode?value
  :x:/../*/_editor/*/*/theme?value
  :x:/../*/_editor/*/*/autofocus?value
  :


/*
 * If [raise-update] is given as setting to this file, then we make sure CodeMirror
 * raises the [_onupdate] Ajax event when it is "blurred", to make sure textarea
 * wrapped by CodeMirror gets notified about that the changed code.
 * But only if there has been any changes to code, hence the "onchange" event handler.
 * This way our CodeMirror instance works just like a textarea, tracking changes like
 * if it was an [onchange] event handler on the wrapped textarea
 */
if:x:/../*/_editor/*/*/raise-update?value.bool
  send-javascript:@"
window.{0}.on('change', function (cMirror) {{
  window.{0}._hasChanges = true;
}});
window.{0}.on('blur',function (cMirror) {{
  if (window.{0}._hasChanges === true) {{
    window.{0}._hasChanges = false;
    var wdg = p5.$('{0}');
    wdg.el.value = cMirror.getValue();
    wdg.raise('_onupdate');
  }}
}});
"
    :x:/../*/_editor/*?name


/*
 * Setting initial height of editor, if we're given an explicit height
 */
if:x:/../*/_editor/*/*/height
  send-javascript:@"window.{0}.setSize('100%', '{1}');"
    :x:/../*/_editor/*?name
    :x:/../*/_editor/*/*/height?value



