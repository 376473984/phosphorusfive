
/*
 * Creates the tree widget Active Event, in addition to some helper Active Events.
 */


/*
 * The actual tree widget Active Event.
 * Creates a tree widget, which allows for hierarchically browsing relational tree structures, such as for instance a file
 * system, etc.
 *
 * Tree Widget is "SEO friendly", which means that it will allow spiders to crawl the nodes in your tree, as if they were hyperlinks,
 * while  still remaining the single page app feeling for human users, through Ajax functionality. But only if you explicitly set
 * the [_crawl] paremeter to true. If you do, you can override the default name of the HTTP GET parameter, by supplying it as [_crawl-get-name].
 *
 * Arguments;
 * 
 * [_class]           - CSS class to use, defaults to "tree-widget-default".
 * [_css-file]        - CSS file to include, defaults to "tree.css" from tree widget's media/skins/default folder.
 *                      If you wish to create your own skin, make sure you change this argument to whtever CSS file contains your skin.
 * [_items]           - Collection of items to show initially as "root items".
 *                      The name of its children nodes is what is displayed to the user, and the value is the "id" of the
 *                      item, used to uniquely identify the item, when the item is clicked for instance, etc.
 *                      Optionally you can supply child nodes for each item, declaring the CSS classes used to display it as [_class-close]
 *                      and [_class-open]. Their default values are "glyphicon glyphicon-folder-close" and "glyphicon glyphicon-folder-open".
 * [_crawl]           - If true, the tree will be rendered in SEO mode, meaning that crawling is enabled, through hyperlinks.
 * [_crawl-get-name]  - Allows you to override the default crawling HTTP GET parameter name. Its default value is "sys42_widgets_tree_unroll".
 * [_on-get-items]    - Callback lambda evaluated when the tree need more items.
 *                      Callback will be given [_item-id] for which item to retrieve children of.
 *                      Callback is expected to return an [_items] collection, similarly to when the tree is initially created.
 *                      See [_items] below to understand the collection the tree widget expects.
 * [_on-select]       - Callback lambda to invoke when an item is selected.
 */
create-event:sys42.widgets.tree

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    _class:tree-widget-default
    _css-file:/system42/components/tree-widget/media/skins/default/tree.css
    _on-get-items
      sys42.windows.info-top:You should really have supplied an [_on-get-items] callback! If not for anything else, than to make it empty!
        _class:info-window info-window-longer info-window-error
    _on-select
      sys42.windows.info-top:You should really have supplied an [_on-select] callback! If not for anything else, than to make it empty!
        _class:info-window info-window-longer info-window-error
    _crawl-get-name:sys42_widgets_tree_unroll
    _crawl:bool:false
  _options
  add:x:/../*/_options
    src:x:@"(/../*/"":regex:/^_/""|/../*/_defaults/*)(!/_defaults!/_options)/$"


  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/_options/*/_items/*
    not
    throw:You have to supply at the very least one root item when creating your tree widget.


  /*
   * Making sure we include our tree specific CSS file.
   */
  include-stylesheet-file:x:/../*/_options/*/_css-file?value


  /*
   * Adding initial items recursively to return widget.
   */
  eval-x:x:/+/*/*
  add:x:/../*/return/*/container/*/widgets
    sys42.widgets.tree._create-items
      _items:x:/../*/_options/*/_items


  /*
   * Adding [_on-get-items] callback into [sys42.widgets.tree._get-items]
   */
  add:x:/../*/return/*/*/events/*/sys42.widgets.tree._get-items
    src:x:/../*/_options/*/_on-get-items/*


  /*
   * Adding [_on-select] callback into [sys42.widgets.tree._select]
   */
  add:x:/../*/return/*/*/events/*/sys42.widgets.tree._select
    src:x:/../*/_options/*/_on-select/*


  /*
   * Removing the [oninit] of widget, if crawling is disabled.
   */
  if:x:/../*/_options/*/_crawl?value.bool
    not
    set:x:/../*/return/*/*/oninit
  else
    set:x:/../*/return/*/*/_root-tree?value
      src:x:/../*/_options/*/_crawl-get-name?value


  /*
   * Forward evaluating [class] to make sure we use [_options]/[_class] if supplied.
   */
  eval-x:x:/../*/return/*/*/class


  /*
   * Returning widget to caller.
   */
  return
    container


      /*
       * Used to track the "root widget" for our tree, such that we can easily retrieve it, 
       * using [find-first-ancestor-widget] later.
       */
      _root-tree


      /*
       * Forward evaluated before [return] invocation, to [_options]/[_class] value.
       */
      class:x:/../*/_options/*/_class?value


      /*
       * Events for tree widget.
       */
      events


        /*
         * Invoked when tree needs to retrieve children items for a specific tree node.
         * The lambda for this event, is created from the [_on-get-items] callback supplied during creation of tree.
         */
        sys42.widgets.tree._get-items

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Notice, the rest of this Active Event is dynamically created according to arguments supplied when
           * creating the tree, by invoking [add] to append user supplied lambda callback into body of this lambda.
           * Hence, it might appear to be empty, but it is probably not in fact.
           */


        /*
         * Invoked when items are selected in tree widget.
         */
        sys42.widgets.tree._select

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our tree.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Notice, the rest of this Active Event is dynamically created according to arguments supplied when
           * creating the tree, by invoking [add] to append user supplied lambda callback into body of this lambda.
           * Hence, it might appear to be empty, but it is probably not in fact.
           */


        /*
         * Invoke this to retrieve currently selected item(s) of widget.
         *
         * [_arg] must be the ID of the main tree widget.
         * 
         * The event will return an [_items] coollection, where the name of the nodes, are the IDs of all
         * items that are currently selected in your tree.
         */
        sys42.widgets.tree.get-selected-items

          /*
           * First we must make sure this is the tree requested by caller.
           */
          if:x:/../*/_arg?value
            =:x:/../*/_event?value

            /*
             * This is the tree caller requested to retrieve selected items in.
             * Finding all items in the tree that are currently selected.
             */
            find-widget-like:x:/../*/_event?value
              class:tree-selected
            if:x:/-/*?count
              !=:int:0

              /*
               * Tree has selected items.
               * Finding its parent "li" widget, and retrieving its [_item-id], and returning as [_items] collection to caller.
               */
              get-parent-widget:x:/./-/*?value
              get-widget-property:x:/-/*/*?value
                _item-id
              add:x:/+/*
                src:x:/./-/*/*?value
              return
                _items


        /*
         * Invoked when an item is "selected".
         *
         * [_arg] must be the ID of the main tree widget.
         * [_items] must be a collection of items to select.
         *
         * Notice, all previously selected items are de-selected!
         */
        sys42.widgets.tree.select-items

          /*
           * First we must make sure this is the tree requested by caller.
           */
          if:x:/../*/_arg?value
            =:x:/../*/_event?value

            /*
             * This is the tree caller requested to select items in, 
             * first finding all previously selected items, and de-selecting them.
             */
            find-widget-like:x:/../*/_event?value
              class:tree-selected
            if:x:/-/*?count
              !=:int:0

              /*
               * Tree has previously selected items, making sure we un-select them.
               */
              sys42.delete-css-classes:x:/./-/*?value
                _class:tree-selected

            /*
             * Then adding the selected CSS class to all items requested by caller.
             */
            for-each:x:/../*/_items/*?name
              find-widget:x:/../*/_event?value
                _item-id:x:/..for-each/*/_dp?value
              find-widget:x:/-/*?value
                element:a
              sys42.add-css-classes:x:/-/0?value
                _class:tree-selected

            /*
             * Making sure [_on-select] lambda callback is invoked.
             */
            add:x:/+
              src:x:/../*/_items
            sys42.widgets.tree._select:x:/../*/_arg?value


        /*
         * Invoked when user wants to "toggle" one or more items.
         * Expects [_items] collection.
         *
         * Notice, you can force this event to only expand items, by adding the [_force-expand] argument, and set its
         * value to being true. If you do, it will not hide already expanded items.
         * This feature is used among other things during "unrolling" of items due to SEO friendly URLs being traversed.
         */
        sys42.widgets.tree.toggle-items

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            =:x:/../*/_event?value

            /*
             * This is the tree caller requested to have items toggled in, 
             * now looping through all [_items] caller wants to toggle.
             */
            for-each:x:/../*/_items/*?name

              /*
               * Finding anchor/hyperlink for currently iterated item, then retrieving its parent, 
               * for then to find its parent's "ul" widget, if it exist.
               */
              find-widget:x:/../*/_event?value
                _item-id:x:/..for-each/*/_dp?value
              if:x:/..for-each/*/find-widget/*?value
                not

                /*
                 * Caller supplied a non-existing item.
                 */
                throw:Oops, that item doesn't exist!

              /*
               * Now checking if there already exist a "ul" HTML widget beneath the main "tree-item".
               * If a "ul" widget exist, and it is not hidden, we hide it, unless [_force-expand] is true.
               * If the "ul" widget exist, and is hidden, we show it.
               * If it doesn't exist, we invoke the lambda callback provided during creation, to retrieve 
               * additional items, before we create the "ul" widget and show it.
               *
               * This prevents having to retrieve the items from the supplied lambda callback more than once
               * for each item.
               *
               * Notice, hiding can be prevented by adding the [_force-expand] argument set to true.
               * If you do, it will only expand, regardless of if the item is expanded from before or not.
               * This feature is being used, among other things, while "unrolling" items (SEO friendly links).
               */
              get-children-widgets:x:/..for-each/*/find-widget/*?value
              if:x:/-/*/*/container/[1,2]

                /*
                 * Children items already exist, hence we check if it is hidden,
                 * and if so, we simply make it visible, otherwise we hide it (unless [_force-expand] is true).
                 */
                get-widget-property:x:/..for-each/*/get-children-widgets/*/*/container/[1,2]?value
                  class

                /*
                 * Checking if "ul" HTML widget is simply hidden.
                 */
                if:x:/-/*/*?value
                  ~:tree-hidden

                  /*
                   * "ul" HTML widget was simply hidden, making sure we show it, by deleting the "tree-hidden" class, and
                   * add the "tree-expanded" CSS class to main "li" HTML widget, before finally updating the "icon CSS class"
                   * to the [_class-open] value.
                   */
                  sys42.delete-css-classes:x:/..for-each/*/get-children-widgets/*/*/container/[1,2]?value
                    _class:tree-hidden
                  sys42.add-css-classes:x:/..for-each/*/find-widget/*?value
                    _class:tree-expanded

                  /*
                   * Making sure we set the "icon span" CSS class to [_class-open].
                   */
                  get-children-widgets:x:/..for-each/*/get-children-widgets/*/*/container/[0,1]?value
                  get-widget-property:x:/-/*/0?value
                    _class-open
                  set-widget-property:x:/-2/*/0?value
                    class:x:/./-/*/*?value
                else

                  /*
                   * Checking if caller wanted to "force an expansion" (meaning, open items will not be closed).
                   * Only if caller did NOT supply [_force-expand] as true, we actually hide items.
                   */
                  if:x:/../*/_force-expand?value
                    not

                    /*
                     * "ul" HTML widget is visible, and caller did not supply [_force-expand] as true,
                     * hence we hide it, by applying the "tree-hidden" class to the main "ul" HTML widget.
                     */
                    sys42.add-css-classes:x:/..for-each/*/get-children-widgets/*/*/container/[1,2]?value
                      _class:tree-hidden

                    /*
                     * Then we delete the "tree-expanded" CSS class to our main "li" HTML widget.
                     */
                    sys42.delete-css-classes:x:/..for-each/*/find-widget/*?value
                      _class:tree-expanded

                    /*
                     * Finally we apply our "close icon CSS class" to the icon "span" HTML widget.
                     */
                    get-children-widgets:x:/..for-each/*/get-children-widgets/*/*/container/[0,1]?value
                    get-widget-property:x:/-/*/0?value
                      _class-close
                    set-widget-property:x:/-2/*/0?value
                      class:x:/./-/*/*?value
              else

                /*
                 * Children items are NOT visible, requesting them through lambda callback supplied during creation, 
                 * and creating widgets from these items.
                 */
                eval-x:x:/+/*
                sys42.widgets.tree._get-items:x:/../*/_arg?value
                  _item-id:x:/..for-each/*/_dp?value

                /*
                 * Making sure this item actually has children items, and if not, returning to avoid changing CSS class,
                 * and do redundant work.
                 */
                if:x:/-/*/_items/*
                  not
                  return

                /*
                 * Then evaluating Active Event responsible for creating widgets out of our returned [_items] collection,
                 * from the above [sys42.widgets.tree._get-items] invocation.
                 *
                 * Notice, we pass in the node to our [_items] by reference, as value of the [_items] node argument.
                 */
                eval-x:x:/+/*
                sys42.widgets.tree._create-items
                  _items:x:/..else/*/sys42.widgets.tree._get-items/*/_items

                /*
                 * Making sure we change the returned [ul] to a [create-container-widget] invocation.
                 */
                set:x:/..else/*/sys42.widgets.tree._create-items/0?name
                  src:create-container-widget

                /*
                 * Making sure we add "ul" as value of [element] to [create-container-widget] invocation, in addition
                 * to making sure our "ul" widget gets the correct [parent] argument, which is the parent "li" element.
                 */
                eval-x:x:/+/*/*
                add:x:/..else/*/sys42.widgets.tree._create-items/0
                  src
                    element:ul
                    parent:x:/..for-each/*/find-widget/*?value

                /*
                 * Making sure we add the "tree-item-children-animate" CSS class to our widget, since this is
                 * a dynamically created child control collection. To create some nice animations, as the items shows
                 * up on page initially.
                 */
                set:x:/..else/*/sys42.widgets.tree._create-items/*/*/class?value
                  src:tree-item-children tree-item-children-animate

                /*
                 * Now we can simply [eval] the returned lambda from the above [sys42.widgets.tree._create-items] invocation,
                 * since it is now a [create-container-widget] invocation, correctly creating items, appending to tree item,
                 * specified in currently iterated [_items] argument.
                 */
                eval:x:/..else/*/sys42.widgets.tree._create-items

                /*
                 * Adding the "expanded" CSS class in parent widget.
                 */
                sys42.add-css-classes:x:/..for-each/*/find-widget/*?value
                  _class:tree-expanded

                /*
                 * Making sure we apply the "open" CSS class to the icon item.
                 */
                get-children-widgets:x:/..for-each/*/get-children-widgets/*/*/container/[0,1]?value
                get-widget-property:x:/-/*/0?value
                  _class-open
                set-widget-property:x:/-2/*/0?value
                  class:x:/./-/*/*?value

      /*
       * Checking if we should "unroll items".
       */
      oninit

        /*
         * Checking URL to determine if we should "unroll" items.
         */
        get-widget-property:x:/../*/_event?value
          _root-tree
        get-http-get-param:x:/-/*/*?value
        if:x:/../*/get-http-get-param/*?value
          not

          /*
           * Nothing to do here.
           */
          return

        /*
         * Splitting up every ID from URL, and adding every ID to invocation of [toggle-items],
         * while forcing an "unrolling" through [_force-expand].
         */
        split:x:/../*/get-http-get-param/*?value
          =:|
        add:x:/+/*/_items
          src:x:/../*/split/*?name
        sys42.widgets.tree.toggle-items:x:/../*/_event?value
          _items
          _force-expand:bool:true

        /*
         * Making sure we select outer most item.
         */
        add:x:/../*/sys42.widgets.tree.select-items/*
          src:x:/../*/split/0/-?name
        sys42.widgets.tree.select-items:x:/../*/_event?value
          _items
      widgets


/*
 * Supporting Active Event, to create items.
 * Used both during initial creation of tree widget, to create initially shown nodes, and during 
 * "toggling" (creation of new items).
 */
create-event:sys42.widgets.tree._create-items

  /*
   * These are the default CSS classes used for icon items, if no explicit override is supplied by caller.
   */
  _options
    _class-close:glyphicon glyphicon-folder-close
    _class-open:glyphicon glyphicon-folder-open

  /*
   * Checking if we have items, and if not, returning early.
   */
  if:x:/../*/_items/#/*
    not
    return

  /*
   * Looping through all [_items]
   */
  for-each:x:/../*/_items/#/*

    /*
     * Forward evaluating [_items] collection in recursive invocation of "self" inside of [add], to make sure
     * we recursively add children [_items] of currently iterated [_items].
     *
     * This allows us to create hierarchies of items, both during initial creation, and during toggling/expanding of items.
     */
    eval-x:x:/+/*/*
    add:x:/..for-each/*/add/[1,2]/*/*/*/widgets
      sys42.widgets.tree._create-items
        _items:x:/..for-each/*/_dp/#/*/_items

    /*
     * Checking if this item has children, at which case, we should add the "tree-expanded" CSS class to "li" HTML widget,
     * and the "icon open" CSS class to the nested icon "span" HTML element.
     */
    if:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/ul

      /*
       * Adding the CSS class of "tree-expanded" to our "li" HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/class?value
        src:{0} tree-expanded
          :x:/..for-each/*/add/[1,2]/*/*/*/class?value

      /*
       * Applying the [_class-open] CSS class to the "icon" span HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/class?value
        src:x:(/..for-each/*/_dp/#/*/_class-open|/../*/_options/*/_class-open)/$?value
    else

      /*
       * Applying the [_class-close] CSS class to the "icon" span HTML element.
       */
      set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/class?value
        src:x:(/..for-each/*/_dp/#/*/_class-close|/../*/_options/*/_class-close)/$?value

    /*
     * Storing the "close icon CSS class" and "open icon CSS class" in widget as invisible property, 
     * such that we can retrieve it later when item  is toggled.
     */
    set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/_class-close?value
      src:x:(/..for-each/*/_dp/#/*/_class-close|/../*/_options/*/_class-close)/$?value
    set:x:/..for-each/*/add/[1,2]/*/*/*/widgets/*/a/*/widgets/*/span/[0,1]/*/_class-open?value
      src:x:(/..for-each/*/_dp/#/*/_class-open|/../*/_options/*/_class-open)/$?value

    /*
     * Setting properties for currently iterated item, and adding item into [return] below.
     *
     * These are simply [innerValue] on hyperlink, in addition to [_item-id] on "li", which is a server-side hidden property
     * for the item, allowing us to figure out the "id" of which item was clicked, among other things.
     */
    eval-x:x:/..for-each/*/add/[1,2]/*/*/*(/_item-id|/*/a/*/widgets/*/span/[1,2]/*/innerValue)

    /*
     * Adding any custom CSS classes caller supplied to currently iterated widget.
     */
    if:x:/..for-each/*/_dp/#/*/_class?value
      set:x:/..for-each/*/add/[1,2]/*/*/*/class?value
        src:tree-item {0}
          :x:/..for-each/*/_dp/#/*/_class?value

    /*
     * Adding currently iterated [_items] to [return] below, now with the correct [innerValue] and [_item-id] according
     * to caller's request.
     */
    add:x:/../*/return/*/*
      src
        li
          class:tree-item
          _item-id:x:/..for-each/*/_dp/#?value
          widgets
            a
              href:#
              role:button
              class:tree-item-label
              onclick

                /*
                 * Getting id of item, and passing into [toggle-items] and [select-items] as [_items] collection.
                 */
                get-parent-widget:x:/../*/_event?value
                get-widget-property:x:/-/*/*?value
                  _item-id
                add:x:/../*/sys42.widgets.tree.toggle-items/*|/../*/sys42.widgets.tree.select-items/*
                  src:x:/../*/get-widget-property/*/*?value

                /*
                 * Then finding "root tree" widget for currently clicked item, such that we can pass it
                 * into [toggle-items] and [select-items].
                 */
                find-first-ancestor-widget:x:/../*/_event?value
                  _root-tree
                sys42.widgets.tree.toggle-items:x:/../*/find-first-ancestor-widget/*?value
                  _items
                sys42.widgets.tree.select-items:x:/../*/find-first-ancestor-widget/*?value
                  _items

              /*
               * To make sure we are able to create our SEO URL in hyperlink, we handle [oninit],
               * since at that point, the widget is "rooted", and we can traverse all "li" elements
               * upwards in hierarchy, all the way to the "root" widget, to retrieve all IDs of elements.
               */
              oninit

                /*
                 * Retrieving parent "li" HTML widget, and passing it into [_create-url], which will
                 * traverse the hierarchy upwards, adding all necessary IDs, and creating a URL that will
                 * expand all items leading to "current item".
                 */
                find-first-ancestor-widget:x:/../*/_event?value
                  _root-tree
                get-widget-property:x:/-/*?value
                  _root-tree

                /*
                 * Notice, if the [_root-tree] hidden property on root widget contains something, it means we should
                 * create an SEO friendly tree, and use the value of [_root-tree] as the HTTP GET parameter name while doing.
                 */
                if:x:/-/*/*?value
                  get-parent-widget:x:/../*/_event?value
                  sys42.widgets.tree._create-url:x:/-/*/*?value
                  set-widget-property:x:/../*/_event?value
                    href:x:/..if/*/sys42.widgets.tree._create-url?value
              widgets
                span
                  _class-close
                  _class-open
                  class
                  innerValue:
                span
                  innerValue:x:/..for-each/*/_dp/#?name

  /*
   * Returning widget hierarchy.
   */
  return
    ul
      class:tree-item-children
      widgets


/*
 * Supporting Active Event, to create URL from given [_arg] "li" widget.
 */
create-event:sys42.widgets.tree._create-url

  /*
   * First we get current location, without GET parameters, before we add the question mark to make sure we 
   * "open" our GET params collection.
   */
  get-location-url
  set:x:/../*/get-location-url?value
    src:{0}?
      :x:/../*/get-location-url?value

  /*
   * Then we must fetch all GET parameters, and remove any previously created "sys42_widgets_tree_unroll" params,
   * before we add all other GET parameters, to make sure we keep everything EXCEPT "sys42_widgets_tree_unroll".
   */
  find-first-ancestor-widget:x:/../*/_arg?value
    _root-tree
  get-widget-property:x:/-/*?value
    _root-tree
  list-http-get-params
  set:x:/-/*/{0}
    :x:/../*/get-widget-property/*/*?value
  if:x:/-2/*
    get-http-get-param:x:/./-2/*?name
    for-each:x:/-/*
      url-encode:x:/./*/_dp/#?value
      set:x:/../*/get-location-url?value
        src:{0}{1}={2}&
          :x:/../*/get-location-url?value
          :x:/..for-each/*/_dp/#?name
          :x:/..for-each/*/url-encode?value

  /*
   * Adding key for our "unroll" GET parameter.
   */
  set:x:/../*/get-location-url?value
    src:{0}{1}=
      :x:/../*/get-location-url?value
      :x:/../*/get-widget-property/*/*?value

  /*
   * Then we need to recursively iterate from current widget, and upwards in hierarchy, until
   * we reach "main root tree widget", and append all IDs to the URL separated by a pipe sign (|).
   * Making sure we url-encode the whole thing, before adding it.
   */
  set:x:/+?value
    src:x:/../*/_arg?value
  _cur
  _param
  while:bool:true
    get-widget-property:x:/../*/_cur?value
      _item-id
    set:x:/../*/_param?value
      src:{0}|{1}
        :x:/..while/*/get-widget-property/[0,1]/*/*?value
        :x:/../*/_param?value
    get-parent-widget:x:/../*/_cur?value
    get-parent-widget:x:/-/*/*?value

    /*
     * Checking if we're done. Unless current widget is an "li" widget, we're at the
     * root widget for our tree widget.
     */
    get-widget-property:x:/-/*/*?value
      element
    if:x:/-/*/*?value
      !=:li

      // This is main root tree widget, which is "div" and not "li".
      break
    set:x:/../*/_cur?value
      src:x:/..while/*/get-parent-widget/[1,2]/*/*?value

  /*
   * Now we URL encode entire parameter, before we return it concatenated with base URL to caller.
   */
  trim:x:/../*/_param?value
    chars:|
  url-encode:x:/../*/trim?value

  return:{0}{1}
    :x:/../*/get-location-url?value
    :x:/../*/url-encode?value
