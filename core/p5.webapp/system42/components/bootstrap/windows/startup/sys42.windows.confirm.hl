
/*
 * Responsible for creating the Active Event that shows the user a modal dialog,
 * to make user confirm some action, before action is evaluated.
 *
 * Arguments;
 * 
 * [_header]         - Header of modal dialogue
 * [_body]           - Explanatory text of dialogue
 * [_class]          - Override the default CSS class
 * [_inner-class]    - Override the default inner CSS class. Set this to "modal-dialog modal-lg" to create a wider dialogue.
 * [.onok]           - Code to be evaluated if user clicks OK button
 * [.oncancel]       - Lambda callback to be evaluated if user closes dialogue without pressing "OK".
 * [_buttons]        - Makes it possible to exchange the default "OK" button with your own buttons
 *                     If you supply a [_buttons] parameter, then [_ok] has no effect, and you must
 *                     provide your own logic in the onclick handler of these buttons instead.
 *                     To evaluate the [.onok] lambda, you can invoke [sys42.windows.confirm.ok],
 *                     To close dialogue, you can invoke [sys42.windows.confirm.destroy]. If you wish to
 *                     make sure your [.oncancel] lambda is evaluated, you should use [sys42.windows.confirm.cancel]
 *                     instead. [sys42.windows.confirm.destroy] will not evaluate your [.oncancel] lambda callback.
 *
 * If user closes modal dialogue, without clicking OK, then the given [.onok] is not evaluated.
 * There can be only one instance of this dialogue at the same time in your page.
 */
create-event:sys42.windows.confirm

  /*
   * Applying options for widget, with default values.
   * This lambda uses the boolean algebraic "OR" operator, combined with /$ (unique name), ending
   * up prioritizing specified argument, resorting to [_default] value if not given
   */
  _defaults
    _header:Please confirm action!
    _body:You should really have supplied something intelligent here in the [_body] argument ...
    _class:modal fade
    _inner-class:modal-dialog
    _parent:cnt
    _buttons
      literal
        element:button
        class:btn btn-default
        innerValue:OK
        oninit
          sys42.windows.confirm.initial-focus:x:/../*/_event?value
        onclick
          sys42.windows.confirm.ok
    .onok
    .oncancel
  _options
  add:x:/../*/_options
    src:x:@"(/../*/"":regex:/^_/""|/../*/"":regex:/^\\./""|/../*/_defaults/*)(!/_defaults!/_options)/$"

  /*
   * Making sure we delete any previously created dialogs.
   * Notice that sice we only hide the dialog when it is closed, we need
   * to check if any previous dialogs exist, and if so, delete them, before 
   * we create this one.
   */
  if
    fetch:x:/0/0?value
      widget-exist:modal-window
    delete-widget:modal-window

  /*
   * Appending buttons into footer of dialogue, which unless overridden through [_buttons], means
   * only the "OK" button.
   */
  add:x:/../*/create-widget/**/class/=modal-footer/./*/widgets
    src:x:/../*/_options/*/_buttons/*

  /*
   * Appending [.onok] into [sys42.windows.confirm.ok]
   */
  add:x:/../*/create-widget/*/events/*/sys42.windows.confirm.ok/*/.lambda
    src:x:/../*/_options/*/.onok/*

  /*
   * Appending [.oncancel] into [sys42.windows.confirm.cancel]
   */
  add:x:/++/events/*/sys42.windows.confirm.cancel/*/.lambda
    src:x:/../*/_options/*/.oncancel/*

  /*
   * Creating actual modal Widget, making sure we forward evaluate the [_header] and [_body]
   */
  eval-x:x:/../*/create-widget/*|/../*/create-widget/**(/=modal-window-body|/=modal-window-header)/*/innerValue|/../*/create-widget/*/widgets/*/container/*/class
  create-widget:modal-window
    parent:x:/../*/_options/*/_parent?value
    class:x:/../*/_options/*/_class?value
    .oncancel

      /*
       * We evaluate our [.oncancel], but we do it in such a way, that we do not transfer the closing JavaScript to
       * the client, since modal window was already closed on the client, if this event was raised.
       */
      sys42.windows.confirm.cancel
        _close-client:bool:false

    events


      /*
       * Evaluates OK lambda object.
       * Notice the [.onok] lambda, passed in from caller, will be appended into this event.
       */
      sys42.windows.confirm.ok

        /*
         * Making sure we close window without evaluating [.oncancel].
         *
         * Notice, the rest of this Active Event may seem empty, but actually contains the specified
         * [.onok] lambda callback, which will be evaluated when event is invoked.
         */
        sys42.windows.confirm.destroy

        /*
         * Contains the [.onok] lambda callback passed into when instantiated.
         */
        .lambda
        eval:x:/-


      /*
       * Closes dialogue, evaluating the [.oncancel] lambda callback.
       *
       * If you pass in [_close-client], and it is "true", then the JavaScript necessary to close the
       * modal window on the client will be transferred.
       */
      sys42.windows.confirm.cancel

        /*
         * Closing modal dialogue.
         */
        if:x:/../*/_close-client
          not
          or:x:/../*/_close-client?value.bool
          sys42.windows.confirm.destroy

        /*
         * Contains the [.oncancel] lambda callback passed into when instantiated.
         */
        .lambda
        eval:x:/-


      /*
       * Closes dialogue, without evaluating [.oncancel].
       */
      sys42.windows.confirm.destroy

        /*
         * Turning OFF the hide handler, to avoid an additional Ajax request towards server, to evaluate [.oncancel],
         * before we hide modal window.
         */
        send-javascript:@"$('#modal-window').off('hide.bs.modal');"
        send-javascript:@"$('#modal-window').modal('hide');"


      /*
       * Gives initial focus to a specific widget.
       */
      sys42.windows.confirm.initial-focus

        /*
         * Here we make sure we give focus to the specified [_arg] widget, such that it is not given focus, before
         * after the modal window has been shown.
         */
        send-javascript:@"$('#modal-window').on('shown.bs.modal', function () {{$('#{0}').focus();}})"
          :x:/../*/_arg?value

    oninit

      /*
       * Making sure dialog becomes initially visible, and that we trap "hide", from where we invoke the .oncancel Ajax event, 
       * to make sure we evaluate the specified [.oncancel] lambda callback.
       */
      send-javascript:@"$('#modal-window').modal('toggle').on('hide.bs.modal', function(){p5.$('modal-window').raise('.oncancel');});"

    widgets
      container
        class:x:/../*/_options/*/_inner-class?value
        role:document
        widgets
          container
            class:modal-content
            widgets

              /*
               * Header of modal window.
               */
              container
                class:modal-header
                widgets
                  literal
                    element:button
                    class:close
                    data-dismiss:modal
                    aria-label:Close
                    innerValue:&times;
                  literal:modal-window-header
                    element:h4
                    innerValue:x:/../*/_options/*/_header?value

              /*
               * Body of modal window.
               */
              container
                class:modal-body
                widgets
                  literal:modal-window-body
                    element:div
                    innerValue:x:/../*/_options/*/_body?value

              /*
               * Footer of dialog, contains [_buttons], which by default means only "OK" button.
               */
              container
                class:modal-footer
                widgets
