
/*
 * Creates the Ajax Navbar widget, which allows you to create an Ajax menu, or a Navbar for your page.
 *
 * The Navbar Widget is "SEO friendly", which means that it will allow spiders to crawl the nodes in your tree, as if they were hyperlinks,
 * while  still remaining the single page app feeling for human users, through Ajax functionality. But only if you explicitly set
 * the [_crawl] paremeter to true. If you do, you can override the default name of the HTTP GET parameter, by supplying it as [_crawl-get-name].
 *
 * Arguments;
 * 
 * [_items]           - Collection of menu items to show.
 *                      The name of its children nodes is what is displayed to the user, and the value is the "id" of the
 *                      item, used to uniquely identify the item. The id is not necessary, unless you turn on [_crawl].
 *                      Optionally you can supply child nodes for each item.
 *                      All items can either have an [.onclick] lambda callback, which is invoked when an item is clicked, or
 *                      its own children [_items] collection, but not both!
 * [_crawl]           - If true, the menu will be rendered in SEO mode, meaning that crawling is enabled, through hyperlinks.
 * [_crawl-get-name]  - Allows you to override the default crawling HTTP GET parameter name. Its default value is "sys42_widgets_menu_unroll".
 */
p5.events.create:sys42.widgets.navbar

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    _crawl-get-name:sys42_widgets_navbar_unroll
    _crawl:bool:false
  _options
  add:x:/../*/_options
    src:x:@"/../*(/"":regex:/^_/""|/"":regex:/^\\./""|/_defaults/*)(!/_defaults!/_options)/$"


  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/_options/*/_items/*
    not

    /*
     * No items provided, which is a bug.
     */
    throw:You have to supply at the very least one root item when creating your navbar widget.


  /*
   * Adding items recursively to return widget.
   */
  eval-x:x:/+/*/*
  add:x:/../*/return/**/ul/*/widgets
    sys42.widgets.navbar._create-items:x:/../*/_arg?value
      _items:x:/../*/_options/*/_items
      _crawl:x:/../*/_options/*/_crawl?value
      _crawl-get-name:x:/../*/_options/*/_crawl-get-name?value


  /*
   * Checking if caller wants navbar to be crawlable by search engines.
   */
  if:x:/../*/_options/*/_crawl?value.bool


    /*
     * Caller wants navbar to be "crawl SEO friendly".
     */
    set:x:/../*/return/*/*/_root-navbar?value
      src:x:/../*/_options/*/_crawl-get-name?value


    /*
     * Checking if the current URL is an "unroll" URL.
     */
    p5.web.query.get:x:/../*/_options/*/_crawl-get-name?value
    if:x:/@p5.web.query.get/*?value


      /*
       * We should unroll URL, we do this by invoking the [click] of the item with the ID from the URL during [oninit].
       */
      eval-x:x:/+/*/*/*/*/_item-id
      add:x:/../*/return/*/container
        src
          oninit

            /*
             * Making sure we raise [onclick] for the item from the HTTP GET unroll parameter.
             * Notice, [_item-id] is forward evaluated in the above [eval-x] invocation.
             */
            p5.web.widgets.find:x:/../*/_event?value
              _item-id:x:/@p5.web.query.get/*?value
            p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find/*/*?value
              onclick


  /*
   * Returning Navbar to caller.
   */
  return
    container
      _root-navbar
      class:container-fluid
      widgets
        container
          class:navbar-header
          oninit

            /*
             * Making sure we include Boootstrap.
             *
             * Notice, the navbar depends upon the Bootstrap JavaScript when it is collapsed.
             * In addition we must include our navbar.css file, which creates some padding for our body, in addition to creating
             * the hack to allow Boostrap's navbar to have multiple levels of inner menus.
             */
            sys42.bootstrap.include-css
            sys42.bootstrap.include-javascript
            p5.web.include-css-file:@CMS/media/css/navbar-fix.min.css

          widgets

            /*
             * Toggles visibility of navbar, only visible in small screen resolutions.
             */
            button
              type:button
              class:navbar-toggle collapsed
              data-toggle:collapse
              aria-expanded:false
              innerValue:@"<span class=""icon-bar""></span><span class=""icon-bar""></span><span class=""icon-bar""></span>"
              oninit

                /*
                 * Making sure we attach our [data-target] property
                 */
                p5.web.widgets.find-ancestor:x:/../*/_event?value
                  _root-navbar
                p5.web.widgets.find:x:/@p5.web.widgets.find-ancestor/*/*?value
                  class:collapse navbar-collapse
                p5.web.widgets.property.set:x:/../*/_event?value
                  data-target:#{0}
                    :x:/@p5.web.widgets.find/*/*?value

        /*
         * Main menu items wrapper
         */
        container
          class:collapse navbar-collapse
          widgets
            ul
              class:nav navbar-nav

              /*
               *This part will be dynamically populated from your [_items] collection.
               */
              widgets
