
/*
 * Creates a navbar widget, which allows you to create an Ajax "menu" or navigation for your page.
 *
 * The Navbar Widget is "SEO friendly", which means that it will allow spiders to crawl the nodes in your tree, as if they were hyperlinks,
 * while  still remaining the single page app feeling for human users, through Ajax functionality. But only if you explicitly set
 * the [_crawl] paremeter to true. If you do, you can override the default name of the HTTP GET parameter, by supplying it as [_crawl-get-name].
 *
 * Arguments;
 * 
 * [_items]           - Collection of menu items to show.
 *                      The name of its children nodes is what is displayed to the user, and the value is the "id" of the
 *                      item, used to uniquely identify the item. The id is not necessary, unless you turn on [_crawl].
 *                      Optionally you can supply child nodes for each item.
 *                      All items can either have an [.onclick] lambda callback, which is invoked when an item is clicked, or
 *                      its own children [_items] collection, but not both!
 * [_crawl]           - If true, the menu will be rendered in SEO mode, meaning that crawling is enabled, through hyperlinks.
 * [_crawl-get-name]  - Allows you to override the default crawling HTTP GET parameter name. Its default value is "sys42_widgets_menu_unroll".
 *
 * Notice, when creating this widget, you would probably want to consistently use the "cnt" as its [parent] argument, to make sure the menu
 * is rendered outside of your main content. This is because it creates a "container-fluid" element from Bootstrap to display itself.
 */
create-event:sys42.widgets.navbar

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    _crawl-get-name:sys42_widgets_navbar_unroll
    _crawl:bool:false
  _options
  add:x:/../*/_options
    src:x:@"(/../*/"":regex:/^_/""|/../*/"":regex:/^\\./""|/../*/_defaults/*)(!/_defaults!/_options)/$"


  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/_options/*/_items/*
    not
    throw:You have to supply at the very least one root item when creating your navbar widget.


  /*
   * Adding items recursively to return widget.
   */
  eval-x:x:/+/*/*
  add:x:/../*/return/**/ul/*/widgets
    sys42.widgets.navbar._create-items:x:/../*/_arg?value
      _items:x:/../*/_options/*/_items
      _crawl:x:/../*/_options/*/_crawl?value
      _crawl-get-name:x:/../*/_options/*/_crawl-get-name?value


  /*
   * Checking if caller wants navbar to be crawlable by search engines.
   */
  if:x:/../*/_options/*/_crawl?value.bool


    /*
     * Caller wants navbar to be "crawl SEO friendly".
     */
    set:x:/../*/return/*/*/_root-navbar?value
      src:x:/../*/_options/*/_crawl-get-name?value


    /*
     * Checking if the current URL is an "unroll" URL.
     */
    get-http-get-param:x:/../*/_options/*/_crawl-get-name?value
    if:x:/@get-http-get-param/*?value


      /*
       * We should unroll URL, we do this by invoking the [click] of the item with the ID from the URL during [oninit].
       */
      eval-x:x:/+/*/*/*/*/_item-id
      add:x:/../*/return/*/container
        src
          oninit

            /*
             * Making sure we raise [onclick] for the item from the HTTP GET unroll parameter.
             * Notice, [_item-id] is forward evaluated in the above [eval-x] invocation.
             */
            find-widget:x:/../*/_event?value
              _item-id:x:/..if/..if/*/get-http-get-param/*?value
            raise-widget-ajax-event:x:/-/*/*?value
              onclick


  /*
   * Returning Navbar to caller.
   */
  return
    container
      _root-navbar
      class:container-fluid
      widgets
        container
          class:navbar-header
          oninit

            /*
             * Making sure we include Boootstrap.
             *
             * Notice, the navbar depends upon the Bootstrap JavaScript when it is collapsed.
             * In addition we must include our navbar.css file, which creates some padding for our body, in addition to creating
             * the hack to allow Boostrap's navbar to have multiple levels of inner menus.
             */
            sys42.bootstrap.include-css
            sys42.bootstrap.include-javascript
            include-stylesheet-file:@CMS/media/css/navbar-fix.min.css

          widgets

            /*
             * Toggles visibility of navbar, only visible in small screen resolutions.
             */
            button
              type:button
              class:navbar-toggle collapsed
              data-toggle:collapse
              aria-expanded:false
              innerValue:@"<span class=""icon-bar""></span><span class=""icon-bar""></span><span class=""icon-bar""></span>"
              oninit

                /*
                 * Making sure we attach our [data-target] property
                 */
                find-first-ancestor-widget:x:/../*/_event?value
                  _root-navbar
                find-widget:x:/@find-first-ancestor-widget/*/*?value
                  class:collapse navbar-collapse
                set-widget-property:x:/../*/_event?value
                  data-target:#{0}
                    :x:/@find-widget/*/*?value

        /*
         * Main menu items wrapper
         */
        container
          class:collapse navbar-collapse
          widgets
            ul
              class:nav navbar-nav

              /*
               *This part will be dynamically populated from your [_items] collection.
               */
              widgets


/*
 * Supporting Active Event, to create items.
 */
create-event:sys42.widgets.navbar._create-items

  /*
   * Checking if we have items, and if not, returning early.
   */
  if:x:/../*/_items/#/*
    not
    return

  /*
   * Looping through all [_items]
   */
  for-each:x:/../*/_items/#/*

    /*
     * Checking if this item is nested
     */
    if:x:/..for-each/*/_dp/#/*/_items

      /*
       * This item has nested children.
       *
       * Forward evaluating [_items] collection in recursive invocation of "self" inside of [add], to make sure
       * we recursively add children [_items] of currently iterated [_items] item.
       */
      eval-x:x:/+/*/*
      add:x:/..if/*/add/[1,2]/*/*/*/widgets/*/ul/*/widgets
        sys42.widgets.navbar._create-items:x:/../*/_arg?value
          _items:x:/..for-each/*/_dp/#/*/_items
          _crawl:x:/../*/_crawl?value
          _crawl-get-name:x:/../*/_crawl-get-name?value

      /*
       * Setting properties for currently iterated item, and adding item into [return] below.
       */
      eval-x:x:/..if/*/add/[1,2]/*/*/*/widgets/*/a/*/innerValue

      /*
       * Adding currently iterated [_items] to [return] below, now with the correct [innerValue] and [_item-id] according
       * to caller's request.
       */
      add:x:/../*/return
        src
          li
            render-type:open
            class:dropdown
            widgets
              a
                href:#
                class:dropdown-toggle
                data-toggle:dropdown
                role:button
                aria-haspopup:true
                aria-expanded:false
                innerValue:@"{0} <span class=""caret""></span>"
                  :x:/..for-each/*/_dp/#?name
              ul
                class:dropdown-menu
                widgets
    else-if:x:/..for-each/*/_dp/#?name
      =:_separator

      /*
       * This is a separator item.
       */
      add:x:/../*/return
        src
          li
            render-type:open
            class:divider
            role:separator

    else

      /*
       * This item does not have any nested children.
       * Adding the supplied [.onclick] to our currently iterated item.
       */
      add:x:/..else/*/add/[1,2]/*/*/*/widgets/*/a/*/onclick
        src:x:/..for-each/*/_dp/#/*/.onclick/*

      /*
       * Setting properties for currently iterated item, and adding item into [return] below.
       */
      eval-x:x:/..else/*/add/[1,2]/*/*/*/widgets/*/a/*(/innerValue|/_item-id)

      /*
       * Checking if caller wanted to have an SEO friendly navbar.
       */
      if:x:/../*/_crawl?value.bool
        not

        /*
         * Removing [oninit], since it's only there to retrieve the SEO URL, and caller did not want an SEO navbar.
         */
        set:x:/..else/*/add/[1,2]/*/*/*/*/*/oninit

      /*
       * Adding currently iterated [_items] to [return] below, now with the correct [innerValue] and [_item-id] according
       * to caller's request.
       */
      add:x:/../*/return
        src
          li
            render-type:open
            widgets
              a
                href:#
                role:button
                _item-id:x:/..for-each/*/_dp/#?value
                innerValue:x:/..for-each/*/_dp/#?name
                oninit
                  sys42.widgets.navbar._create-url:x:/../*/_event?value
                  set-widget-property:x:/../*/_event?value
                    href:x:/./-?value
                onclick

                  /*
                   * This might look empty, but it contains the lambda callback supplied
                   * by caller for [.onclick] of item, if any.
                   */
                  if
                    is-callback
                    send-javascript:@"if ($(window).width() < 768) {$('.navbar-toggle').click();}"
                  find-first-ancestor-widget-like:x:/../*/_event?value
                    element:ul
                    class:dropdown-menu
                  if:x:/-/*/*?value
                    and
                      is-callback
                    send-javascript:@"$('#{0}').dropdown('toggle');"
                      :x:/@find-first-ancestor-widget-like/*/*?value

  /*
   * Returning widget collection to caller.
   */
  return


/*
 * Supporting Active Event, to create URL from given [_arg] hyperlink widget.
 */
create-event:sys42.widgets.navbar._create-url

  /*
   * First we get current location, without GET parameters, before we add the question mark to make sure we 
   * "open" our GET params collection.
   */
  get-location-url
  set:x:/../*/get-location-url?value
    src:{0}?
      :x:/../*/get-location-url?value

  /*
   * Then we must fetch all GET parameters, and remove any previously created "sys42_widgets_tree_unroll" params,
   * before we add all other GET parameters, to make sure we keep everything EXCEPT "sys42_widgets_tree_unroll".
   */
  find-first-ancestor-widget:x:/../*/_arg?value
    _root-navbar
  get-widget-property:x:/-/*/*?value
    _root-navbar
  list-http-get-params
  set:x:/-/*/{0}
    :x:/../*/get-widget-property/*/*?value
  if:x:/-2/*
    get-http-get-param:x:/./-2/*?name
    for-each:x:/-/*
      url-encode:x:/./*/_dp/#?value
      set:x:/../*/get-location-url?value
        src:{0}{1}={2}&
          :x:/../*/get-location-url?value
          :x:/..for-each/*/_dp/#?name
          :x:/..for-each/*/url-encode?value

  /*
   * Adding key for our "unroll" GET parameter.
   */
  set:x:/../*/get-location-url?value
    src:{0}{1}=
      :x:/../*/get-location-url?value
      :x:/../*/get-widget-property/*/*?value

  /*
   * Then we can URL encode the parameter, and return URL to caller.
   */
  get-widget-property:x:/../*/_arg?value
    _item-id
  url-encode:x:/-/*/*?value

  return:{0}{1}
    :x:/../*/get-location-url?value
    :x:/../*/url-encode?value

