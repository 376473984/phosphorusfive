
/*
 * Creates a datagrid extension widget, which shows a table of items.
 *
 * The Ajax Datagrid widget, can either be set into "inline editing" mode, or "row selection" mode, in addition to that you can supply
 * "template columns", which contains widgets as you see fit.
 *
 * Arguments;
 * 
 * [_skin]               - Skin file and class to use. Default value is "default".
 * [_page-size]          - Number of items to display per page in your datagrid. Default value is 10.
 * [_show-pager]         - Allows you to turn off the entire footer part of your datagrid, turning off both paging, and searching.
 * [_pager-widgets]      - Extra widgets, injected between previous and next page buttons.
 *                         By combining this with your own widgets for accomplishing the same, relying upon the API of the datagrid,
 *                         which is really quite extensive, you can entirely implement your own paging and/or searching logic if you wish.
 * [.on-header-clicked]  - Lambda callback evaluated when a header is clicked in your datagrid.
 *                         By default, the user cannot click the headers of the datagrid. However, if you supply this lammbda callback,
 *                         then the headers for your datagrid, will become clickable link buttons, invoking this lambda whenever clicked.
 *                         Your lambda callback, will be evaluated from within the context of the header that was clicked. Meaning, the
 *                         [_event] argument of your header, will be passed into it, allowing you to use [get-widget-property] too figure
 *                         out which column was clicked.
 * [.on-get-items]       - Callback lambda evaluated when the datagrid need more items.
 *                         You must return an [_items] collection here, with one child node,
 *                         for each of your rows, with either a name or a value being the "ID" of your data record.
 *                         Each child node of your item, becomes a column in the datagrid.
 *                         If you wish, you can turn off editing of specific columns and/or cells, by making
 *                         sure your specific cell item contains an [_edit] child, with the value of "false".
 *                         You can also return "template columns" here, passing in a [widgets] child, being a widgets
 *                         collection, allowing you to inject any Ajax widget you wish, into any cell of your datagrid.
 *                         The [widgets] feature of cells, is only possible to use, if you use the datagrid in "inline editing" mode.
 *                         The [.on-get-items] is given at least two argument; [_start] and [_end], in addition to an optional
 *                         argument [_query], being the "filter/search" criteria for your datagrid.
 * [.on-edit-item]       - Callback lambda evaluated whenever some cell's content has been edited.
 *                         This lambda will be given [_row], [_column] and [_value] as arguments. [_row] being the ID of the
 *                         row that was edited, [_column] being the column name, and [_value] being the new value.
 * [.on-select-items]    - Lambda callback evaluated whenever some row is selected. This argument is mutually exclusive with the
 *                         [.on-edit-item], meaning you must only supply one of these lambda callbacks.
 *                         Your [.on-select-items] callback is invoked whenever one or more rows have been selected in yoru datagrid.
 *                         It will be given an [_items] collection, which contains one or more children nodes, where their names
 *                         are the ID(s) of the rows that were selected.
 */
create-event:sys42.widgets.datagrid

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    _skin:default
    _page-size:int:10
    _show-pager:true
    _pager-widgets
    .on-header-clicked
    .on-get-items
    .on-edit-item
    .on-select-items
  _options
  add:x:/../*/_options
    src:x:@"/../*(/"":regex:/^_/""|/"":regex:/^\\./""|/_defaults/*)(!/_defaults!/_options)/$"


  /*
   * Making sure user provided either [.on-edit-item] or [.on-select-items], and not both!
   */
  if:x:/../*/_options/*/.on-select-items/*
    and:x:/../*/_options/*/.on-edit-item/*
    or:x:/../*/_options/*/.on-select-items/*
      not
      and:x:/../*/_options/*/.on-edit-item/*
        not

    /*
     * Oops, user provided either both [.on-edit-item] and [.on-select-items], or none of them.
     */
    throw:Sorry, either provide [.on-edit-item] or [.on-select-items] and not both!


  /*
   * Adding [.on-get-items] callback into [sys42.widgets.datagrid._get-items].
   */
  add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._get-items/*/.lambda
    src:x:/../*/_options/*/.on-get-items/*


  /*
   * Adding [.on-header-clicked] callback into [sys42.widgets.datagrid._create-table-widgets] invocation inside of
   * the [oninit] of main datagrid.
   */
  add:x:/../*/return/*/container/*/oninit/*/sys42.widgets.datagrid._create-table-widgets
    src:x:/../*/_options/*/.on-header-clicked


  /*
   * Adding [_pager-widgets] content in between previous and next pager buttons.
   */
  insert-after:x:/../*/return/*/container/*/widgets/**/class/=datagrid-pager/./*/widgets/*/div/*/widgets/*/a/[0,1]
    src:x:/../*/_options/*/_pager-widgets/*


  /*
   * Checking if caller provided an [.on-select-items] callback, and if so, making sure we use it, by adding it
   * into [sys42.widgets.datagrid._select-items].
   *
   * Otherwise, we entirely remove our [sys42.widgets.datagrid._select-items] lambda event.
   */
  if:x:/../*/_options/*/.on-select-items/*

    /*
     * Selection of items is enabled, making sure we add the [.on-select-items] into our [sys42.widgets.datagrid._select-items].
     */
    add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._select-items/*/.lambda
      src:x:/../*/_options/*/.on-select-items/*

  else

    /*
     * Selection of items is disabled, entirely removing the [sys42.widgets.datagrid._select-items] lambda event for widget.
     */
    set:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._select-items


  /*
   * Checking if caller provided an [.on-edit-item] callback, and if so, making sure we use it, by adding it
   * into [sys42.widgets.datagrid._edit-cell-callback].
   * Otherwise, we entirely remove our [sys42.widgets.datagrid._edit-cell-callback] lambda event.
   */
  if:x:/../*/_options/*/.on-edit-item/*

    /*
     * Editing of items should be enabled, making sure we provide the supplied [.on-edit-item] callback to 
     * our [sys42.widgets.datagrid._edit-cell-callback].
     */
    add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._edit-cell-callback/*/.lambda
      src:x:/../*/_options/*/.on-edit-item/*

    /*
     * This property on our main datagrid widget, allows our [sys42.widgets.datagrid._append-items] event, to know it
     * should create inplace edit hyperlinks, and not simply spans.
     */
    add:x:/../*/return/*
      src
        _edit-items:true

  else

    /*
     * Editing of items is turned off, removing widget lambda event entirely.
     */
    set:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._edit-cell-callback


  /*
   * Checking if user wants to disable the "pager footer" widget.
   */
  if:x:/../*/_options/*/_show-pager
    and:x:/../*/_options/*/_show-pager?value.bool
      =:bool:false

    /*
     * Removing our pager widget entirely.
     */
    set:x:/../*/return/*/container/*/widgets/*/container/[1,2]


  /*
   * Forward evaluating class property, [_end] and [_skin] inside of [oninit], in addition to [_page-size] and [class].
   */
  eval-x:x:/../*/return/*/container/*(/class|/_page-size|/oninit/*(/_skin|/sys42.widgets.datagrid._get-items/*/_end))


  /*
   * Returning the datagrid widget back to caller.
   */
  return
    container

      /*
       * Used to track the root datagrid widget, in addition to which page we are currently at in dataset.
       */
      _current-page:0

      /*
       * Size of page. Meaning, number of records to show in datagrid.
       */
      _page-size:x:/../*/_options/*/_page-size?value
      class:datagrid-widget-{0}
        :x:/../*/_options/*/_skin?value


      /*
       * [oninit], to fetch the initial items, create our headers, and include our [_skin] stylesheet.
       */
      oninit

        /*
         * Making sure we include our datagrid specific skin CSS file.
         * [_skin] below is forward evaluated above.
         */
        _skin:x:/../*/_options/*/_skin?value
        include-stylesheet-file:/system42/components/common-widgets/datagrid/media/skins/{0}/{0}.min.css
          :x:/../*/_skin?value

        /*
         * Fetching the initial items to display.
         * [_end] is forward evaluated above.
         */
        sys42.widgets.datagrid._get-items:x:/../*/_event?value
          _start:int:0
          _end:x:/../*/_options/*/_page-size?value.int

        /*
         * Applying the [_items] returned above to invocation that create table header and main body elements.
         */
        add:x:/+/*/_columns
          src:x:/../*/sys42.widgets.datagrid._get-items/*/_items/0/*?name

        /*
         * Notice, this might include [.on-header-clicked] if supplied during creation.
         */
        sys42.widgets.datagrid._create-table-widgets:x:/../*/_event?value
          _columns

        /*
         * Applying the [_items] returned above to databind invocation.
         */
        add:x:/+
          src:x:/../*/sys42.widgets.datagrid._get-items/*/_items
        sys42.widgets.datagrid._append-items:x:/../*/_event?value


      /*
       * Events for datagrid widget.
       */
      events


        /*
         * Select rows in your datagrid.
         *
         * Expects [_arg] being ID of datagrid and [_items] being items that are to be selected.
         * The [.lambda] for this event, is created from the [.on-select-items] lambda callback, specified during creation of datagrid.
         */
        sys42.widgets.datagrid._select-items

          /*
           * First we must make sure this is the datagrid requested by caller to edit items in.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Isolating our "user callback lambda" for clarity.
           */
          add:x:/+
            src:x:/../*/_items
          .lambda
          eval:x:/@.lambda


        /*
         * Invoked when the user has edited a cell's content, and tried to push it to database, by e.g. pressing carriage return.
         *
         * Expects [_arg] being ID of datagrid, [_column] being name of column, [_row] being id of record, and [_value] being new value.
         * Contains the [.on-edit-item] lambda callback supplied when creating datagrid.
         */
        sys42.widgets.datagrid._edit-cell-callback

          /*
           * First we must make sure this is the datagrid requested by caller to edit items in.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * The next [.lambda] lambda contains our [.on-edit-item] callback, supplied when datagrid was created.
           */
          .lambda
          add:x:/+
            src:x:/../*(/_column|/_row|/_value)
          eval:x:/@.lambda

          /*
           * Returning value from above [eval], to signal acceptance or denial of new value to caller.
           */
          return:x:/@eval?value


        /*
         * Invoked when datagrid needs to retrieve rows/items for its data table.
         *
         * The lambda for this event, is created from the [.on-get-items] callback supplied during creation of datagrid.
         */
        sys42.widgets.datagrid._get-items

          /*
           * First we must make sure this is the datagrid requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * This contains the [.on-get-items] lambda callback, supplied during creation of DataGrid.
           */
          .lambda
          add:x:/+
            src:x:/../*(/_start|/_end|/_query)
          eval:x:/@.lambda
          add:x:/+
            src:x:/@eval/*
          return


      widgets


        /*
         * This is our actual datagrid table widget.
         */
        container
          class:datagrid-wrappper
          widgets
            container
              element:table


        /*
         * This widget wraps the paging and filtering parts of our datagrid at the bottom.
         */
        container
          class:datagrid-pager
          widgets
            input
              type:search
              placeholder:Search ...
              onkeydown:@"return p5.sys42_widgets_datagrid_search_onkeydown(event);"
              _onenter

                /*
                 * Searching for items matching search textbox value.
                 */
                get-widget-property:x:/../*/_event?value
                  value
                find-first-ancestor-widget:x:/../*/_event?value
                  _current-page
                eval-x:x:/+/*
                sys42.widgets.datagrid.filter:x:/@find-first-ancestor-widget/*/*?value
                  _query:x:/@get-widget-property/*/*?value

                /*
                 * Selecting all text in search textbox, and setting focus to it.
                 * Avoiding jQuery dependencies.
                 */
                send-javascript:@"p5.$('{0}').el.focus();p5.$('{0}').el.select();"
                  :x:/../*/_event?value

              oninit

                /*
                 * Passing in JavaScript to detect carriage return in search textbox.
                 */
                include-javascript:@"
p5.sys42_widgets_datagrid_search_onkeydown = function (e) {
  if(e.keyCode == 13) {
    p5.$(e.target.id).raise('_onenter');
    return false;
  }
}"
            div
              widgets

                /*
                 * Our "Previous page" button.
                 */
                a
                  href:#
                  role:button
                  class:disabled
                  innerValue:&lt;
                  onclick

                    /*
                     * Invoking event that moves the grid to its previous items, passing in the id of the root datagrid widget.
                     */
                    find-first-ancestor-widget:x:/../*/_event?value
                      _current-page
                    sys42.widgets.datagrid.go-previous:x:/@find-first-ancestor-widget/*/*?value

                /*
                 * Our "Next page" button.
                 */
                a
                  href:#
                  role:button
                  innerValue:&gt;
                  onclick

                    /*
                     * Invoking event that moves the grid to its next items, passing in the id of the root datagrid widget.
                     */
                    find-first-ancestor-widget:x:/../*/_event?value
                      _current-page
                    sys42.widgets.datagrid.go-next:x:/@find-first-ancestor-widget/*/*?value
