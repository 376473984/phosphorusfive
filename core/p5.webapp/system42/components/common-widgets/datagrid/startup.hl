
/*
 * Creates a datagrid extension widget, which shows a table of items.
 *
 * The Ajax Datagrid widget, can either be set into "inline editing" mode, or "row selection" mode, in addition to that you can supply
 * "template columns", which contains widgets as you see fit.
 *
 * Arguments;
 * 
 * [_skin]               - Skin file and class to use. Default value is "default".
 * [_page-size]          - Number of items to display per page in your datagrid. Default value is 10.
 * [_show-pager]         - Allows you to turn off the entire footer part of your datagrid, turning off both paging, and searching.
 * [_pager-widgets]      - Extra widgets, injected between previous and next page buttons.
 *                         By combining this with your own widgets for accomplishing the same, relying upon the API of the datagrid,
 *                         which is really quite extensive, you can entirely implement your own paging and/or searching logic if you wish.
 * [.on-header-clicked]  - Lambda callback evaluated when a header is clicked in your datagrid.
 *                         By default, the user cannot click the headers of the datagrid. However, if you supply this lammbda callback,
 *                         then the headers for your datagrid, will become clickable link buttons, invoking this lambda whenever clicked.
 *                         Your lambda callback, will be evaluated from within the context of the header that was clicked. Meaning, the
 *                         [_event] argument of your header, will be passed into it, allowing you to use [get-widget-property] too figure
 *                         out which column was clicked.
 * [.on-get-items]       - Callback lambda evaluated when the datagrid need more items.
 *                         You must return an [_items] collection here, with one child node,
 *                         for each of your rows, with either a name or a value being the "ID" of your data record.
 *                         Each child node of your item, becomes a column in the datagrid.
 *                         If you wish, you can turn off editing of specific columns and/or cells, by making
 *                         sure your specific cell item contains an [_edit] child, with the value of "false".
 *                         You can also return "template columns" here, passing in a [widgets] child, being a widgets
 *                         collection, allowing you to inject any Ajax widget you wish, into any cell of your datagrid.
 *                         The [widgets] feature of cells, is only possible to use, if you use the datagrid in "inline editing" mode.
 *                         The [.on-get-items] is given at least two argument; [_start] and [_end], in addition to an optional
 *                         argument [_query], being the "filter/search" criteria for your datagrid.
 * [.on-edit-item]       - Callback lambda evaluated whenever some cell's content has been edited.
 *                         This lambda will be given [_row], [_column] and [_value] as arguments. [_row] being the ID of the
 *                         row that was edited, [_column] being the column name, and [_value] being the new value.
 * [.on-select-items]    - Lambda callback evaluated whenever some row is selected. This argument is mutually exclusive with the
 *                         [.on-edit-item], meaning you must only supply one of these lambda callbacks.
 *                         Your [.on-select-items] callback is invoked whenever one or more rows have been selected in yoru datagrid.
 *                         It will be given an [_items] collection, which contains one or more children nodes, where their names
 *                         are the ID(s) of the rows that were selected.
 */
create-event:sys42.widgets.datagrid

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    _skin:default
    _page-size:int:10
    _show-pager:true
    _pager-widgets
    .on-header-clicked
    .on-get-items
    .on-edit-item
    .on-select-items
  _options
  add:x:/../*/_options
    src:x:@"/../*(/"":regex:/^_/""|/"":regex:/^\\./""|/_defaults/*)(!/_defaults!/_options)/$"


  /*
   * Making sure user provided either [.on-edit-item] or [.on-select-items], and not both!
   */
  if:x:/../*/_options/*/.on-select-items/*
    and:x:/../*/_options/*/.on-edit-item/*
    or:x:/../*/_options/*/.on-select-items/*
      not
      and:x:/../*/_options/*/.on-edit-item/*
        not
    throw:Sorry, either provide [.on-edit-item] or [.on-select-items] and not both!


  /*
   * Adding [.on-get-items] callback into [sys42.widgets.datagrid._get-items].
   */
  add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._get-items
    src:x:/../*/_options/*/.on-get-items/*


  /*
   * Adding [.on-header-clicked] callback into [sys42.widgets.datagrid._create-datagrid] invocation inside of
   * the [oninit] of main datagrid.
   */
  add:x:/../*/return/*/container/*/oninit/*/sys42.widgets.datagrid._create-datagrid
    src:x:/../*/_options/*/.on-header-clicked


  /*
   * Adding [_pager-widgets] content in between previous and next pager buttons.
   */
  insert-after:x:/../*/return/*/container/*/widgets/**/class/=datagrid-pager/./*/widgets/*/div/*/widgets/*/a/[0,1]
    src:x:/../*/_options/*/_pager-widgets/*


  /*
   * Checking if caller provided an [.on-select-items] callback, and if so, making sure we use it, by adding it
   * into [sys42.widgets.datagrid.select-items].
   * Otherwise, we entirely remove our [sys42.widgets.datagrid.select-items] lambda event.
   */
  if:x:/../*/_options/*/.on-select-items/*

    /*
     * Selection of items is enabled, making sure we add the [.on-select-items] into our [sys42.widgets.datagrid.select-items].
     */
    add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid.select-items/*/.lambda
      src:x:/../*/_options/*/.on-select-items/*

  else

    /*
     * Selection of items is disabled, entirely removing the [sys42.widgets.datagrid.select-items] lambda event for widget.
     */
    set:x:/../*/return/*/*/events/*/sys42.widgets.datagrid.select-items


  /*
   * Checking if caller provided an [.on-edit-item] callback, and if so, making sure we use it, by adding it
   * into [sys42.widgets.datagrid._edit-item-callback].
   * Otherwise, we entirely remove our [sys42.widgets.datagrid._edit-item-callback] lambda event.
   */
  if:x:/../*/_options/*/.on-edit-item/*

    /*
     * Editing of items should be enabled, making sure we provide the supplied [.on-edit-item] callback to 
     * our [sys42.widgets.datagrid._edit-item-callback].
     */
    add:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._edit-item-callback/*/.lambda
      src:x:/../*/_options/*/.on-edit-item/*

  else

    /*
     * Editing of items is turned off, making sure we delete the [sys42.widgets.datagrid._edit-item-callback], and signal
     * to [sys42.widgets.datagrid._append-items] that it should not create hyperlinks, but rather spans for cell content.
     */
    set:x:/../*/return/*/*/events/*/sys42.widgets.datagrid._edit-item-callback
    set:x:/../*/return/**/sys42.widgets.datagrid._append-items/*/_edit-items?value
      src:bool:false


  /*
   * Checking if user wants to disable the "pager footer" widget.
   */
  if:x:/../*/_options/*/_show-pager
    and:x:/../*/_options/*/_show-pager?value.bool
      =:bool:false

    /*
     * Removing our pager widget entirely.
     */
    set:x:/../*/return/*/container/*/widgets/*/container/[1,2]


  /*
   * Forward evaluating class property, [_end], [_skin] inside [oninit], [_page-size] and [_current-page].
   */
  eval-x:x:/../*/return/*/container/*(/class|/_page-size|/oninit/*(/_skin|/sys42.widgets.datagrid._get-items/*/_end))


  /*
   * Returning the datagrid widget back to caller.
   */
  return
    container

      /*
       * Used to track the root datagrid widget, in addition to which page we are currently at in dataset.
       */
      _current-page:0

      /*
       * Size of page. Meaning, number of records to show in datagrid.
       */
      _page-size:x:/../*/_options/*/_page-size?value
      class:datagrid-widget-{0}
        :x:/../*/_options/*/_skin?value


      /*
       * [oninit], to fetch the initial items, create our headers, and include our [_skin] stylesheet.
       */
      oninit

        /*
         * Making sure we include our datagrid specific skin CSS file.
         * [_skin] below is forward evaluated above.
         */
        _skin:x:/../*/_options/*/_skin?value
        include-stylesheet-file:/system42/components/common-widgets/datagrid/media/skins/{0}/{0}.min.css
          :x:/../*/_skin?value

        /*
         * Fetching the initial items to display.
         * [_end] is forward evaluated above.
         */
        sys42.widgets.datagrid._get-items:x:/../*/_event?value
          _start:int:0
          _end:x:/../*/_options/*/_page-size?value.int

        /*
         * Applying the [_items] returned above to invocation that create table header and main body elements.
         */
        add:x:/+/*/_columns
          src:x:/../*/sys42.widgets.datagrid._get-items/*/_items/0/*?name
        sys42.widgets.datagrid._create-datagrid:x:/../*/_event?value
          _columns

        /*
         * Applying the [_items] returned above to databind invocation.
         */
        add:x:/+
          src:x:/../*/sys42.widgets.datagrid._get-items/*/_items
        sys42.widgets.datagrid._append-items:x:/../*/_event?value


      /*
       * Events for datagrid widget.
       */
      events


        /*
         * Expects [_arg] being ID of datagrid and [_query] being text to search for.
         */
        sys42.widgets.datagrid.search

          /*
           * First we must make sure this is our datagrid.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early.
             */
            return

          /*
           * Making sure we update pager to display the first page.
           */
          set-widget-property:x:/../*/_event?value
            _current-page:0

          /*
           * Storing query in datagrid root widget, if we are given a query.
           * Otherwise, we entirely delete [_query] property on widget.
           */
          if:x:/../*/_query?value
            and:x:/../*/_query?value
              !=:

            /*
             * We have a query, making sure we store query in datagrid main widget.
             */
            set-widget-property:x:/../*/_event?value
              _query:x:/../*/_query?value

          else

            /*
             * We no not have a query, deleting [_query] property from datagrid, and making sure our [_get-items] 
             * invocation does not specify any [_query] parameter.
             */
            delete-widget-property:x:/../*/_event?value
              _query
            set:x:/../*/sys42.widgets.datagrid._get-items/*/_query

          /*
           * Retrieving page size.
           */
          get-widget-property:x:/../*/_event?value
            _page-size

          /*
           * Retrieving previous page's items.
           */
          eval-x:x:/+/*
          sys42.widgets.datagrid._get-items:x:/../*/_event?value
            _start:int:0
            _end:x:/@get-widget-property/*/*?value.int
            _query:x:/../*/_query?value

          /*
           * Clearing out current items from datagrid (tbody widget).
           */
          find-widget:x:/../*/_event?value
            element:tbody
          clear-widget:x:/@find-widget/*/*?value

          /*
           * Disabling previous button.
           */
          find-widget:x:/../*/_event?value
            innerValue:&lt;
            element:a
          sys42.utilities.add-css-classes:x:/@find-widget/*/*?value
            _class:disabled

          /*
           * Applying the [_items] returned above to databind invocation.
           */
          add:x:/+
            src:x:/@sys42.widgets.datagrid._get-items/*/_items
          sys42.widgets.datagrid._append-items:x:/../*/_event?value

          /*
           * Enabling next button, but only if [sys42.widgets.datagrid._get-items] returned a full page.
           */
          if:x:/@sys42.widgets.datagrid._get-items/*/_items/*?count
            =:x:/@get-widget-property/*/*?value.int

            /*
             * Enabling our "next page" widget.
             */
            find-widget:x:/../*/_event?value
              innerValue:&gt;
              element:a
            sys42.utilities.delete-css-classes:x:/@find-widget/*/*?value
              _class:disabled

          else

            /*
             * Disabling our "next page" widget.
             */
            find-widget:x:/../*/_event?value
              innerValue:&gt;
              element:a
            sys42.utilities.add-css-classes:x:/@find-widget/*/*?value
              _class:disabled


        /*
         * Expects [_arg] being ID of datagrid.
         * Databinds the datagrid again.
         */
        sys42.widgets.datagrid.databind

          /*
           * First we must make sure this is our datagrid.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early.
             */
            return

          /*
           * Retrieving current page, number of items per page, and query (filter).
           */
          get-widget-property:x:/../*/_event?value
            _current-page
            _page-size
            _query

          /*
           * Storing currently selected items, if there are any, to make sure we can make them selected again, 
           * after having databound the grid again.
           */
          _selected
          find-widget-like:x:/../*/_event?value
            element:tr
            class:selected
          if:x:/@find-widget-like/*/*?value

            /*
             * There are one or more selected rows in our datagrid.
             * Making sure we add them to our [_selected] collection above, such that we can make sure they stay selected, 
             * also after databinding is done.
             */
            get-widget-property:x:/@find-widget-like/*/*?value
              _row
            add:x:/../*/_selected
              src:x:/@get-widget-property/*/*?value

          /*
           * Checking if we have a zero or negative value in current page, at which case we disable previous button.
           */
          if:x:/../*/get-widget-property/*/*/_current-page?value.int
            <=:int:0

            /*
             * We're at the first page in our datagrid.
             * Making sure we disable the previous button.
             */
            find-widget:x:/../*/_event?value
              innerValue:&lt;
              element:a
            sys42.utilities.add-css-classes:x:/-/*/*?value
              _class:disabled

            /*
             * Checking if value was negative, which might occur if user clicks many times, before Ajax requests
             * are finished, at which case we set it to zero, and return early.
             */
            if:x:/@get-widget-property/*/*/_current-page?value.int
              <:int:0

              /*
               * Oops, we have a negative currrent page.
               * Making sure we set it to zero, before we return "false" to signal that no databind operation actually occurred.
               */
              set-widget-property:x:/../*/_event?value
                _current-page:0
              return:bool:false

          else

            /*
             * Enabling previous button.
             */
            find-widget:x:/../*/_event?value
              innerValue:&lt;
              element:a
            sys42.utilities.delete-css-classes:x:/-/*/*?value
              _class:disabled

          /*
           * Multiplying current page number with number of items, and setting [_start] argument
           * of [sys42.widgets.datagrid._get-items] invocation.
           */
          set:x:/../*/sys42.widgets.datagrid._get-items/*/_start?value
            *:x:/@get-widget-property/*/*/_current-page?value.int
              _:x:/@get-widget-property/*/*/_page-size?value

          /*
           * Adding number of items to [_start], and setting [_end] argument of [sys42.widgets.datagrid._get-items] invocation.
           */
          set:x:/../*/sys42.widgets.datagrid._get-items/*/_end?value
            +:x:/../*/sys42.widgets.datagrid._get-items/*/_start?value.int
              _:x:/@get-widget-property/*/*/_page-size?value

          /*
           * Checking if we have a query
           */
          if:x:/@get-widget-property/*/*/_query?value
            eval-x:x:/+/*/*
            add:x:/../*/sys42.widgets.datagrid._get-items
              src
                _query:x:/../*/get-widget-property/*/2?value

          /*
           * Retrieving current page's items.
           */
          sys42.widgets.datagrid._get-items:x:/../*/_event?value
            _start
            _end

          /*
           * Checking if we're at the end of our dataset.
           * If [.on-get-items] did not return a full page, we're at the end, and there are no more items.
           * Hence, we disable the next button.
           */
          if:x:/@sys42.widgets.datagrid._get-items/*/_items/*?count
            <:x:/@get-widget-property/*/*/_page-size?value.int

            /*
             * No more items, disabling next button.
             */
            find-widget:x:/../*/_event?value
              innerValue:&gt;
              element:a
            sys42.utilities.add-css-classes:x:/@find-widget/*/*?value
              _class:disabled

            /*
             * Checking if this was an empty result set, which might occur if user clicks button several times, or 
             * number of items in database as a whole, is exact modulo of page size.
             *
             * If it is empty, we do not databind the datagrid again, since that would create an empty page.
             * Exception is, if datagrid's page is zero, which might mean user deleted last record, or filtered
             * such that no records should show, which might occur after an edit operation, where there was a filter supplied, etc.
             */
            if:x:/@sys42.widgets.datagrid._get-items/*/_items/*?count
              =:int:0
              and:x:/@get-widget-property/*/*/_current-page?value.int
                !=:int:0

              /*
               * Returning false, to signal that no actual databind operation occurred.
               */
              return:bool:false

          else

            /*
             * Items return from [.on-get-items] was the size of page, which means that there might be more items in dataset as a whole.
             * Hence, we enable the next button.
             */
            find-widget:x:/../*/_event?value
              innerValue:&gt;
              element:a
            sys42.utilities.delete-css-classes:x:/-/*/*?value
              _class:disabled

          /*
           * NOW we can start the actual databind operation of our DataGrid!
           *
           * Clearing out current items from datagrid (tbody widget) first.
           */
          find-widget:x:/../*/_event?value
            element:tbody
          clear-widget:x:/@find-widget/*/*?value

          /*
           * Applying the [_items] returned above to [_append-items] invocation.
           */
          add:x:/+
            src:x:/../*/sys42.widgets.datagrid._get-items/*/_items
          sys42.widgets.datagrid._append-items:x:/../*/_event?value

          /*
           * Making sure we set all previously selected items to selected again, by looping through the [_selected] collection
           * created further up in event, and adding the "selected" CSS class.
           */
          for-each:x:/../*/_selected/*?name
            find-widget:x:/../*/_event?value
              _row:x:/..for-each/*/_dp?value
            sys42.utilities.add-css-classes:x:/-/*/*?value
              _class:selected

          /*
           * Returning success to caller, since datagrid was actually databound.
           */
          return:bool:true


        /*
         * Expects [_arg] being ID of datagrid.
         * Pages the datagrid to its previous page.
         */
        sys42.widgets.datagrid.go-previous

          /*
           * First we must make sure this is our datagrid.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early.
             */
            return

          /*
           * Retrieving current page and number of items per page.
           */
          get-widget-property:x:/../*/_event?value
            _current-page
            _page-size
            _query

          /*
           * Decrementing page by 1, and storing result in [get-widget-property]'s return value above.
           */
          set:x:/../*/get-widget-property/*/*/_current-page?value
            -:x:/../*/get-widget-property/*/*/_current-page?value.int
              _:1

          /*
           * Updating current page, by setting the [_current-page] property on root DataGrid widget.
           */
          set-widget-property:x:/../*/_event?value
            _current-page:x:/@get-widget-property/*/*/_current-page?value

          /*
           * Databinding grid.
           */
          sys42.widgets.datagrid.databind:x:/../*/_event?value


        /*
         * Expects [_arg] being ID of datagrid.
         * Pages the datagrid to its next page.
         */
        sys42.widgets.datagrid.go-next

          /*
           * First we must make sure this is our datagrid.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early.
             */
            return

          /*
           * Retrieving current page and number of items per page.
           */
          get-widget-property:x:/../*/_event?value
            _current-page
            _page-size
            _query

          /*
           * Incrementing page by 1, and storing results in above [get-widget-property]'s result.
           */
          set:x:/@get-widget-property/*/*/_current-page?value
            +:x:/@get-widget-property/*/*/_current-page?value.int
              _:1

          /*
           * Updating current page to property of datagrid root widget.
           */
          set-widget-property:x:/../*/_event?value
            _current-page:x:/@get-widget-property/*/*/_current-page?value

          /*
           * Databinding grid, and if it was unsuccessful, we decrement current page back to what it was again.
           */
          if
            sys42.widgets.datagrid.databind:x:/../*/_event?value
            not
            set:x:/@get-widget-property/*/*/_current-page?value
              -:x:/@get-widget-property/*/*/_current-page?value.int
                _:1
            set-widget-property:x:/../*/_event?value
              _current-page:x:/@get-widget-property/*/*/_current-page?value


        /*
         * Expects [_arg] being ID of datagrid and [_items] being items that are selected.
         */
        sys42.widgets.datagrid.select-items

          /*
           * First we must make sure this is the datagrid requested by caller.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Finding all previously selected items, and "un-selecting" them, by deleting the "selected" CSS class on them.
           */
          find-widget-like:x:/../*/_event?value
            element:tr
            class:selected
          if:x:/@find-widget-like/*/*?value
            sys42.utilities.delete-css-classes:x:/@find-widget-like/*/*?value
              _class:selected

          /*
           * Making sure all [_items] passed in ass argument becomes selected, by adding the "selected" CSS class to them.
           */
          for-each:x:/../*/_items/*?name
            find-widget-like:x:/../*/_event?value
              _row:x:/@_dp?value
            sys42.utilities.add-css-classes:x:/@find-widget-like/*/*?value
              _class:selected

          /*
           * Isolating our "user callback lambda" for clarity.
           */
          add:x:/+
            src:x:/../*/_items
          .lambda
          eval:x:/@.lambda


        /*
         * Returns the row id from a given widget inside of that row.
         */
        sys42.widgets.datagrid.get-selected-items

          /*
           * First we must make sure this is the datagrid requested by caller.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Finding all "tr" widgets with the "selected" class.
           */
          find-widget-like:x:/../*/_arg?value
            element:tr
            class:selected

          /*
           * Looping through these widgets to retrieve their [_row].
           */
          for-each:x:/@find-widget-like/*/*
            get-widget-property:x:/@_dp/#?value
              _row
            add:x:/../*/return/*/_items
              src:x:/@get-widget-property/*/*?value
          return
            _items


        /*
         * Returns the row id from a given widget inside of that row.
         */
        sys42.widgets.datagrid.get-row-id

          /*
           * Sanity check!
           */
          if:x:/../*/_arg?value
            not
            throw:You have to supply a widget ID to this event!

          /*
           * Verifying that this is our datagrid.
           */
          find-first-ancestor-widget:x:/../*/_arg?value
            _current-page
          if:x:/@find-first-ancestor-widget/*/*?value
            !=:x:/../*/_event?value

            /*
             * Not our datagrid, returning early.
             */
            return

          /*
           * Finding "tr" widget from specified [_arg] widget, and returning its [_row] property value.
           */
          find-first-ancestor-widget:x:/../*/_arg?value
            element:tr
            _row
          get-widget-property:x:/@find-first-ancestor-widget/*/*?value
            _row
          return:x:/@get-widget-property/*/*?value


        /*
         * Expects [_arg] being ID of datagrid, [_column] being name of column, [_row] being id of record, and [_value] being new value.
         */
        sys42.widgets.datagrid._edit-item-callback

          /*
           * First we must make sure this is the datagrid requested by caller to edit items in.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * The next [.lambda] lambda contains our [.on-edit-item] callback, supplied when datagrid was created.
           */
          .lambda
          add:x:/+
            src:x:/../*(/_column|/_row|/_value)
          eval:x:/@.lambda
          return:x:/-?value


        /*
         * Starts editing of a single cell in a DataGrid.
         * Expects [_event] being the ID of the widget (hyperlink) that was actually clicked.
         */
        sys42.widgets.datagrid._edit-cell-content

          /*
           * First we must make sure this is the datagrid requested by caller to edit items in.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Fetching column name and innerValue.
           */
          get-widget-property:x:/../*/_hyperlink?value
            _column
            innerValue

          /*
           * Fetching row ID by retrieving parent's parent widget's [_row] value.
           */
          find-first-ancestor-widget:x:/../*/_hyperlink?value
            _row
          get-widget-property:x:/@find-first-ancestor-widget/*/*?value
            _row

          /*
           * Forward evaluating all arguments, before we invoke [_edit-item] event, responsible for creating
           * the edit widget UI.
           */
          eval-x:x:/+/*
          sys42.widgets.datagrid._edit-item:x:/../*/_event?value
            _hyperlink:x:/../*/_hyperlink?value
            _column:x:/../*/get-widget-property/[0,1]/*/*/_column?value
            _value:x:/../*/get-widget-property/[0,1]/*/*/innerValue?value
            _row:x:/@get-widget-property/*/*?value


        /*
         * Expects [_arg] being ID of datagrid and [_items] being items to append to datagrid.
         */
        sys42.widgets.datagrid._append-items

          /*
           * First we must make sure this is the datagrid requested by caller.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Finds "tbody" widget in datagrid for later references, since we'll need to make sure "tr" widgets are children of "tbody".
           */
          find-widget:x:/../*/_event?value
            element:tbody

          /*
           * Set during initialization, defines whether or not editing of items is allowed.
           */
          _edit-items:bool:true
          if:x:/@_edit-items?value.bool
            not

            /*
             * Editing of items is disabled.
             * Removing "a" hyperlink, and injecting a "span" instead.
             * This is done by removing the {@eval} [apply] template, and injecting a static {innerValue} template child instead.
             */
            set:x:/../*/for-each/*/apply/*/template/*/*/*/{@eval}
            add:x:/../*/for-each/*/apply/*/template/*/*
              src
                span
                  {innerValue}:x:?value

            /*
             * Since in-place editing is disabled, we turn on "row selection", in such a way, that it becomes accessible for screen 
             * readers and similar technologies.
             */
            add:x:/../*/for-each/*/create-widget
              src
                role:button
                class:clickable
                tabindex:0
                onkeypress:@"return p5.sys42_widgets_datagrid_on_row_keypress(event);"
                onclick

                  /*
                   * Finding main datagrid widget, which is necessary to pass into [sys42.widgets.datagrid.select-row] as [_arg].
                   */
                  find-first-ancestor-widget:x:/../*/_event?value
                    _current-page

                  /*
                   * Figuring out "row id", and passsing it into [select-rows].
                   */
                  get-widget-property:x:/../*/_event?value
                    _row
                  add:x:/+/*
                    src:x:/@get-widget-property/*/*?value
                  sys42.widgets.datagrid.select-items:x:/@find-first-ancestor-widget/*/*?value
                    _items

            /*
             * Making sure we include the necessary JavaScript to select row with carriage return.
             */
            include-javascript:@"
p5.sys42_widgets_datagrid_on_row_keypress = function (e) {
  if(e.keyCode == 13) {
    p5.$(e.target.id).raise('onclick');
    return false;
  }
}"

          /*
           * Loops through each item in [_items] collection, creating a "tr" widget for each.
           */
          for-each:x:/../*/_items/*

            /*
             * Lambda object for [apply], determining if this is an editable cell, which gets a hyperlink, or a non-editable cell, 
             * resulting in a span.
             */
            _apply-eval
              if:x:/@_dn/#/*/_edit
                and:x:/@_dn/#/*/_edit?value.bool
                  =:bool:false

                /*
                 * Non-editable cell, returning "span" widget with static content.
                 */
                eval-x:x:/+/*/*/innerValue
                return
                  span
                    innerValue:x:/@_dn/#?value

              else-if:x:/@_dn/#/*/widgets

                /*
                 * Custom template column with [widgets] declaration.
                 */
                add:x:/+
                  src:x:/@_dn/#/*/widgets/*
                return

              else

                /*
                 * Editable item, returning "a" (hyperlink) widget with [onclick], allowing for editing cell.
                 * Making sure content of hyperlink becomes "&nbsp;" if no text actually exist.
                 */
                if:x:/../*/_dn/#?value
                  =:

                  /*
                   * Empty content of cell, making sure we default its value to "&nbsp;".
                   */
                  set:x:/@_dn/#?value
                    src:&nbsp;

                eval-x:x:/+/*/*(/innerValue|/_column)
                return
                  a
                    href:#
                    innerValue:x:/@_dn/#?value
                    _column:x:/@_dn/#?name
                    onclick

                      /*
                       * Using global helper active event to actually invoke editing of item.
                       */
                      find-first-ancestor-widget:x:/../*/_event?value
                        _page-size
                      eval-x:x:/+/*
                      sys42.widgets.datagrid._edit-cell-content:x:/@find-first-ancestor-widget/*/*?value
                        _hyperlink:x:/../*/_event?value

            /*
             * [apply] all "td" widgets inside of currently iterated "tr" widget.
             */
            apply:x:/..for-each/*/create-widget/*/widgets
              src:x:/..for-each/*/_dp/#/*
              template
                td
                  widgets
                    {@eval}:x:/..for-each/*/_apply-eval

            /*
             * Checking if we should use name or value as id. If a value is given, we use value, otherwise we use name.
             */
            _id
            if:x:/..for-each/*/_dp/#?value
              set:x:/./-?value
                src:x:/..for-each/*/_dp/#?value
            else
              set:x:/./-2?value
                src:x:/..for-each/*/_dp/#?name

            /*
             * Forward evaluating [parent] and [_row] before we create "tr" widget.
             */
            eval-x:x:/+/*(/parent|/_row)
            create-widget
              parent:x:/../*/find-widget/[0,1]/*/*?value
              _row:x:/..for-each/*/_id?value
              element:tr
              widgets


        /*
         * Expects [_arg] being ID of datagrid, [_column], [_row] and [_hyperlink].
         */
        sys42.widgets.datagrid._edit-item

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Figuring our parent of hyperlink, which is "td" cell, such that we can create our textbox as a child widget of that widget.
           */
          get-parent-widget:x:/../*/_hyperlink?value

          /*
           * Creating a textbox for editing value of entity.
           */
          eval-x:x:/+/*(/parent|/value|/_column|/_row)
          create-void-widget
            element:input
            type:text
            parent:x:/../*/get-parent-widget/*/*?value
            value:x:/../*/_value?value
            _column:x:/../*/_column?value
            _row:x:/../*/_row?value
            onkeydown:@"return p5.widgets_datagrid_key(event);"
            oninit

              /*
               * Making sure textbox gets initial focus.
               */
              send-javascript:@"p5.$('{0}').el.focus();p5.$('{0}').el.select();"
                :x:/../*/_event?value

            /*
             * Making sure we trap [onblur] such that we can delete textbox again.
             */
            onblur

              /*
               * Deleting textbox.
               * Notice, we do not set focus here, since user probably blurred item by setting focus to something else.
               */
              delete-widget:x:/../*/_event?value

            /*
             * Invisible Ajax event, referenced from JavaScript, to delete textbox.
             */
            _onesc

              /*
               * Deleting textbox, and setting focus to hyperlink.
               */
              get-parent-widget:x:/../*/_event?value
              find-widget:x:/-/*/*?value
                element:a
              send-javascript:@"p5.$('{0}').el.focus();"
                :x:/../*/find-widget/*/*?value
              delete-widget:x:/../*/_event?value

            /*
             * Invisible Ajax event, referenced from JavaScript, to delete textbox, and update edited item.
             */
            _onenter

              /*
               * Fetching new value, and notifying [_on-edit] that item has been edited.
               */
              get-widget-property:x:/../*/_event?value
                value
                _column
                _row
              find-first-ancestor-widget:x:/../*/_event?value
                _current-page

              /*
               * Making sure content becomes "&nbsp;" if no new value was actually provided.
               */
              if:x:/../*/get-widget-property/*/0?value
                =:
                set:x:/../*/get-widget-property/*/0?value
                  src:&nbsp;
              eval-x:x:/+/*
              sys42.widgets.datagrid._edit-item-callback:x:/../*/find-first-ancestor-widget/*/*?value
                _value:x:/../*/get-widget-property/*/0?value
                _column:x:/../*/get-widget-property/*/1?value
                _row:x:/../*/get-widget-property/*/2?value

              /*
               * Checking if callback accepted new value
               */
              if:x:/../*/sys42.widgets.datagrid._edit-item-callback?value

                /*
                 * Deleting textbox, setting focus to hyperlink, and updating value of hyperlink.
                 */
                get-parent-widget:x:/../*/_event?value
                find-widget:x:/-/*/*?value
                  element:a
                send-javascript:@"p5.$('{0}').el.focus();"
                  :x:/./-/*/*?value
                set-widget-property:x:/-2/*/*?value
                  innerValue:x:/../*/get-widget-property/*/0?value
                delete-widget:x:/../*/_event?value

          /*
           * Passing in JavaScript to detect ESC and carriage return.
           */
          include-javascript:@"
p5.widgets_datagrid_key = function (e) {
  if(e.keyCode == 27) {
    p5.$(e.target.id).raise('_onesc');
    return false;
  } else if(e.keyCode == 13) {
    p5.$(e.target.id).raise('_onenter');
    return false;
  }
}"


        /*
         * Expects [_arg] being ID of datagrid and [_columns] being column names.
         */
        sys42.widgets.datagrid._create-datagrid

          /*
           * First we must make sure this is the tree requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Creating column headers, by [apply]'ing [_columns] to [create-widget] invocation below.
           */
          if:x:/../*/.on-header-clicked/*

            /*
             * Caller supplied an [.on-header-clicked] lambda callback.
             */
            add:x:/+/**/onclick
              src:x:/../*/.on-header-clicked/*
            apply:x:/../*/create-widget/*/widgets/*/tr/*/widgets
              src:x:/../*/_columns/*
              template
                th
                  widgets
                    a
                      href:#
                      {innerValue}:x:?name
                      onclick
          else
            apply:x:/../*/create-widget/*/widgets/*/tr/*/widgets
              src:x:/../*/_columns/*
              template
                th
                  widgets
                    span
                      {innerValue}:x:?name

          /*
           * Finding table element inside of datagrid main wrapper.
           */
          find-widget:x:/../*/_event?value
            element:table

          /*
           * Forward evaluating [parent], and creating table "thead" element.
           */
          eval-x:x:/+/*/parent
          create-widget
            parent:x:/../*/find-widget/*/*?value
            element:thead
            widgets
              tr
                widgets

          /*
           * Forward evaluating [parent] and creating table "tbody" element.
           */
          eval-x:x:/+/*/parent
          create-widget
            parent:x:/../*/find-widget/*/*?value
            element:tbody
            widgets


        /*
         * Invoked when datagrid needs to retrieve children items for a specific datagrid node.
         * The lambda for this event, is created from the [.on-get-items] callback supplied during creation of datagrid.
         */
        sys42.widgets.datagrid._get-items

          /*
           * First we must make sure this is the datagrid requested by caller to toggle items within.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * This is NOT our datagrid.
             * Returning early, before callback lambda is evaluated.
             */
            return

          /*
           * Notice, the rest of this Active Event is dynamically created according to arguments supplied when
           * creating the datagrid, by invoking [add] to append user supplied lambda callback into body of this lambda.
           * Hence, it might appear to be empty, but it is probably not in fact.
           */


      widgets
        container
          class:datagrid-wrappper
          widgets
            container
              element:table
        container
          class:datagrid-pager
          widgets
            input
              type:search
              placeholder:Search ...
              onkeydown:@"return p5.widgets_datagrid_search_key(event);"
              _onenter

                /*
                 * Searching for items matching search textbox value.
                 */
                get-widget-property:x:/../*/_event?value
                  value
                find-first-ancestor-widget:x:/../*/_event?value
                  _current-page
                eval-x:x:/+/*
                sys42.widgets.datagrid.search:x:/-2/*/*?value
                  _query:x:/../*/get-widget-property/*/*?value

                /*
                 * Selecting all text in search textbox, and setting focus to it.
                 */
                send-javascript:@"p5.$('{0}').el.focus();p5.$('{0}').el.select();"
                  :x:/../*/_event?value
              oninit

                /*
                 * Passing in JavaScript to detect carriage return in search textbox.
                 */
                include-javascript:@"
p5.widgets_datagrid_search_key = function (e) {
  if(e.keyCode == 13) {
    p5.$(e.target.id).raise('_onenter');
    return false;
  }
}"
            div
              widgets
                a
                  href:#
                  class:disabled
                  innerValue:&lt;
                  onclick

                    /*
                     * Invoking event that moves the grid to its previous items, passing in the id of the root datagrid widget.
                     */
                    find-first-ancestor-widget:x:/../*/_event?value
                      _current-page
                    sys42.widgets.datagrid.go-previous:x:/-/*/*?value
                a
                  href:#
                  innerValue:&gt;
                  onclick

                    /*
                     * Invoking event that moves the grid to its next items, passing in the id of the root datagrid widget.
                     */
                    find-first-ancestor-widget:x:/../*/_event?value
                      _current-page
                    sys42.widgets.datagrid.go-next:x:/-/*/*?value
