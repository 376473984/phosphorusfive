/*
 * Contains expression unit tests for system
 */

/*
 * Tests that "identity expression" behaves as expected!
 */
identity
  insert-before:x:
    src
      foo:bar
  if:x:/../0?name
    !=:foo
    or:x:/../0?value
      !=:bar
    throw:@"Assert error, expected [foo:bar], got [{0}]!"
      :x:/../0

/*
 * Tests value expression
 */
value
  _data
  set:x:/-?value
    src:success
  if:x:/../0?value
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?value

/*
 * Tests name expression
 */
name
  _data
  set:x:/-?name
    src:success
  if:x:/../0?name
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/../0?name

/*
 * Tests node expression
 */
node
  _data
  set:x:/-
    src:"foo:bar"
  if:x:/../0?name
    !=:foo
    or:x:/../0?value
      !=:bar
    throw:@"Assert error, expected [foo:bar], got [{0}]!"
      :x:/../0?node.string

/*
 * Tests count expression
 */
count
  _data
    foo1
    foo2
  if:x:/../0/*?count
    !=:int:2
    throw:@"Assert error, expected [2], got [{0}]!"
      :x:/../0/*?count

/*
 * Tests [eval-x] expression that is formatted
 */
eval-x-formatted
  _data
    bar
  eval-x:x:/+
  _result:foo-{0}
    :x:/../*/_data/0?name
  if:x:/../*/_result?value
    !=:foo-bar
    throw:@"Assert error, expected [foo-bar], got [{0}]!"
      :x:/../*/_result?value

/*
 * Tests the elder relative iterator
 */
elder-relative-iterator
  _foo:SUCCESS
  if:x:/@_foo?value
    !=:SUCCESS
    throw:@"Assert error, expected success"

/*
 * Tests the elder relative iterator
 */
elder-relative-iterator-2
  _foo:SUCCESS
  _bar
    _foo
  if:x:/@_foo?value
    !=:SUCCESS
    throw:@"Assert error, expected success"

/*
 * Tests the younger iterator
 */
younger-iterator
  _foo
  _bar
    _foo
  set:x:/--?value
    src:SUCCESS
  if:x:/../0?value
    !=:SUCCESS
    or:x:/../1?value
      !=:SUCCESS
    or:x:/../1/0?value
      !=:SUCCESS
    throw:@"Assert error, expected success"

/*
 * Tests the elder iterator
 */
elder-iterator
  set:x:/0/++?value
    src:SUCCESS
  _foo
  _bar
    _foo
  if:x:/../1?value
    !=:SUCCESS
    or:x:/../2?value
      !=:SUCCESS
    or:x:/../2/0?value
      !=:SUCCESS
    throw:@"Assert error, expected success"
