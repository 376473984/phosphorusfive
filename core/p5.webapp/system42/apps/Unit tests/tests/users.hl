/*
 * Contains unit tests for testing users creationg and deletion
 */


/*
 * Creates a user, and verifies creation is successful.
 * Then deletes the user, and verifies disc is cleaned up.
 */
create-and-p5.auth.users.delete

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo

  // Checking that user exist, and that folder structure is coorectly applied.
  p5.auth.users.list
  p5.auth.roles.list
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role"
    or:x:/@p5.auth.users.list/*/foo-bar
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/temp/
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/documents/private/
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/documents/public/
      not
    or:x:/@p5.auth.roles.list/*/foo-bar-role
      not
    throw:@"Assert error, user folder structure was not created correctly, or role was not correctly retrieved!"

  // Deletes user, and verifies that disc is cleaned up.
  p5.auth.users.delete:foo-bar
  p5.auth.users.list
  if:x:/-/*/foo-bar
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/
    throw:@"Assert error, user wasn't correctly deleted!"


/*
 * Creates a user, with settings, and verifies that settings is correctly applied.
 */
p5.auth.users.create-with-settings

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo
    foo1:bar1
      foo2:bar2

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1
      foo2:bar2"
    throw:@"Assert error, user settings was not correctly applied!"

  // Deletes user.
  p5.auth.users.delete:foo-bar


/*
 * Creates a user, modifies user's settings, and verifies that settings is correctly changed.
 */
modify-user-settings

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo

  // Modifying user's settings.
  p5.auth.users.edit:foo-bar
    foo1:bar1
      foo2:bar2
    howdy
      world

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1
      foo2:bar2
    howdy
      world"
    throw:@"Assert error, user settings was not correctly applied!"

  // Modifying user's settings.
  p5.auth.users.edit:foo-bar
    foo1:bar1

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1"
    throw:@"Assert error, user settings was not correctly applied!"

  // Modifying user's settings, removing all settings.
  p5.auth.users.edit:foo-bar
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role"
    throw:@"Assert error, user settings was not correctly deleted!"

  // Deletes user.
  p5.auth.users.delete:foo-bar


