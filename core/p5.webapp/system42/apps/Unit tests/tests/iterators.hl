/*
 * Contains iterator unit tests for system
 */

/*
 * Test the reference iterator
 */
reference
  _data:node:
  set:x:/-/#?name
    src:foo
  set:x:/-2/#?value
    src:bar
  if:x:/../0/#?name
    !=:foo
    or:x:/../0/#?value
      !=:bar
    throw:@"Assert error, expected [foo:bar], got [{0}]!"
      :x:/../0/#

/*
 * Test the range iterator
 */
range
  _out
  _data
    foo1
    foo2
    foo3
    foo4
  add:x:/-2
    src:x:/./-/*/[1,3]?name
  if:x:/-3
    !=:node:@"_out
  foo2
  foo3"
    throw:@"Assert error, expected [foo2foo3], got [{0}]!"
      :x:/././-2?value

/*
 * Test the descendant iterator
 */
descendant
  _out
  _data
    foo1
      foo2
        foo3
      foo4
        foo5
    foo6
      foo7
  add:x:/-2
    src:x:/./-/**?name
  if:x:/-3
    !=:node:@"_out
  foo1
  foo2
  foo3
  foo4
  foo5
  foo6
  foo7"
    throw:@"Assert error, expected [foo1foo2foo3foo4foo5foo6foo7], got [{0}]!"
      :x:/././-2?value

/*
 * Test the children iterator
 */
children
  _out
  _data
    foo1
      foo2
        foo3
    foo6
  add:x:/-2
    src:x:/./-/*?name
  if:x:/-3
    !=:node:@"_out
  foo1
  foo6"
    throw:@"Assert error, expected [foo1foo6], got [{0}]!"
      :x:/././-2?value

/*
 * Test the modulo iterator
 */
modulo
  _out
  _data
    foo1
    foo2
    foo3
    foo4
  add:x:/-2
    src:x:/./-/*/%2?name
  if:x:/-3
    !=:node:@"_out
  foo2
  foo4"
    throw:@"Assert error, expected [foo2foo4], got [{0}]!"
      :x:/././-2?value

/*
 * Test the named iterator
 */
named
  _data
    foo1
    foo2
    foo3
    foo4
  set:x:/-?value
    src:x:/./-/*/foo2?name
  if:x:/-2?value
    !=:foo2
    throw:@"Assert error, expected [foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the named ancestor iterator
 */
ancestor
  _data
    foo1
      foo2
        foo3
          foo4
  set:x:/-?value
    src:x:/./-/**/foo4/..foo1?name
  if:x:/-2?value
    !=:foo1
    throw:@"Assert error, expected [foo1], got [{0}]!"
      :x:/././-2?value

/*
 * Test the number child iterator
 */
numbered-child
  _data
    foo1
    foo2
    foo3
    foo4
  set:x:/-?value
    src:x:/./-/2?name
  if:x:/-2?value
    !=:foo3
    throw:@"Assert error, expected [foo3], got [{0}]!"
      :x:/././-2?value

/*
 * Test the parent iterator
 */
parent
  _data
    foo1
      foo2
        foo3
          foo4
  set:x:/-?value
    src:x:/./-/**/foo4/./.?name
  if:x:/-2?value
    !=:foo2
    throw:@"Assert error, expected [foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the left-shift iterator
 */
left-shift
  _out
  _data
    foo1
      foo2
        foo3
          foo4
        foo5
          foo6
      foo7
  add:x:/-2
    src:x:/./-/**/foo7/<|/./-/**/foo7/</<|/./-/**/foo7/</</<|/./-/**/foo7/</</</<?name
  if:x:/-3
    !=:node:@"_out
  foo6
  foo5
  foo4
  foo3"
    throw:@"Assert error, expected [foo7foo6foo5foo4], got [{0}]!"
      :x:/././-2?value

/*
 * Test the right-shift iterator
 */
right-shift
  _out
  _data
    foo1
      foo2
        foo3
          foo4
        foo5
          foo6
      foo7
  add:x:/-2
    src:x:/./-/0|/./-/0/>|/./-/0/>/>|/./-/0/>/>/>|/./-/0/>/>/>/>|/./-/0/>/>/>/>/>|/./-/0/>/>/>/>/>/>?name
  if:x:/-3
    !=:node:@"_out
  foo1
  foo2
  foo3
  foo4
  foo5
  foo6
  foo7"
    throw:@"Assert error, expected [foo1foo2foo3foo4foo5foo6foo7], got [{0}]!"
      :x:/././-2?value

/*
 * Test the sibling iterator
 */
sibling
  _out
  _data
    foo1
    foo2
    foo3
    foo4
    foo5
    foo6
    foo7
  add:x:/-2
    src:x:/./-/0|/./-/0/+|/./-/3/-|/./-/6/+4|/./-/0/-3?name
  if:x:/-3
    !=:node:@"_out
  foo1
  foo2
  foo3
  foo4
  foo5"
    throw:@"Assert error, expected [foo1foo2foo3foo4foo5], got [{0}]!"
      :x:/././-2?value

/*
 * Test the value iterator for simple value
 */
value-simple
  _data
    foo1:bar1
    foo2:bar2
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*/=bar2?name
  if:x:/-2?value
    !=:foo2
    throw:@"Assert error, expected [foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the value iterator for value "like" expression
 */
value-like-string
  _data
    foo1:bar1
    foo2:bar2
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*/=~r2?name
  if:x:/-2?value
    !=:foo2
    throw:@"Assert error, expected [foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the value iterator for empty value "like" expression
 */
value-like-empty-null
  _out
  _data
    foo1
    foo2:
    foo3:bar3
  add:x:/-2
    src:x:/./-/*/=~?name
  if:x:/-3
    !=:node:@"_out
  foo1
  foo2"
    throw:@"Assert error, expected [foo1foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the value iterator for escaped value "like" expression
 */
value-like-escaped
  _data
    foo1:foo1
    foo2:~
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*/=\~?name
  if:x:/-2?value
    !=:foo2
    throw:@"Assert error, expected [foo2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the name iterator for "like" comparison
 */
name-like
  _data
    foo1:bar1
    foo2:bar2
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*/~oo2?value
  if:x:/-2?value
    !=:bar2
    throw:@"Assert error, expected [bar2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the name iterator for "empty" comparison
 */
name-empty
  _data
    foo1:bar1
    :bar2
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*//?value
  if:x:/-2?value
    !=:bar2
    throw:@"Assert error, expected [bar2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the name iterator for "empty" comparison
 */
name-like-escaped
  _data
    foo1:bar1
    ~:bar2
    foo3:bar3
  set:x:/-?value
    src:x:/./-/*/\~?value
  if:x:/-2?value
    !=:bar2
    throw:@"Assert error, expected [bar2], got [{0}]!"
      :x:/././-2?value

/*
 * Test the distinct name iterator
 */
distinct-name
  _out
  _data
    foo1:su
    foo1:error
    foo2:cc
    foo2:error
    foo3:ess
  add:x:/-2
    src:x:/./-/*/$?value
  if:x:/-3
    !=:node:@"_out
  :su
  :cc
  :ess"
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/././-3?node.string

/*
 * Test the distinct value iterator
 */
distinct-value
  _out
  _data
    su:foo1
    error:foo1
    cc:foo2
    error:foo2
    ess:int:4
  add:x:/-2
    src:x:/./-/*/=$?name
  if:x:/-3
    !=:node:@"_out
  su
  cc
  ess"
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/././-3

/*
 * Test an escaped iterator
 */
escaped-iterator
  _data
    /:success
  set:x:/-?value
    src:x:/./-/*/\/?value
  if:x:/-2?value
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/././-2?value

/*
 * Test an iterator created as a single line string
 */
string-literal-iterator
  _data
    /xx/:success
  set:x:/-?value
    src:x:@"/./-/*/""/xx/""?value"
  if:x:/-2?value
    !=:success
    throw:@"Assert error, expected [success], got [{0}]!"
      :x:/././-2?value
