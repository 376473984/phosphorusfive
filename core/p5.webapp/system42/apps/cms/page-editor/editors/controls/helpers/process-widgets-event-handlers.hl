
/*
 * Given a node [_node] by reference, will loop through
 * all children nodes, assuming they're either [void], [literal]
 * or [container] nodes, renaming all event handlers [onXXX] of those
 * nodes, by prepending an underscore ("_") in front of their names,
 * such that no events for widgets are messing up WYSIWYG design surface.
 *
 * In addition, it will add an [onclick] event handler, if [_children-selectable]
 * is true, to all children nodes of given [_node], that selects the widget in
 * the WYSIWYG design surface.
 *
 * In addition, for all children nodes of [_node], that have the attribute 
 * [data-usercontrol], it will add up logic inside of its [oninit] event handler,
 * that recursively calls this file, with [_children-selectable] being false,
 * to "late bounded" remove all event handlers of also usercontrols.
 *
 * All [oninit] children nodes of children of [_node], that have the attribute
 * [data-usercontrol], will *not* have their [oninit] node renamed, to ensure
 * that usercontrols are being rendered, at least as far as possible, the way they
 * should be rendered, also in WYSIWYG design surface.
 *
 * In addition, it disables all "input", "select" and "textarea" HTML elements, to
 * make it impossible to edit these inline in the WYDIWYG surface, to not confuse the
 * editor in any ways
 */




/*
 * Looping through each child node in given lambda, assuming it's a widget node declaration,
 * such that we can remove all ajax event handlers. In addition, if [_children-selectable] is
 * true, it will add an [onclick] that allows widget to be selectable in WYSIWYG design surface
 */
for-each:x:/../*/_node/#/*


  /*
   * Checking if this is a user control, and if so, making sure we keep
   * the [oninit] event, to allow rendering its content on WYSIWYG surface,
   * while also modifying the [oninit] slightly, such that none of its dynamically loaded widgets
   * have their events tied up. This is done by modifying the [oninit] event
   * of the [container] wrapping the usercontrol, such that after [select-data]
   * has been evaluated, but before the controls are created, all [onXXX] events
   * of [literal]/[container]/[void] are entirely removed.
   * 
   * The [_design-time-remover] is added, such that we can remove this logic, when
   * design time data is requested by main Page editor, to be saved into database.
   */
  if:x:/..for-each/*/_dp/#/*/data-usercontrol
    and:x:/..for-each/*/_dp/#?name
      =:container
      or:x:/..for-each/*/_dp/#?name
        =:create-container-widget

    /*
     * This is a usercontrol, either directly embedded on page, or indirectly through another
     * usercontrol. Slightly modifying its [oninit], but making sure every
     * single event handler, of every single child widget, created as a consequence of 
     * the [oninit] being evaluated, is removed, except for any "nested" usercontrols' 
     * [oninit] event handlers. This is necessary to make sure usercontrol is being rendered in
     * design WYSIWYG surface, the same way it will be shown on the resulting page, but without
     * its widgets' ajax events hooked up
     */
    insert-before:x:/..for-each/*/_dp/#/*/oninit/*/eval
      src

        /*
         * This next node is here such that we can "undo" the modifications to the [oninit] event handler
         * of usercontrols when page is being saved
         */
        _design-time-remover

        /*
         * Making sure we recursively call "self" for each nested usercontrol inside of current usercontrol,
         * but this time, such that no children widgets of usercontrol can be selected, such that all inner
         * widgets of a usercontrol also have their ajax events "washed" or "processed" to avoid ajax events
         * on widgets firing as user navigates page
         */
        set:x:/+/*/_node?value
          src:x:/../*/select-data
        sys42.execute-lisp-file:/system42/apps/cms/page-editor/editors/controls/helpers/process-widgets-event-handlers.hl
          _node
          _children-selectable:bool:false

  /*
   * Then renaming all event handlers of currently iterated widget, except the [oninit],
   * which was processed further up, first finding "near match"
   */
  for-each:x:/..for-each/*/_dp/#/*/~on(!/oninit)

    /*
     * Then refining our match, to give only exact matches
     */
    if
      fetch:x:/0/0?value
        index-of:x:/..for-each/*/_dp/#?name
          src:on
      =:int:0

      /*
       * This is an event handler, prepending its name with an underscore ("_"), to
       * avoid having it firing as user navigates page
       */
      set:x:/..for-each/*/_dp/#?name
        src:_{0}
          :x:/..for-each/*/_dp/#?name

  /*
   * Then adding [onclick] event handlers for currently iterated widget, to
   * allow widget to be selected by clicking it in WYSIWYG design surface
   */
  if:x:/../*/_children-selectable?value
    add:x:/..for-each/*/_dp/#
      src
        onclick

          /*
           * Invoking Active Event that selects widget in design surface. If this
           * Active Event returns true, it means a widget was selected, otherwise
           * it was the previously selected widget that was clicked, making the widget
           * become "unselected", resulting in no widgets being selected.
           */
          sys42.wysiwyg-controls.select-widget:x:/../*/_event?value
          if:x:/-?value

            /*
             * Widget was selected. Making sure we set the [select] dropdown
             * box that allows selecting widgets, to the widget that was just selected
             */
            sys42.wysiwyg-controls.apply-select-widget-dropdown:x:/../*/_event?value
          else

            /*
             * Widget was "unselected", making sure our "select widget" dropdown blox
             * is set to "no selection".
             */
            sys42.wysiwyg-controls.apply-select-widget-dropdown:_default

  /*
   * Then recursively calling "self", with current iterated widget's children widgets,
   * if any
   */
  if:x:/..for-each/*/_dp/#/*/widgets

    /*
     * Setting [_node] argument to recursive invocation to [widgets] node from 
     * currently iterated child of [_node]
     */
    set:x:/+2/*/_node?value
      src:x:/..for-each/*/_dp/#/*/widgets

    /*
     * "Forward evaluating" [_children-selectable] of recursive invocation, to pass
     * in whatever we were given
     */
    eval-x:x:/+/*/_children-selectable
    sys42.execute-lisp-file:/system42/apps/cms/page-editor/editors/controls/helpers/process-widgets-event-handlers.hl
      _node
      _children-selectable:x:/../*/_children-selectable?value
