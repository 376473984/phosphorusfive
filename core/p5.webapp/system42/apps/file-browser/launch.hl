
/*
 * Main entry point for file browser. If there's a value in session
 * called "sys42.download-file", then that file will be directly 
 * downloaded. If not, then file browser will start . This is
 * to let the file browser allow for downloading files by simply doing
 * a "[reload-location] invocation
 */


get-session-value:sys42.download-file
if:x:/-/*?value

  /*
   * We have a file to download, figuring out what type of Content-Type
   * we should serve it as
   */
  sys42.get-content-type:x:/../*/get-session-value/*?value
  set-http-header:Content-Type
    src:x:/./-?value

  // Figuring out filename without path
  split:x:/../*/get-session-value/*?value
    =:/
  set-http-header:Content-Disposition
    src:attachment; filename={0}
      :x:/././-/0/-?name

  // Clearing session value
  set-session-value:sys42.download-file

  // Returning file
  echo-file:x:/../*/get-session-value/*?value

else

  // There were no files to download

  /*
   * Making sure we start up in "default directory", unless user already
   * has another directory selected. In addition we're making sure that
   * the system won't start inside a directory the user does not have
   * access to
   */
  whoami
  get-session-value:sys42.current-folder
  if:x:/..else/*/get-session-value/*?value
    not
    or:x:/..else/*/whoami/*/role?value
      !=:root
      and:x:/..else/*/get-session-value/*/"=~/users/{0}/documents/"
        :x:/..else/*/whoami/*/username?value
        not

    /*
     * Either there was no current directory, or the current directory
     * was a directory that the user did not have access to. Therefor
     * we set the "current folder" to the user's "Home" directory
     */
    set-session-value:sys42.current-folder
      src:/users/{0}/documents/
        :x:/..else/*/whoami/*/username?value

  // Starting the actual file-browser implementation
  sys42.execute-lisp-file:/system42/apps/file-browser/file-browser.hl



/*
 * Responsible for creating the Active Event that zips a folder
 * into user's "temp" folder, and returns the full relative filename
 * of zip file after zipping it
 */
create-protected-event:sys42.zip-window

  /*
   * Asks user if he or she wants to associate a password with zip file created,
   * making sure we pass in the foldername of folder to zip and zip file to zip to
   */
  set:x:/../*/sys42.wizard-window/*/_onok/**/_source?value
    src:x:/../*/_arg?value
  set:x:/../*/sys42.wizard-window/*/_onok/**/_destination?value
    src:x:/../*/_to?value
  add:x:/../*/sys42.wizard-window/*/_onok/*/else
    src:x:/../*/_onok/*


  /*
   * Using "Modal Wizard" dialogue to retrieve zip password from user
   */
  sys42.wizard-window
    _header:Supply a password for zip file
    _body:@"If you supply a password for your zip file, then it will be encrypted with 256 bits AES encryption, using your password
as the key. If you do not supply a password, then your zip file will not be encrypted, and easily opened by anyone who have access to it"
    _widgets
      password:password
        label:Password
        placeholder:Supply password ...
        autocomplete:off
      password:password-repeat
        label:Repeat
        placeholder:Repeat password ...
        autocomplete:off
    _onok

      // Checking that passwords matches
      if:x:/../*/password?value
        !=:x:/../*/password-repeat?value

        /*
         * Passwords did not match
         */
        set:x:/..?value
          src:Passwords did not match!!
        send-javascript:@"$('#password').focus().select();"
      else

        /*
         * Passwords did match
         */

        // Source folder and destination file
        _source
        _destination

        // zipping folder
        zip:x:/..else/*/_source?value
          to:x:/..else/*/_destination?value
          password:x:/../*/password?value

        // Making sure we return "success" to Wizard Window, 
        // such that modal dialogue can be successfully closed
        set:x:/..?value
          src:bool:true


/*
 * Responsible for creating the Active Event that unzips a file,
 * asking the user to supply his AES password first
 *
 * Arguments;
 * [_arg] or value - Path, or expression leading to path, declaring which file you wish to unzip
 * [_to]           - Path to where you wish to have your unzipped files and folders appear
 * [_onok]         - Lambda callback evaluated when files are successfully unzipped
 *
 * There can only be one instance of this window at the time on page
 */

create-protected-event:sys42.unzip-window

  /*
   * Asks the user for his password to unzip the file
   */
  set:x:/../*/sys42.wizard-window/*/_onok/*/_source?value
    src:x:/../*/_arg?value
  set:x:/../*/sys42.wizard-window/*/_onok/*/_destination?value
    src:x:/../*/_to?value
  add:x:/../*/sys42.wizard-window/*/_onok
    src:x:/../*/_onok/*


  /*
   * Using "Modal Wizard Window" to retrieve unzip password from user
   */
  sys42.wizard-window
    _header:Supply password to unzip file
    _body:@"If your zip file was packed with a password, you must use the same password to decrypt it. 
If not, you can leave the password field blank"
    _widgets
      password:password
        label:Password
        placeholder:Supply password ...
        autocomplete:off
    _onok

      _source
      _destination

      // zipping folder
      unzip:x:/../*/_source?value
        to:x:/../*/_destination?value
        password:x:/../*/password?value

      // Making sure we return "success" to "Wizard Window", 
      // such that modal dialogue can be successfully closed
      set:x:/..?value
        src:bool:true


