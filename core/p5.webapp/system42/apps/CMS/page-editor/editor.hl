/*
 * Creates the toolbar for the Page editor.
 *
 * Expects [_editor] and [_id] being the specialized editor for page type, and the id of page edited.
 */

/*
 * Creating editing widget,which consists of our "specialized editor surface", in addition to some buttons,
 * such as "Save", "View page", "Delete" etc ...
 */
create-widget
  parent:cms-page-editor-surface
  widgets


    /*
     * Custom editor surface.
     *
     * This is where the "specialized editor" is loaded, which depends upoon what type of page this is.
     */
    container:cms-specialized-editor-surface

      /*
       * Custom events for specialized editor surface widget.
       */
      events

        /*
         * Returns ID of specialized editor surface widget.
         */
        sys42.cms.get-specialized-editor-surface
          return:x:/../*/_event?value


    /*
     * Save, Preview and Delete button wrapper
     */
    container
      class:col-md-12 text-right prepend-top
      widgets
        container
          class:btn-group
          widgets


            /*
             * Save button
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-floppy-save""></span> Save"
              class:btn btn-default diffuse
              onclick
                sys42.save-edited-page


              /*
               * Lambda events for "Save" button
               */
              events


                /*
                 * Saves currently edited page
                 */
                sys42.save-edited-page

                  /*
                   * Retrieving currently edited page, and appending all "common values" into [update-data].
                   */
                  sys42.cms.get-currently-edited-page
                  select-data:x:@"/*/*/p5.page/""={0}"""
                    :x:/../*/sys42.cms.get-currently-edited-page?value
                  add:x:/../*/update-data/*/*
                    src:x:/../*/select-data/*/*(/name|/template|/role)

                  /*
                   * Retrieving specialized editor's data for page, and appending all 
                   * "specialized page editor's values" into [update-data].
                   */
                  sys42.get-page-editor-data
                  add:x:/../*/update-data/*/*
                    src:x:/../*/sys42.get-page-editor-data/*

                  /*
                   * Updating page in p5.data database.
                   */
                  update-data:x:@"/*/*/p5.page/""={0}"""
                    :x:/../*/sys42.cms.get-currently-edited-page?value
                    src
                      p5.page

                  /*
                   * Providing feedback to user.
                   */
                  sys42.windows.info-tip:Page '{0}' was successfully saved.
                    :x:/../*/select-data/*/*/name?value

                  /*
                    * Making sure we set focus to "select page dropdown" if user closes dialogue, without
                    * pressing "OK".
                    */
                  send-javascript:@"$('#cms-select-page').focus().select();"


            /*
             * "Save as" button.
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-floppy-save""></span> Save as ..."
              class:btn btn-default diffuse
              onclick

                /*
                 * Getting name and URL of page, such that we can use it as basis for new name and URL.
                 */
                sys42.cms.get-currently-edited-page
                select-data:x:@"/*/*/p5.page/""={0}"""
                  :x:/../*/sys42.cms.get-currently-edited-page?value

                /*
                 * Forward evaluating expressions inside of [_widgets] below
                 */
                eval-x:x:/+/*/*/*/*/*/value|/+/*/_onok/*/_old-page
                sys42.windows.modal
                  _header:Supply name and URL of new page
                  _widgets
                    div:new-page-name-wrp
                      class:form-group
                      widgets
                        label
                          for:new-page-name
                          class:control-label
                          innerValue:Page name
                        input:new-page-name
                          type:text
                          class:form-control
                          placeholder:Name of page ...
                          value:{0} - copy
                            :x:/../*/select-data/*/*/name?value
                    div:new-page-url-wrp
                      class:form-group
                      widgets
                        label
                          for:new-page-url
                          class:control-label
                          innerValue:Page URL
                        input:new-page-url
                          type:url
                          class:form-control
                          placeholder:URL of page ...
                          value:{0}-copy
                            :x:/../*/select-data/*?value
                  _onclose

                    /*
                     * Making sure we set focus to "select page dropdown" if user closes dialogue, without
                     * pressing "OK".
                     */
                    send-javascript:@"$('#cms-select-page').focus().select();"
                  _onok

                    /*
                     * Will contain the database id of old page
                     */
                    _old-page:x:/../*/select-data/*?value

                    /*
                     * Getting the new page's name and URL
                     */
                    get-widget-property:new-page-name
                      value
                    get-widget-property:new-page-url
                      value

                    /*
                     * Making sure supplied name does not exist from before
                     */
                    select-data:x:@"/*/*/p5.page/""={0}"""
                      :x:/../*/get-widget-property/[1,2]/*/*?value
                    if:x:/../*/select-data/[0,1]/*?count
                      >:int:0

                      /*
                       * Page exists from before, alerting user, and returning early, without setting 
                       * the "close modal window flag".
                       */
                      sys42.add-css-classes:new-page-url-wrp
                        _class:has-error
                      send-javascript:@"$('#new-page-url').focus().select();"
                      return:bool:false

                    /*
                     * Getting page data, and saving as a new object in database
                     */
                    sys42.get-page-editor-data

                    /*
                     * Then making sure we select old page, and replace [name] and 
                     * [url] (which is ID of database object), in addition to new data,
                     * before saving as new object in database
                     */
                    select-data:x:@"/*/*/p5.page/""={0}"""
                      :x:/../*/_old-page?value

                    /*
                     * Changing id (URL of page) to new URL, in addition to changing name of page.
                     */
                    set:x:/../*/select-data/[1,2]/*?value
                      src:x:/../*/get-widget-property/[1,2]/*/*?value
                    set:x:/../*/select-data/[1,2]/*/*/name?value
                      src:x:/../*/get-widget-property/[0,1]/*/*?value

                    /*
                     * Then removing all items from [select-data] that also exists in [sys42.get-page-editor-data].
                     */
                    for-each:x:/../*/select-data/[1,2]/*/*
                      if:x:@"/../*/sys42.get-page-editor-data/*/""{0}"""
                        :x:/..for-each/*/_dp/#?name
                        set:x:/..for-each/*/_dp/#

                    /*
                     * Adding everything from [sys42.get-page-editor-data] into [select-data].
                     */
                    add:x:/../*/select-data/[1,2]/*
                      src:x:/../*/sys42.get-page-editor-data/*

                    /*
                     * Now we can save new page to database, which we do by simply adding everything from
                     * [select-data] above into [insert-data], since [select-data] (second invocation) now
                     * should contain all the page data for our new page, including the new URL and name.
                     */
                    add:x:/../*/insert-data
                      src:x:/../*/select-data/[1,2]/*
                    insert-data

                    /*
                     * Then we need to "refresh editor", but first, setting "edited page" to
                     * the page we just saved.
                     */
                    sys42.cms.set-currently-edited-page:x:/../*/get-widget-property/[1,2]/*/*?value


                    /*
                     * Repopulating select page dropdown, and starts editor.
                     */
                    sys42.cms.populate-select-page
                    sys42.cms.edit-page


            /*
             * "Download" page button.
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-cloud-download""></span> Download"
              class:btn btn-default diffuse
              onclick
                sys42.cms.download-page


              /*
               * Lambda events for "Download" button.
               */
              events


                /*
                 * Downloads currently edited page, to enable sharing.
                 */
                sys42.cms.download-page

                  /*
                   * Getting currently edited page from database.
                   */
                  sys42.cms.get-currently-edited-page
                  select-data:x:@"/*/*/p5.page/""={0}"""
                    :x:/../*/sys42.cms.get-currently-edited-page?value

                  /*
                   * Used temporary to hold lambda content for page.
                   */
                  _page

                  /*
                   * Adding page's content into [_content] above.
                   */
                  eval-x:x:/+/*/*
                  set:x:/@_page?value
                    src:x:/../*/sys42.cms.get-currently-edited-page?value
                  add:x:/@_page
                    src:x:/../*/select-data/*/*
                  set:x:/@_page?name
                    src:p5.page
                  save-file:~/temp/page.hl
                    src:x:/../*/p5.page
                  sys42.cms.download-file:~/temp/page.hl
                    _file-type:"x-application/Hyperlambda; charset=utf-8"


            /*
             * Preview button
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-eye-open""></span> View page"
              class:btn btn-default diffuse
              onclick

                /*
                 * Getting currently edited page, and showing it in a JavaScript popup window.
                 */
                sys42.cms.get-currently-edited-page
                send-javascript:@"window.open('{0}', '_blank');"
                  :x:/./-?value

                /*
                  * Making sure we set focus to "select page dropdown" if user closes dialogue, without
                  * pressing "OK".
                  */
                send-javascript:@"$('#cms-select-page').focus().select();"


            /*
             * Settings for page button.
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-wrench""></span> Settings ..."
              class:btn btn-default diffuse
              onclick

                /*
                 * Retrieving page properties, and using a wizard window to allow user to change them.
                 */
                sys42.cms.get-currently-edited-page
                select-data:x:@"/*/*/""={0}"""
                  :x:/@sys42.cms.get-currently-edited-page?value

                /*
                 * Making sure we first add [name], before we add [url] and the finally the last properties,
                 * to have some intuitive order of [_data] according to "importance".
                 */
                add:x:/../*/sys42.windows.wizard/*/_data
                  src:x:/@select-data/*/*/name
                add:x:/../*/sys42.windows.wizard/*/_data
                  src:@"url:{0}"
                    :x:/../*/sys42.cms.get-currently-edited-page?value
                add:x:/../*/sys42.windows.wizard/*/_data
                  src:x:/@select-data/*/*(/template|/role)

                /*
                 * Making sure we change the [template] data segment to a "drop down selection" type
                 * of [_data] segment, by appending our choices to it as [_choices].
                 * This is done by fetching all files from "/system42/apps/CMS/page-templates/", and
                 * using these as choices for user.
                 */
                list-files:@CMS/page-templates/
                  filter:hl
                for-each:x:/-/*?name
                  split:x:/..for-each/*/_dp?value
                    =:/
                    =:.
                  add:x:/./+/*/*
                    src:@"{0}:{1}"
                      :x:/..for-each/*/split/0/-2?name
                      :x:/..for-each/*/_dp?value
                add:x:/++/_data/*/template
                  src
                    _choices

                /*
                 * Making sure we change the [role] data segment to a "drop down selection" type
                 * of [_data] segment, by appending our choices to it as [_choices].
                 * This is done by fetching all distinct user roles, in addition to appending a 
                 * static "empty" role (no restrictions for access).
                 */
                list-roles
                for-each:x:/-/*?name
                  add:x:/./+/*/*
                    src:@"{0}:{0}"
                      :x:/..for-each/*/_dp?value
                add:x:/++/_data/*/role
                  src
                    _choices

                /*
                 * Showing actual wizard window.
                 */
                sys42.windows.wizard
                  _header:Settings
                  _data
                  _onclose

                    /*
                     * Making sure we set focus to "select page dropdown" if user closes dialogue, without
                     * pressing "OK".
                     */
                    send-javascript:@"$('#cms-select-page').focus().select();"
                  _onok

                    /*
                     * Selecting currently edited page.
                     */
                    sys42.cms.get-currently-edited-page
                    select-data:x:@"/*/*/""={0}"""
                      :x:/@sys42.cms.get-currently-edited-page?value
                    _old-name:x:/-/*/*/name?value
                    eval-x:x:/-

                    /*
                     * Checking if user changed URL, at which point we must check that URL does not exist from before.
                     */
                    if:x:/../*/_data/*/url?value
                      !=:x:/@sys42.cms.get-currently-edited-page?value

                      /*
                       * User changed URL, making sure new URL does not exist from before.
                       */
                      if
                        select-data:x:@"/*/*/""={0}""?count"
                          :x:/../*/_data/*/url?value
                        !=:int:0

                        /*
                         * Oops, user chose a new URL that was already taken by another page.
                         * Showing user some feedback, and returning early (with error).
                         */
                        sys42.windows.info-tip:That URL is already taken by another page ...
                          _class:info-window info-window-error
                          _parent:modal-window-body
                        return:bool:false
                          _error:url

                      /*
                       * Making sure we update "currently edited page".
                       */
                      sys42.cms.set-currently-edited-page:x:/../*/_data/*/url?value

                    /*
                     * Updating page properties, by first changing [select-data]'s result, for then to move [select-data]'s
                     * result into an [update-data] invocation.
                     */
                    set:x:/../*/select-data/*/*/name?value
                      src:x:/../*/_data/*/name?value
                    set:x:/../*/select-data/*?value
                      src:x:/../*/_data/*/url?value
                    set:x:/../*/select-data/*/*/template?value
                      src:x:/../*/_data/*/template?value
                    set:x:/../*/select-data/*/*/role?value
                      src:x:/../*/_data/*/role?value

                    /*
                     * Now we can move [p5.page] from [select-data] into [update-data].
                     */
                    add:x:/++/update-data/*/src
                      src:x:/@select-data/*

                    /*
                     * Finally, updating properties for page, and providing feedback to user.
                     */
                    update-data:x:@"/*/*/p5.page/""={0}"""
                      :x:/../*/sys42.cms.get-currently-edited-page?value
                      src
                    sys42.windows.info-tip:Page '{0}' was saved.
                      :x:/../*/_data/*/name?value

                    /*
                     * If either name or URL changed, we reload select dropdown, and repopulate it.
                     */
                    if:x:/../*/_data/*/url?value
                      !=:x:/../*/sys42.cms.get-currently-edited-page?value
                      or:x:/../*/_data/*/name?value
                        !=:x:/../*/_old-name?value

                      /*
                       * Repopulating select page dropdown, and starts editor.
                       */
                      sys42.cms.populate-select-page

                    /*
                     * Returning success to wizard modal window.
                     */
                    return:bool:true


            /*
             * Delete page button.
             */
            button
              innerValue:@"<span class=""glyphicon glyphicon-trash""></span> Delete"
              class:btn btn-default diffuse
              onclick

                /*
                 * Making sure user doesn't accidentally delete one of our "special pages".
                 */
                sys42.cms.get-currently-edited-page
                if:x:/@sys42.cms.get-currently-edited-page?value
                  =:/app-loader
                  or:x:/@sys42.cms.get-currently-edited-page?value
                    =:/

                  /*
                   * Oops, user tried to delete "special page", warning user, and setting focus to "select page dropdown",
                   * before we return early.
                   */
                  sys42.windows.info-tip:This page cannot be deleted!
                  send-javascript:@"$('#cms-select-page').focus().select();"
                  return

                /*
                 * Asking user to confirm deletion of page.
                 */
                sys42.windows.confirm
                  _header:Please confirm deletion
                  _body:Are you sure you want to delete this page? This action cannot be undone!
                  _onclose

                    /*
                     * Making sure we set focus to "select page dropdown" if user closes dialogue, without
                     * pressing "OK".
                     */
                    send-javascript:@"$('#cms-select-page').focus().select();"
                  _onok

                    /*
                     * Deleting page.
                     */
                    sys42.delete-currently-edited-page


              /*
               * Lambda events for delete button
               */
              events


                /*
                 * Deletes the currently edited page
                 */
                sys42.delete-currently-edited-page

                  /*
                   * Retrieving currently edited page, and deleting it.
                   */
                  sys42.cms.get-currently-edited-page
                  delete-data:x:@"/*/*/p5.page/""={0}"""
                    :x:/@sys42.cms.get-currently-edited-page?value

                  /*
                   * Settings currently edited page to "nothing", before we repopulate select dropdown, and invoke [edit-page], which
                   * will simply clear the editor.
                   */
                  sys42.cms.set-currently-edited-page
                  sys42.cms.populate-select-page
                  sys42.cms.edit-page


/*
 * Loading "specialized editor", depending upon which page type we're editing.
 */
add:x:/../*/sys42.execute-lambda-file
  src:"_id:{0}"
    :x:/../*/_id?value
sys42.execute-lambda-file:@CMS/page-editor/specialized-editors/{0}.hl
  :x:/../*/_editor?value
