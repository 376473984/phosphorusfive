
/*
 * Creates our main CMS Widget, which actually only contains a couple of drop down lists to create 
 * new pages, and edit existing pages. In addition, it creates the "general properties toolbar",
 * which it does through invoking the "/system42/apps/CMS/page-editor/editor-toolbar.hl", when
 * a new page is created, or an existing page is edited.
 *
 * The rest is done by "Specialized editors", found in "system42/apps/cms/page-editor/specialized-editors/", 
 * in addition to the templates for new pages, found in "system42/cms/page-editor/new-page-templates/", which
 * are used create a "default starting point" for your new page.
 *
 * About creating your own page type.
 *
 * To support custom editors for your own types of pages, you will need one file in both of those 
 * directories, matching the [type] of page you store into the database, when saving your page.
 *
 * If you do, you can "plug in" your own custom editors into the system, without having any 
 * dependencies between your own custom page types, and the rest of the system, what so ever.
 *
 * Notice, if you do, you will also need a Hyperlisp script to load up and display your page 
 * in "system42/apps/cms/page-loader/", who's name should match the "page type".
 */


/*
 * Verifying user is authorized to access this application
 */
whoami
if:x:/-/*/role?value
  !=:root
  throw:@"Sorry, this page is only accessible to ""root acounts"""


/*
 * Creating our main widget, consisting of two drop down lists, and really not much more.
 */
create-widget:cms-page-editor
  parent:content
  widgets


    /*
     * The "Create new page" drop down.
     */
    container
      class:col-md-3 col-xs-12 form-group
      widgets
        container
          class:input-group
          widgets
            literal
              class:input-group-addon
              innerValue:Create
            container:cms-create-new-page
              element:select
              class:form-control


              /*
               * Populates the "create new page" select drop down list.
               */
              oninit
                sys42.cms.populate-create-new-page


              /*
               * Here we create a new page according to which option item was selected.
               */
              onchange
                sys42.cms.create-new-page


              /*
               * Lambda events for "Create new page" widget.
               */
              events


                /*
                 * Here we loop through all files in "system42/cms/page-editor/editors",
                 * and create one "create new page" option item for each of those files
                 */
                sys42.cms.populate-create-new-page

                  /*
                   * First we create our "information option value", simply displaying "New page ..."
                   */
                  create-literal-widget
                    element:option
                    parent:cms-create-new-page
                    value:_default
                    innerValue:New page ...

                  /*
                   * Then we create one "option" for each editor we have installed as a plugin 
                   * in the "/system42/apps/CMS/page-editor/specialized-editors/" folder.
                   */
                  list-files:/system42/apps/CMS/page-editor/specialized-editors/
                  for-each:x:/-/*?name

                    /*
                     * Removing folder name and ".hl" extension, before we set the [value] and [innerValue]
                     * of our "option" HTML element for our "create new page drop down".
                     */
                    split:x:/./*/_dp?value
                      =:/
                      =:.
                    add:x:/..for-each/*/create-literal-widget
                      src:"value:{0}"
                        :x:/..for-each/*/split/0/-2?name
                    add:x:/..for-each/*/create-literal-widget
                      src:"innerValue:{0}"
                        :x:/..for-each/*/split/0/-2?name

                    /*
                     * Creating our "option" HTML element for currently iterated "specialized editor".
                     */
                    create-literal-widget
                      element:option
                      parent:cms-create-new-page


                /*
                 * Here we create a new page, according to what option user selected, by
                 * executing "system42/cms/page-editor/new-page-templates/xxx.hl"
                 * which is expected to create a new default page of selected type "xxx".
                 */
                sys42.cms.create-new-page

                  /*
                   * Figuring out which page type user wants to create ("html", "lambda", etc) before
                   * firing up the "template" create page Hyperlisp script from our template folder.
                   */
                  get-widget-property:cms-create-new-page
                    value
                  eval-x:x:/+/*
                  sys42.execute-hyper-file:/system42/apps/CMS/page-editor/create-new-page.hl
                    _type:x:/../*/get-widget-property/*/*?value
                    _template:x:/../*/get-widget-property/*/*?value

                  /*
                   * Resetting the "create new page" drop down to its [_default] value.
                   */
                  set-widget-property:cms-create-new-page
                    value:_default


    /*
     * The edit existing page select drop down.
     */
    container
      class:col-md-9 col-xs-12 form-group
      widgets
        container
          class:input-group
          widgets
            literal
              class:input-group-addon
              innerValue:Edit
            container:cms-select-page
              element:select
              class:form-control


              /*
               * Here we populate the drop down list for "select existing page", checks if there are any pages
               * currently beeing edited, and if so, fire up our specialized editor and start editing page.
               */
              oninit
                sys42.cms.populate-select-page
                if
                  sys42.cms.get-currently-edited-page
                  sys42.cms.edit-page


              /*
               * Here we start editing the selected page
               */
              onchange
                sys42.cms.selected-page-changed


              /*
               * Lambda events for "Select existing page to edit" widget
               */
              events


                /*
                 * Stores the currently edited page in session, in case user refreshes the
                 * page, or go back and forth to other apps, while editing, etc ...
                 */
                sys42.cms.set-currently-edited-page

                  /*
                   * We store the currently edited page in session, such that user can refresh page,
                   * or go to other apps, and come back, and continue editing the page he previously edited.
                   */
                  set-session-value:sys42.currently-edited-page
                    src:x:/../*/_arg?value


                /*
                 * Returns the currently edited page.
                 */
                sys42.cms.get-currently-edited-page

                  /*
                   * We store the currently edited page in session, such that user can refresh page,
                   * or go to other apps, and come back, and continue editing the page he previously edited.
                   */
                  get-session-value:sys42.currently-edited-page
                  set:x:/..?value
                    src:x:/./-/*?value


                /*
                 * Retrieves all pages from database, and creates
                 * one option item for each of them, to allow editing
                 */
                sys42.cms.populate-select-page

                  /*
                   * Clears any previously created "option" HTML elements from "select existing page for editing" drop down.
                   */
                  clear-widget:cms-select-page

                  /*
                   * Adding the [_default] item, which simply is an informational piece of text.
                   */
                  create-literal-widget
                    element:option
                    parent:cms-select-page
                    value:_default
                    innerValue:Choose existing page to edit ...

                  /*
                   * Retrieves the currently selected page, if any, such that we can set its
                   * associated "option" HTML element to "selected".
                   */
                  sys42.cms.get-currently-edited-page

                  /*
                   * Selecting all [p5.page] objects from database, and iterating through them all, such
                   * that we can create one "option" HTML element for each.
                   */
                  select-data:x:/*/*/p5.page
                  for-each:x:/-/*

                    /*
                     * Checking if currently iterated [p5.page] is being edited, and if so, making sure the
                     * "option" HTML element for it is selected.
                     */
                    if:x:/../*/sys42.cms.get-currently-edited-page?value
                      =:x:/..for-each/*/_dp/#?value
                      add:x:/..for-each/*/create-literal-widget
                        src
                          selected

                    /*
                     * Forward evaluating the expressions in [create-literal-widget], before invoking it.
                     */
                    eval-x:x:/+/*
                    create-literal-widget
                      element:option
                      parent:cms-select-page
                      value:x:/..for-each/*/_dp/#?value
                      innerValue:{0} [{1}] {2}
                        :x:/..for-each/*/_dp/#/*/name?value
                        :x:/..for-each/*/_dp/#/*/type?value
                        :x:/..for-each/*/_dp/#?value


                /*
                 * Invoked when user selects a page for editing. 
                 * Retrieves which page user wants to edit, and starts the correct page editor 
                 * according to what type of page it is.
                 */
                sys42.cms.selected-page-changed

                  /*
                   * Figuring out which page was selected for editing, if any.
                   */
                  get-widget-property:cms-select-page
                    value

                  /*
                   * Setting the selected page into our session, such that we can remember it, across refresh,
                   * and so on.
                   * Notice, our little boolean algebra trick here, makes sure the value become "null" (no [_arg]),
                   * if the selected "page" was [_default], which is the informational piece of text, explaining
                   * what the drop down's purpose is.
                   */
                  sys42.cms.set-currently-edited-page:x:/-/*/*(!/=_default)?value
                  if:x:/../*/get-widget-property/*/*(!/=_default)?value

                    /*
                     * Editing page
                     */
                    sys42.cms.edit-page
                  else

                    /*
                     * No page is being edited, simply clear the editor surface.
                     */
                    clear-widget:cms-page-editor-surface


    /*
     * This is the widget where the actual editing occurs. 
     * It will contain an "edit property" part, which is common for all types of pages, with a "Name", "URL"
     * property, etc, in addition to the custom editor, which depends upon the type of page user is editing.
     */
    container:cms-page-editor-surface


      /*
       * Lambda events for "Page Editor main surface" widget.
       */
      events


        /*
         * Invoked when a page is selected for editing, either because it was just created, 
         * or because an existing page was selected for editing. 
         *
         * Clears the editor surface, in case another page is already being edited, and starts 
         * the editing process.
         *
         * Which means that it loads up the "common toolbar" for common settings, such as page Name, URL, etc, 
         * in addition to starting the "specialized editor", which depends upon the [type] of page, and can be 
         * found in the "/system42/apps/CMS/page-editor/specialized-editors/" folder.
         */
        sys42.cms.edit-page

          /*
           * Clears out any previous editors, including the common toolbar.
           */
          clear-widget:cms-page-editor-surface

          /*
           * Figuring out which page we're editing, if any.
           */
          sys42.cms.get-currently-edited-page
          if:x:/-?value

            /*
             * We are editing a page, hence we load [p5.page]'s [type] declaration from database, which is
             * needed to load "specialized editor".
             */
            select-data:x:/*/*/p5.page/"={0}"/*/type?value
              :x:/../*/sys42.cms.get-currently-edited-page?value

            /*
             * Creating actual page editor, passing in ID and page type to common editor,
             * letting it load up the "specialized editor".
             */
            eval-x:x:/+/*
            sys42.execute-hyper-file:/system42/apps/CMS/page-editor/editor.hl
              _editor:x:/..if/*/select-data/*?value
              _id:x:/../*/sys42.cms.get-currently-edited-page?value
