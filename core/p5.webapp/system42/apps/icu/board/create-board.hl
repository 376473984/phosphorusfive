
/*
 * Builds given [_board] on given [_keyboard-widget] widget with (optionally) [_language-builder] widget
 * to allow for creating language by creating new associations between images, "keys" (in board) and words
 */


/*
 * Clears keyboard widget, in case it has existing "keys", or other widgets
 */
clear-widget:x:/../*/_keyboard-widget?value


/*
 * Passing in [_keyboard-widget] and [_language-builder] arguments to other parts of file
 */
set:x:/../**/={_keyboard-widget}?value
  src:x:/../*/_keyboard-widget?value
set:x:/../**/={_language-builder}?value
  src:x:/../*/_language-builder?value


/*
 * Retrieving current board
 */
select-data:x:@"/*/*/icu.board/""=:guid:{0}"""
  :x:/../*/_board?value


/*
 * Creates the board
 */
_board-widgets
_cur-y:int:0
while:x:/-?value
  <:x:/../*/select-data/*/*/size/*/height?value

  /*
   * Creating specified table row (tr) widget
   */
  add:x:/../*/_board-widgets
    src
      create-container-widget
        element:tr
        parent:{_keyboard-widget}
        widgets
  _cur-x:int:0
  while:x:/-?value
    <:x:/../*/select-data/*/*/size/*/width?value

    /*
     * Creating specified table cell (td) widget
     */
    set:x:/..while/**/_x?value
      src:x:/..while/..while/*/_cur-x?value

    set:x:/..while/**/_y?value
      src:x:/../*/_cur-y?value

    set:x:/..while/**/_board?value
      src:x:/../*/_board?value

    add:x:/../*/_board-widgets/0/-/*/widgets
      src
        container
          element:td
          widgets
            literal
              element:a
              href:#
              class:icu-empty-cell icu-key
              style:""
              _x
              _y
              _board
              onclick

                /*
                 * Retrieving board, x and y position ("key") of where insertion of image shall be done,
                 * and which [_board] (database id) we're currently using
                 */
                get-widget-property:x:/../*/_event?value
                  _x
                  _y
                  _board

                /*
                 * Invoking Widget lambda event responsible for creating new picture for "key".
                 * [_language-builder] is "databound" at the beginning of file towards the ID of
                 * widget to use for "building language"
                 */
                add:x:/+
                  src:x:/../*/get-widget-property/*/*
                sys42.execute-lisp-file:/system42/apps/icu/board/create-image-key-association.hl
                  _language-builder:{_language-builder}

                /*
                 * Setting currently clicked "key" (widget) as "active" (green'ish), but first
                 * removing any "active states" for previously active widgets, if there are any previously "active" "keys"
                 */
                find-widget-like:{_keyboard-widget}
                  class:icu-active
                if:x:/-/*?value
                  set-widget-property:x:/./-/*?value
                    class:icu-empty-cell
                set-widget-property:x:/../*/_event?value
                  class:icu-empty-cell icu-active

    /*
     * Checking if current x/y position has a picture associated with it, and if so, creating this association by
     * using this image as background image for "key" (widget)
     */
    if:x:/../*/select-data/*/*/items/*/x/={0}/./*/y/={1}/.
      :x:/..while/..while/*/_cur-x?value.string
      :x:/../*/_cur-y?value.string

      /*
       * Currently iterated x/y position has a picture associated with it.
       * Changing its CSS class, and using the specific [thumb] image through the [style] property of widget.
       * But first we must retrieve image from database, which should be found in [icu.image]
       */
      select-data:x:@"/*/*/icu.image/""=:guid:{0}"""
        :x:/../*/select-data/*/*/items/*/x/={0}/./*/y/={1}/./*/image?value
      if:x:/-/*?count
        >:int:0

        /*
         * [icu.image] referenced in [icu.board]'s [x]/[y] position actually exists.
         * Changing CSS class of currently iterated "key", and associating image with
         * style's background property
         */
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/literal/*/class?value
          src:icu-key icu-cell
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/literal/*/style?value
          src:@"background:Transparent url({0}) no-repeat top left;background-size:contain;"
            :x:/..if/*/select-data/*/*/thumb?value

    /*
     * Incrementing x position, which is condition of inner [while] loop
     */
    set:x:/..while/..while/*/_cur-x?value
      +:x:/..while/..while/*/_cur-x?value
        _:int:1

  /*
   * Incrementing y position, which is condition of outer [while] loop
   */
  set:x:/../*/_cur-y?value
    +:x:/../*/_cur-y?value
      _:int:1





/*
 * Creates our widget, by invoking [_board-widget] as an [eval] object. [_board-widgets] should
 * now contain one [create-widget] invocation for each "row" in keyboard, creating one HTML "tr" element
 * for each row, containing one "td" HTML element for each "key" in row
 */
eval:x:/../*/_board-widgets


