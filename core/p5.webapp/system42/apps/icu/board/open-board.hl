
/*
 * Builds given [_board] on keyboard widget, with (optionally) language builder widget
 * to allow for creating language by creating new associations between images, "keys" (in board) and words
 */




/*
 * Passing in arguments to whomever needs them
 */
sys42.icu.get-keyboard-widget
set:x:/../**/={_icu-keyboard-widget}?value
  src:x:/../*/sys42.icu.get-keyboard-widget?value




/*
 * Retrieving active board, and applying as "argument" to whomever needs it
 */
get-page-value:sys42.icu.active-board
set:x:/../**/={_board}?value
  src:x:/../*/get-page-value/*?value




/*
 * Clears keyboard widget, in case it has existing "keys", or other widgets
 */
clear-widget:{_icu-keyboard-widget}




/*
 * Retrieving current board
 */
select-data:x:@"/*/*/icu.board/""=:guid:{0}"""
  :{_board}




/*
 * Figuring out percentage width of "td" HTML elements
 */
/:double:100
  _:x:/../*/select-data/*/*/size/*/width?value.double




/*
 * Creates the board as tr/td widgets and appending into keyboard widget HTML table
 * [_board-widget] will contain a bunch of [create-widget] invocations after [while] is finished evaluating
 */
_board-widgets




/*
 * Looping in height direction, creating one "tr" HTML widget for each row
 */
_cur-y:int:0
while:x:/-?value
  <:x:/../*/select-data/*/*/size/*/height?value

  /*
   * Creating specified table row (tr) widget
   */
  add:x:/../*/_board-widgets
    src
      create-widget
        element:tr
        parent:{_icu-keyboard-widget}
        widgets

  /*
   * Looping in width direction, creating on "td" HTML widget for each cell
   */
  _cur-x:int:0
  while:x:/-?value
    <:x:/../*/select-data/*/*/size/*/width?value

    /*
     * Creating specified table cell (td) widget
     * Setting [_x] and [_y] hidden attributes for button widget first
     */
    set:x:/..while/*/add/**/_x?value
      src:x:/..while/..while/*/_cur-x?value

    set:x:/..while/*/add/**/_y?value
      src:x:/../*/_cur-y?value

    /*
     * Settings width of "td" HTML element, according to how many cells we have in board, making
     * sure the width of the "td" HTML element becomes a percentage, according to how many columns we
     * have in our "table" HTML element
     */
    set:x:/..while/*/add/*/src/*/container/*/style?value
      src:"width:{0}%;"
        :x:/../*/\/?value

    /*
     * Creating default "key" widget for each word in board
     */
    add:x:/../*/_board-widgets/0/-/*/widgets
      src
        container
          element:td
          style
          widgets
            container
              element:button
              class:icu-word
              _x
              _y
              _image
              onclick
                sys42.icu.on-key-clicked:x:/../*/_event?value

              widgets
                img
                  alt:
                  src:/media/images/question-sign.png
                  class:icu-image
                span
                  innerValue:&nbsp;
                  class:icu-text

    /*
     * Checking if current x/y position has a picture associated with it, and if so, creating this association by
     * using this image as background image for "key" (widget), which was created above
     */
    if:x:/../*/select-data/*/*/items/*/item/*/x/={0}/./*/y/={1}/.
      :x:/..while/..while/*/_cur-x?value.string
      :x:/../*/_cur-y?value.string

      /*
       * Currently iterated x/y position has an image associated with it.
       * Changing its CSS class, and using the specific [thumb] image through the [style] property of widget.
       * But first we must retrieve image from database, which should be found in [icu.word]
       */
      select-data:x:@"/*/*/icu.word/""=:guid:{0}"""
        :x:/../*/select-data/*/*/items/*/item/*/x/={0}/./*/y/={1}/./*/image?value
          :x:/..while/..while/*/_cur-x?value.string
          :x:/../*/_cur-y?value.string
      if:x:/-/*?count
        >:int:0

        /*
         * [icu.word] referenced in [icu.board]'s [x]/[y] position actually exists.
         * Applying image source, alternate text, and text for word to image widget, in addition to adding
         * [_image] property to button
         */

        /*
         * First we retrieve the first [image] from [icu.word], and applies it as [src] of HTML "img" element
         */
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/widgets/*/img/*/src?value
          src:x:/..if/..if/*/select-data/*/*/images/*/image/[0,1]?value

        /*
         * Then we set the HTML "alt" property of image to the [word] from our [icu.word]
         */
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/widgets/*/img/*/alt?value
          src:x:/..if/..if/*/select-data/*/*/word?value

        /*
         * Then we set the HTML "innerValue" property of our HTML "span" element to the [word] from our [icu.word]
         */
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/widgets/*/span/*/innerValue?value
          src:x:/..if/..if/*/select-data/*/*/word?value

        /*
         * Then we make sure our HTML "button" get the [icu.image] ID as a "hidden attribute" (server side) called [_image]
         */
        set:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/_image?value
          src:x:/..if/..if/*/select-data/*?value

        /*
         * Making sure [onclick] becomes lambda object from [action] of [item]
         */
        add:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/onclick
          src:x:/../*/select-data/*/*/items/*/item/*/x/={0}/./*/y/={1}/./*/action/*
            :x:/..while/..while/*/_cur-x?value.string
            :x:/../*/_cur-y?value.string

    else

      /*
       * Currently iterated position does not have an image associated with it, hence adding 
       * "associate with image" logic for key's [onclick] event handler
       */
      add:x:/../*/_board-widgets/0/-/*/widgets/0/-/*/widgets/*/container/*/onclick
        src

          /*
           * Invokes file responsible for configuring currently "active" key
           */
          sys42.execute-lisp-file:/system42/apps/icu/board/language-builder/configure-key.hl

    /*
     * Incrementing x position, which is condition of inner [while] loop
     */
    set:x:/..while/..while/*/_cur-x?value
      +:x:/..while/..while/*/_cur-x?value
        _:int:1

  /*
   * Incrementing y position, which is condition of outer [while] loop
   */
  set:x:/../*/_cur-y?value
    +:x:/../*/_cur-y?value
      _:int:1




/*
 * Creates our widget, by invoking [_board-widget] as an [eval] object. [_board-widgets] should
 * now contain one [create-widget] invocation for each "row" in keyboard, creating one HTML "tr" element
 * for each row, containing one "td" HTML element for each "key" in row
 */
eval:x:/../*/_board-widgets


