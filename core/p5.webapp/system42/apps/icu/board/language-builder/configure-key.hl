
/*
 * Configures currently "active" key in keyboard.
 */




/*
 * Verifying language building is allowed
 */
sys42.icu.get-language-builder-widget
if:x:/-?value
  not
  sys42.info-window:No language building is allowed according to configuration of ICU. Contact sys-admin of app.
    _error:true
    _time:more
  return:bool:false




/*
 * Making sure any previously created "create board image" widgets are destroyed, before we
 * create main "language builder" widget
 */
if
  fetch:x:/0/0?value
    widget-exist:icu-configure-key
  delete-widget:icu-configure-key




/*
 * Now creating language builder widget, first making sure main language builder wrapper is shown
 */
set-widget-property:x:/../*/sys42.icu.get-language-builder-widget?value
  visible:true




/*
 * Then loading all search plugins from plugin folder.
 * These are simply just buttons that are appended into input-group for search textbox
 */
list-files:/system42/apps/icu/board/language-builder/search-plugins/
  filter:hl
for-each:x:/-/*?name

  /*
   * Adding file as button to input group
   */
  load-file:x:/..for-each/*/_dp?value
  insert-before:x:/../*/create-widget/*/widgets/*/span/*/widgets/0/-
    src:x:/./-/*/*




/*
 * Now we can finally create our language builder
 */
eval-x:x:/+/*/parent
create-widget:icu-configure-key
  parent:x:/../*/sys42.icu.get-language-builder-widget?value
  class:input-group
  onkeyup:"return p5.searchIcuTextBoxEsc(event);"

  /*
   * Common events for handling images
   */
  events




    /*
     * Takes an existing image as [_arg], and starts configuring it as an image key,
     * given a default word of [_word] and description of [_description]
     */
    sys42.icu.configure-image-for-key

      /*
       * Creates a modal window, asking user for "word" and "description" for image insertion into database
       */
      include-javascript:@"p5.configureImageKeyUp = function(e) {
  if(e.keyCode == 27) {
    p5.$('icu-hide-configure-image').raise('onclick');
  }
}
p5.configureImageKeyPress = function(e) {
  if(e.keyCode == 13) {
    p5.$('icu-configure-image-ok-select-image').raise('onclick');
    return false;
  }
}"
      sys42.icu.get-icu-wrapper
      eval-x:x:/+/*/parent|/+/*/*/*/*/*/*(/void/=icu-configure-image-word/*/value|/literal/=icu-configure-image-description/*/innerValue|/void/=icu-configure-image-img/*(/src|/alt))
      create-widget:icu-configure-image-result
        class:icu-search-modal-bg
        parent:x:/../*/sys42.icu.get-icu-wrapper?value
        onkeyup:"return p5.configureImageKeyUp(event);"
        widgets
          container
            class:icu-search-modal-window rounded-corners box-shadow air-padding-more
            widgets

              /*
               * Close "search result" modal window button
               */
              literal:icu-hide-configure-image
                element:a
                href:#
                innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
                class:icu-close-dialog
                onclick
                  delete-widget:icu-configure-image-result
              literal:icu-configure-image-header
                element:h3
                innerValue:Word ...?
              void
                element:hr

              /*
               * Contains all "supply word and description" widgets
               */
              container:icu-configure-image-body
                widgets
                  void:icu-configure-image-word
                    element:input
                    type:text
                    class:form-control
                    placeholder:Word ...
                    value:x:/../*/_word?value
                    onkeypress:"return p5.configureImageKeyPress(event);"
                    oninit
                      send-javascript:@"$('#{0}').focus().select();"
                        :x:/../*/_event?value
                  literal:icu-configure-image-description
                    element:textarea
                    class:form-control prepend-top prepend-bottom
                    placeholder:Description ...
                    innerValue:x:/../*/_description?value
                    rows:4
                  void:icu-configure-image-img
                    element:img
                    class:icu-configure-image-img
                    src:x:/../*/_image?value
                    alt:x:/../*/_word?value

              /*
               * Give some "space" for button row at the bottom of modal window
               */
              void
                element:hr

              /*
               * Button row at the bottom of preview dialog, to allow user to select image
               */
              container
                class:prepend-top
                style:"width:100%;"
                widgets

                  /*
                   * Cancel configure image button
                   */
                  button:icu-configure-image-cancel-preview
                    class:btn-default btn pull-right
                    innerValue:@"<span class=""glyphicon glyphicon-remove""></span> Cancel"
                    style:"width:100px;"
                    onclick

                      /*
                       * User clicked "cancel", simply closing window
                       */
                      delete-widget:icu-configure-image-result

                  /*
                   * OK configure image button (selects image, and creates a new [icu.word] entry in database)
                   */
                  button:icu-configure-image-ok-select-image
                    class:btn-default btn pull-right
                    innerValue:@"<span class=""glyphicon glyphicon-ok""></span> OK"
                    style:"width:100px;margin-right:10px;"
                    onclick

                      /*
                       * Retrieving [word], [description] and [image] properties, for insertion of image into
                       * database
                       */
                      get-widget-property:icu-configure-image-word
                        value
                      get-widget-property:icu-configure-image-description
                        value
                      get-widget-property:icu-configure-image-img
                        src

                      /*
                       * Creates an [icu.image] insertion, to stuff into database
                       */
                      eval-x:x:/+/*/*
                      insert-data
                        icu.image
                          title:x:/../*/get-widget-property/[0,1]/*/*?value
                          description:x:/../*/get-widget-property/[1,2]/*/*?value
                          url:x:/../*/get-widget-property/[2,3]/*/*?value

                      /*
                       * Asks user for "action" to associate with image, passing in [ics.image] ID to file responsible
                       * for configuring action
                       */
                      eval-x:x:/+/*
                      sys42.execute-lisp-file:/system42/apps/icu/board/language-builder/configure-action.hl
                        _image:x:/../*/insert-data/*?value
                      delete-widget:icu-configure-image-result




    /*
     * Resizes an image to "key size", and puts it into ICU [_destination] folder.
     * Pass in image to resize as [_arg]
     */
    sys42.icu.resize-image-to-keys-folder

      /*
       * Figuring out image's original width and height
       */
      p5.imaging.get-size:x:/../*/_arg?value

      /*
       * Resizing image, such that it becomes square, and has correct size proportions, 
       * and storing result in "keys" folder
       */
      if:x:/../*/p5.imaging.get-size/*/width?value
        >:x:/../*/p5.imaging.get-size/*/height?value

        /*
         * Need to crop left and right parts of image
         * Setting [top], [height] and [width] values to "static" values first
         */
        set:x:/../*/p5.imaging.resize/*/src-rect/*/top?value
          src:int:0
        set:x:/../*/p5.imaging.resize/*/src-rect/*/height?value
          src:x:/../*/p5.imaging.get-size/*/height?value
        set:x:/../*/p5.imaging.resize/*/src-rect/*/width?value
          src:x:/../*/p5.imaging.get-size/*/height?value

        /*
         * Then calculating [left] of source rectangle
         */
        -:x:/../*/p5.imaging.get-size/*/width?value
          _:x:/../*/p5.imaging.get-size/*/height?value
        /:x:/-?value
          _:int:2
        set:x:/../*/p5.imaging.resize/*/src-rect/*/left?value
          src:x:/./-?value

      else-if:x:/../*/p5.imaging.get-size/*/height?value
        >:x:/../*/p5.imaging.get-size/*/width?value

        /*
         * Need to crop top and bottom parts of image
         * Setting [left], [width] and [height] values to "static" values first
         */
        set:x:/../*/p5.imaging.resize/*/src-rect/*/left?value
          src:int:0
        set:x:/../*/p5.imaging.resize/*/src-rect/*/width?value
          src:x:/../*/p5.imaging.get-size/*/width?value
        set:x:/../*/p5.imaging.resize/*/src-rect/*/height?value
          src:x:/../*/p5.imaging.get-size/*/width?value

        /*
         * Then calculating [top] of source rectangle
         */
        -:x:/../*/p5.imaging.get-size/*/height?value
          _:x:/../*/p5.imaging.get-size/*/width?value
        /:x:/-?value
          _:int:2
        set:x:/../*/p5.imaging.resize/*/src-rect/*/top?value
          src:x:/./-?value

      else

        /*
         * No need to crop, since width and height is equal.
         * Simply removing [src-rect], since it will default to original image size
         */
        set:x:/../*/p5.imaging.resize/*/src-rect

      /*
       * Now doing actual resizing of image
       */
      p5.imaging.resize:x:/../*/_arg?value
        width:283
        height:283
        destination-file:x:/../*/_destination?value
        src-rect
          top
          left
          width
          height




  _on-enter

    /*
     * We trap carriage/return here, and raise click on first button
     */
    get-children-widgets:icu-configure-key-search-buttons
    raise-widget-ajax-event:x:/-/*/0?value
      onclick

  widgets

    /*
     * Search textbox
     */
    void:icu-configure-key-search-textbox
      element:input
      type:search
      class:form-control input-lg
      placeholder:Search for image ...
      onkeypress:"return p5.searchIcuTextBox(event);"
      oninit
        send-javascript:@"$('#{0}').focus();"
          :x:/../*/_event?value

    /*
     * Button input group, to make sure buttons "melts" together with textbox (Bootstrap CSS feature)
     * This input group will be automatically created, with one button for each "search-plugin" in app.
     */
    span:icu-configure-key-search-buttons
      class:input-group-btn
      widgets

        /*
         * Close search button
         */
        button:icu-configure-key-close-builder
          innerValue:@"<span class=""glyphicon glyphicon-remove""></span>"
          class:btn-default btn btn-lg
          onclick
            sys42.icu.get-language-builder-widget
            set-widget-property:x:/-?value
              visible:false




/*
 * Including JavaScript necessary to trap carriage return in search textbox
 */
include-javascript:@"
p5.searchIcuTextBox = function(e) {
  if(e.keyCode == 13) {
    p5.$('icu-configure-key').raise('_on-enter');
    return false;
  }
}
p5.searchIcuTextBoxEsc = function(e) {
  if(e.keyCode == 27) {
    p5.$('icu-configure-key-close-builder').raise('onclick');
    return false;
  }
}"




/*
 * Creating "drag and drop" file uploader
 */
