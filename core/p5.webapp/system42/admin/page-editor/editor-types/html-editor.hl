
/*
 * allows for editing an HTML page, using a WYSIWYG rich text editor (CK Editor)
 */


// making sure necessary CKEditor JavaScript files are included
include-javascript-file:system42/ckeditor/ckeditor.js


// retrieving the [p5.page] HTML, and other properties from database
select-data:x:/*/*/p5.page/"={0}"
  :x:/../*/_args/*/_page?value


// setting the content of text-editor main surface to HTML from [p5.page]
set:x:/../*/create-widget/*/widgets/*/literal/=ck-editor/*/innerValue?value
  src:x:/../*/select-data/*/*/content?value


// setting the href of the "preview page" to the URL of the page
set:x:/../*/create-widget/*/widgets/**/literal/=preview/*/href?value
  src:x:/../*/select-data/*?value


// setting the toolbar name, url, etc widget's properties to the values from [p5.page]
set:x:/../*/create-widget/*/widgets/**/void/=page-name/*/value?value
  src:x:/../*/select-data/*/*/name?value
set:x:/../*/create-widget/*/widgets/**/void/=page-header/*/value?value
  src:x:/../*/select-data/*/*/header?value
set:x:/../*/create-widget/*/widgets/**/void/=page-role/*/value?value
  src:x:/../*/select-data/*/*/role?value
set:x:/../*/create-widget/*/widgets/**/void/=page-url/*/value?value
  src:x:/../*/select-data/*?value
set:x:/../*/create-widget/*/widgets/**/void/=page-id/*/value?value
  src:x:/../*/select-data/*?value


// populating the "templates" drop down list
list-files:system42/templates
for-each:x:/-/*
  _literal
    literal
      element:option
      selected
      value
      innerValue
  set:x:/-/*/literal/*/value?value
    src:x:/..for-each/*/__dp/#?value
  set:x:/-2/*/literal/*/innerValue?value
    src:x:/..for-each/*/__dp/#?value
  if:x:/..for-each/*/__dp/#?value
    not-equals:x:/../*/select-data/*/*/template?value
    set:x:/..for-each/*/_literal/*/literal/*/selected
  add:x:/../*/create-widget/*/widgets/**/container/=page-template/*/widgets
    src:x:/..for-each/*/_literal/*


// clearing main editing surface, and toolbar, before creating editor widget,
// in case another page was being edited from before
clear-widget:editor-main-surface
clear-widget:editor-toolbar


// creating our toolbar for changing properties of [p5.page] object, and saving/deleting [p5.page], etc ...
create-widget
  parent:editor-toolbar
  element:fieldset
  widgets
    literal
      element:legend
      innerValue:properties
      has-id:false
    container
      has-id:false
      element:p
      widgets
        literal
          element:label
          for:page-name
          innerValue:name
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-name
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:page name ...
          value
        literal
          element:label
          for:page-url
          innerValue:url
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-url
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:url ...
          value
        literal
          element:label
          for:page-header
          innerValue:title
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-header
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:page header ...
          value
    container
      has-id:false
      style:"margin-bottom:0;"
      element:p
      widgets
        literal
          element:label
          for:page-role
          innerValue:role
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-role
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:access role ...
          value
        literal
          element:label
          for:page-template
          innerValue:template
          style:"width:70px;display:inline-block;margin-left:50px;"
          has-id:false
        container:page-template
          element:select
          style:"width:180px;display:inline-block;"
          widgets
        literal:delete-button
          element:button
          style:"width:86px;margin-left:121px;"
          innerValue:delete
          onclick

            // figuring out which page we're editing, and selecting it from database
            get-widget-property:page-id
              value
            delete-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/+/<?value
            set-session:page-editor.current-page
            include-javascript:"location.reload();"
        literal:save-button
          element:button
          style:"width:86px;margin-left:10px;"
          innerValue:save
          onclick

            // figuring out which page we're editing, and selecting it from database
            get-widget-property:page-id
              value
            select-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/[0,1]/+/<?value

            // updating [p5.page], first adding old values, before starting to modify what's been editing
            // this way we get to keep any "custom values", which are part of our [p5.page] object, which this editor
            // doesn't know anything about
            add:x:/../*/update-data/*/src
              src:x:/../*/select-data/*

            // then starting to add changes, first [header]
            get-widget-property:page-header
              value
            set:x:/../*/update-data/1/0/*/header?value
              src:x:/../*/get-widget-property/[1,2]/+/<?value

            // then [name]
            get-widget-property:page-name
              value
            set:x:/../*/update-data/1/0/*/name?value
              src:x:/../*/get-widget-property/[2,3]/+/<?value

            // then [url]
            get-widget-property:page-url
              value
            set:x:/../*/update-data/1/0?value
              src:x:/../*/get-widget-property/[3,4]/+/<?value

            // then [template]
            get-widget-property:page-template
              value
            set:x:/../*/update-data/1/0/*/template?value
              src:x:/../*/get-widget-property/[4,5]/+/<?value

            // then [content]
            get-widget-property:ck-editor
              innerValue
            set:x:/../*/update-data/1/0/*/content?value
              src:x:/../*/get-widget-property/[5,6]/+/<?value

            // then [role]
            get-widget-property:page-role
              value
            if:x:/../*/get-widget-property/[6,7]/+/<?value
              equals:
              // no [role], deleting the old [role] node, if any ...
              set:x:/../*/update-data/1/0/*/role
            else
              // updated version of [p5.page] has role access object attached to it,
              // checking if we need to add [role] to [update-data] statement first, before we change it
              if:x:/../*/update-data/1/0/*/role
                not
                // no role in old version of [p5.page], making sure we add a [role] node, before setting its value
                add:x:/../*/update-data/1/0
                  src
                    role
              set:x:/../*/update-data/1/0/*/role?value
                src:x:/../*/get-widget-property/[6,7]/+/<?value

            // before finally updating page with new properties from editor
            update-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/[0,1]/+/<?value
              src

            // reloading location after having updated session variable to reflect URL of page edited
            set:x:/+/0?value
              src:x:/../*/get-widget-property/[0,1]/+/<?value
            set-session:page-editor.current-page
              source
            include-javascript:"location.reload();"
        void:page-id
          element:input
          type:hidden
          value


// making sure our "textarea" HTML element is replaced with the CKEditor WYSIWYG editor
include-javascript:@"CKEDITOR.replace('ck-editor',{
  extraPlugins:'autogrow',
  removePlugins:'resize,about',
  autoGrow_minHeight:200,
  autoGrow_onStartup:true});"


// making sure CKEditor automatically updates its associated "textarea"
include-javascript:@"for (var i in CKEDITOR.instances) {
   CKEDITOR.instances[i].on('change', function() { CKEDITOR.instances[i].updateElement() });
}"


// creating our widget to display our editor surface
create-widget
  parent:editor-main-surface
  class:span-24
  widgets
    literal:ck-editor
      class:span-24
      rows:25
      element:textarea
      innerValue
    container
      class:span-24 prepend-top
      widgets
        literal:preview
          element:a
          class:span-2 last prepend-22
          target:_blank
          href
          innerValue:preview

