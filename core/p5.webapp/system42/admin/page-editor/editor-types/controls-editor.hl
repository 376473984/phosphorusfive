
/*
 * Allows for editing a [control] type of page, using the CodeMirror code editor
 */


// retrieving the [p5.page] controls, and other properties from database
select-data:x:/*/*/p5.page/"={0}"
  :x:/../*/_args/*/_page?value


// setting the content of editor-surface to the [controls] from [p5.page]
set:x:/../*/create-widget/*/widgets/*/literal/=editor-surface/*/innerValue?value
  src:x:/../*/select-data/*/*/controls?value


// setting the href of the "preview page" to the URL of the page
set:x:/../*/create-widget/*/widgets/**/literal/=preview/*/href?value
  src:x:/../*/select-data/*?value


// setting the toolbar name, url, etc widget's properties to the values from [p5.page]
set:x:/../*/create-widget/*/widgets/**/void/=page-name/*/value?value
  src:x:/../*/select-data/*/*/name?value
set:x:/../*/create-widget/*/widgets/**/void/=page-role/*/value?value
  src:x:/../*/select-data/*/*/role?value
set:x:/../*/create-widget/*/widgets/**/void/=page-url/*/value?value
  src:x:/../*/select-data/*?value
set:x:/../*/create-widget/*/widgets/**/void/=page-id/*/value?value
  src:x:/../*/select-data/*?value


// creating our toolbar for changing properties of [p5.page] object, and saving/deleting [p5.page], etc ...
create-widget
  parent:editor-toolbar
  element:fieldset
  widgets
    literal
      element:legend
      innerValue:properties
      has-id:false
    container
      has-id:false
      element:p
      widgets
        literal
          element:label
          for:page-name
          innerValue:name
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-name
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:page name ...
          value
        literal
          element:label
          for:page-url
          innerValue:url
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-url
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:url ...
          value
    container
      has-id:false
      style:"margin-bottom:0;"
      element:p
      widgets
        literal
          element:label
          for:page-role
          innerValue:role
          has-id:false
          style:"width:70px;display:inline-block;margin-left:50px;"
        void:page-role
          element:input
          type:text
          class:text
          style:"width:170px;display:inline-block;"
          placeholder:access role ...
          value
        literal:delete-button
          element:button
          style:"width:86px;margin-left:121px;"
          innerValue:delete
          onclick

            // figuring out which page we're editing, and selecting it from database
            get-widget-property:page-id
              value
            delete-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/+/<?value
            set-session:page-editor.current-page
            include-javascript:"location.reload();"
        literal:save-button
          element:button
          style:"width:86px;margin-left:10px;"
          innerValue:save
          onclick

            // figuring out which page we're editing, and selecting it from database
            get-widget-property:page-id
              value
            select-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/[0,1]/+/<?value

            // updating [p5.page], first adding old values, before starting to modify what's been editing
            // this way we get to keep any "custom values", which are part of our [p5.page] object, which this editor
            // doesn't know anything about
            add:x:/../*/update-data/1
              src:x:/../*/select-data/*

            // then starting to add changes, first [name]
            get-widget-property:page-name
              value
            set:x:/../*/update-data/1/0/*/name?value
              src:x:/../*/get-widget-property/[1,2]/+/<?value

            // then [url]
            get-widget-property:page-url
              value
            set:x:/../*/update-data/1/0?value
              src:x:/../*/get-widget-property/[2,3]/+/<?value

            // then [controls]
            get-widget-property:editor-surface
              innerValue
            set:x:/../*/update-data/1/0/*/controls?value
              src:x:/../*/get-widget-property/[3,4]/+/<?value

            // then [role]
            get-widget-property:page-role
              value
            if:x:/../*/get-widget-property/[4,5]/+/<?value
              equals:
              // no [role], deleting the old [role] node, if any ...
              set:x:/../*/update-data/1/0/*/role
            else
              // updated version of [p5.page] has role access object attached to it,
              // checking if we need to add [role] to [update-data] statement first, before we change it
              if:x:/../*/update-data/1/0/*/role
                not
                // no role in old version of [p5.page], making sure we add a [role] node, before setting its value
                add:x:/../*/update-data/1/0
                  src
                    role
              set:x:/../*/update-data/1/0/*/role?value
                src:x:/../*/get-widget-property/[4,5]/+/<?value

            // before finally updating page with new properties from editor
            update-data:x:/*/*/p5.page/"={0}"
              :x:/../*/get-widget-property/[0,1]/+/<?value
              src

            // reloading location after having updated session variable to reflect URL of page edited
            set:x:/+/0?value
              src:x:/../*/select-data/*?value
            set-session:page-editor.current-page
              src
            include-javascript:"location.reload();"
        void:page-id
          element:input
          type:hidden
          value


// making sure our "textarea" HTML element is replaced with the codemirror editor
include-javascript:@"
var editor = CodeMirror.fromTextArea(document.getElementById('editor-surface'), {
  mode:'hyperlisp',
  theme:'blackboard',
  lineNumbers:true,
  styleActiveLine:true,
  path:'system42/codemirror/',
  autofocus:true,
  extraKeys: {
    Tab: function(cm) {
      var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');
      cm.replaceSelection(spaces);
    },
    ""F11"": function(cm) {
      cm.setOption(""fullScreen"", !cm.getOption(""fullScreen""));
    },
    ""Esc"": function(cm) {
      if (cm.getOption(""fullScreen"")) cm.setOption(""fullScreen"", false);
    }
  }
});
editor.on('change',function (cMirror) {
  p5.$('editor-surface').el.value = cMirror.getValue();
});
"


// creating our widget to display our editor surface
create-widget
  parent:editor-main-surface
  class:span-24
  widgets
    literal:editor-surface
      class:span-24
      style:"margin-bottom:50px;"
      element:textarea
      innerValue
    container
      class:span-24 prepend-top
      widgets
        literal:preview
          element:a
          class:span-2 last prepend-22
          target:_blank
          href
          innerValue:preview
