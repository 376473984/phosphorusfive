/*
 * Creates a PDF file containing all Markdown files from the documentation.
 */





/*
 * Checking if PDF file already exists, at which point we return it
 * immediately to avoid going through the generation process.
 */
if
  fetch:x:/0/0?value
    file-exists:~/documents/public/p5-dox.html
  return:~/documents/public/p5-dox.html





/*
 * Buffer node for entire HTML, containing HTML for all Markdown files in system.
 */
desktop.version
eval-x:x:/+
.html:@"<html>
  <head>
    <title>Foo</title>
    <link rel=""stylesheet"" type=""text/css"" href=""/modules/micro/media/micro.css"" />
    <link rel=""stylesheet"" type=""text/css"" href=""/modules/desktop/media/print-help.css"" />
  </head>
  <body>
    <div class=""container"">
      <div class=""row"">
        <div class=""col"">
          <h1>Hyperlamb {0}</h1>"
  :x:/@desktop.version?value





/*
 * Converts all main files to HTML, and appending into above [.html].
 */
list-files:@DESKTOP/help-files/
  filter:.md
load-file:x:/@list-files/*?name
for-each:x:/@load-file/*?value
  markdown2html:x:/@_dp?value
  set:x:/@.html?value
    src:{0}{1}
      :x:/@.html?value
      :x:/@markdown2html?value





/*
 * Converts all modules help files to HTML, and appending into above [.html].
 */
.exe
  for-each:x:/../*/~desktop.help-files?value
    insert-before:x:/.
      src:x:/@_dp?value
vocabulary:~desktop.help-files.
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.exe/0/-
    src:x:/@_dp?value
eval:x:/@.exe
for-each:x:/@eval/*?name
  list-files:x:/@_dp?value
    filter:.md
  load-file:x:/@list-files/*?name
  for-each:x:/@load-file/*?value
    markdown2html:x:/@_dp?value
    set:x:/@.html?value
      src:{0}{1}
        :x:/@.html?value
        :x:/@markdown2html?value





/*
 * Converts all sub section help files to HTML, and appending into above [.html].
 */
list-folders:@DESKTOP/help-files/
list-files:x:/@list-folders/*?name
  filter:.md
load-file:x:/@list-files/*?name
for-each:x:/@load-file/*?value
  markdown2html:x:/@_dp?value
  set:x:/@.html?value
    src:{0}{1}
      :x:/@.html?value
      :x:/@markdown2html?value





/*
 * Closing document.
 */
set:x:/@.html?value
  src:{0}</div></div></div></body></html>
    :x:/@.html?value





/*
 * Semantically massaging our ouput.
 */
html2lambda:x:/@.html?value





/*
 * Fixing all 'pre' elements.
 */
for-each:x:/@html2lambda/**/pre/*/code
  lambda2html:x:/@_dp/#/*(!/~@)
  set:x:/@_dp/#/*(!/~@)
  p5.html.html-encode:x:/@lambda2html?value
  eval-x:x:/+/*/*
  add:x:/@_dp/#
    src
      #text:x:/@p5.html.html-encode?value





/*
 * Replacing all image paragraphs.
 */
for-each:x:@"/@html2lambda/**/p/*/#text/""=:regex:/^https{0,1}:\\/\\/.+\\.[png|jpg|jpeg|gif|svg]/i"""

  /*
   * Replacing entire paragraph with an image tag.
   */
  eval-x:x:/+/*/*/*
  add:x:/@_dp/#/.
    src
      img
        @src:x:/@_dp/#?value
        @alt:Image
  set:x:/@_dp/#/./*/\#text





/*
 * Transforming lambda back to HTML.
 */
lambda2html:x:/@html2lambda/*
save-file:~/documents/public/p5-dox.html
  src:x:/@lambda2html?value





/*
 * Returns path to file to caller.
 */
return:~/documents/public/p5-dox.html

