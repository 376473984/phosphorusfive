

/*
 * File responsible for creating our default [p5.web.load-ui] event, which basically is our default URL resolver,
 * and "micro web operating system", allowing the user to see his desktop, installed apps, and visit the Bazar.
 *
 * Notice, this event is only create if no previous module has already overridden it, by creating 
 * another [p5.web.load-ui] event.
 */





/*
 * Notice, some modules, such as System42 etc, would want to create their own [p5.web.load-ui] event, at which
 * point the event would already have been created, overriding the default event implementation.
 *
 * This allows you to create a module, which entirely bypasses the default "micro web operating system" desktop, 
 * URL resolver, and loader.
 *
 * Hence, we check to see if another module has previously overridden our [p5.web.load-ui] event, and if so, we simply
 * return early, avoiding creating the default event.
 *
 * I do not encourage you to do this, since among other things, it would render all your other apps potentially "dead".
 * However, feel free to apply whatever damage you wish to the system yourself!
 */
vocabulary:p5.web.load-ui
if:x:/-/*

  /*
   * Another "module" has already overridden our default [p5.web.load-ui] event, hence returning early, 
   * to avoid evaluation of the rest of our file.
   */
  return





/*
 * Creating the default [p5.web.load-ui] URL resolver and Active Event.
 *
 * If you wish to entirely bypass the default "web operating system", with its desktop, and its Bazar, feel free
 * to create your own module, which overrides the default [p5.web.load-ui] event.
 *
 * Just remember to somehow make sure you're able to setup the server salt, and have the user supply a root password.
 *
 * Hint; You can make sure your users are setting up a server salt and root password, by invoking the 
 * "@DESKTOP/initialize/initialize-server.hl" file, which will do nothing, if the server salt and root password has 
 * already been setup, and return "false" if it is safe to proceed to your own app, and the server salt and root 
 * password has already been setup.
 *
 * Or, you can see the logic this event provides for checking if the server salt and root pasword has already been setup.
 * The latter would probably be slightly more efficient, and require less resources.
 */
create-event:p5.web.load-ui

  /*
   * First we must check if server has been setup, with a root password, 
   * and a server salt - And if not, we do so.
   */
  if
    p5.auth._has-salt
    not
    or
      p5.auth._root-password-is-null

    /*
     * No server salt, or no root password, hence the server needs to be initialized with a server salt, and a root password.
     */
    micro.evaluate.file:@DESKTOP/initialize/initialize-server.hl

  else

    /*
     * Server has been initialized, hence we can load our desktop, or requested application,
     * depending upon which [url] was specified.
     *
     * However, before we do, we check if user has a proprietary license, and if not, we inject a watermark on page,
     * explaining all users that this is Free Software and so on.
     */
    if
      license.is-valid
      not

      /*
       * User does not have a valid license.
       */
      create-widget
        class:micro-license-watermark
        element:a
        href:"https://gaiasoul.com/license"
        target:_blank
        innerValue:GaiaSoul is Free Software

    if:x:/../*/url?value
      =:/

      /*
       * Root URL was requested, loading the main desktop, but first checking if system has been configured with
       * a "default app".
       */
      p5.config.get:p5.core.default-app
      if:x:/@p5.config.get/*?value
        micro.evaluate.file:x:/@p5.config.get/*?value
      else
        throw:No default app configured in your web.config, feel free to add up e.g. '<add key="p5.core.default-app" value="/modules/desktop/launch.hl" />' to make sure your desktop starts initially, in your <appSettings> section.

    else

      /*
       * A specific application was requested, evaluating it's "launch.hl" file.
       *
       * Notice, to create some basic URL rewriting support, for all apps, we only use the first part of the URL
       * when determining which app to load. This allows any app to create sub URLs, with its own folders, etc, and
       * then do its own internal mapping, by using the URL itself, which is passed in as [url] into the app's
       * "launch.hl" file.
       *
       * In addition to that it makes our URL resolver better, not relying upon some specific format, with "/" neither
       * before nor after the name of the app.
       *
       * For instance, to load some sub folder in Sephia Five, the URL could be "/sephia-five/foo/bar", etc ...
       * However, determining the URL, and doing the actual resolving, is up to the specific application itself, 
       * and not done by this startup file.
       */
      split:x:/../*/url?value
        =:/
        =:?

      /*
       * Checking if app exists, and if not, returning some simple 404 Not found.
       */
      if
        fetch:x:/0/0?value
          file-exists:/modules/{0}/launch.hl
            :x:/@split/0?name
        not

        /*
         * Non-existing URL.
         */
        p5.web.response.set-status-code:404
        p5.web.echo:Oops 404, the place where URLs go to die!
        return

      /*
       * Loading the file, and evaluating it.
       */
      eval-x:x:/+/*/url
      micro.evaluate.file:/modules/{0}/launch.hl
        :x:/@split/0?name
        url:x:/../*/url?value
