/*
 * Creates the __[desktop.help.widgets.file-meta]__ extension widget.
 */

/*
 * This widget displays meta information for all files
 * recursively beneath some specified **[folder]** argument. This is the widget
 * that (probably) renders the information you're currently reading. The event is made public
 * to make it easy to create meta information traversel for your own modules in
 * your module's help files.
 *
 * The widget will render a simple button, which once clicked, actually traverses your
 * specified **[folder]** for its meta information.
 */
create-event:desktop.help.widgets.file-meta

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    folder:string

  /*
   * Returns widget to caller.
   */
  eval-x:x:/+/**/.folder
  return
    container
      style:"clear:both;"
      widgets
        button
          innerValue:View meta information ...
          onclick

            /*
             * Creating a cover widget, and a timeout, returning to client,
             * and invoking actual implementation.
             */
            create-widgets
              micro.widgets.cover:desktop-waiting-for-meta
                message:Please wait while I retrieve meta information from your module ...

            /*
             * Creating a timeout that is immediately invoked after returning
             * to client, from inside of we do our actual heavy lifting.
             */
            eval-x:x:/+/**/p5.web.widgets.ajax-events.raise
            micro.lambda.create-timeout
              milliseconds:1
              onfinish

                /*
                 * Wrapping our view meta information invocation inside of
                 * a try/finally to make sure we can successfully delete our
                 * cover widget, even if an exception occurs.
                 */
                try
                  desktop.help.view-meta-information
                finally
                  delete-widget:desktop-waiting-for-meta

          events

            /*
             * Returns all Hyperlambda files recursively from the given folder.
             */
            desktop._list-files
              add:x:/../*/return
                list-files:x:/../*/_arg?value
                  filter:.hl
              list-folders:x:/../*/_arg?value
              for-each:x:/-/*?name
                add:x:/../*/return
                  desktop._list-files:x:/@_dp?value
              return

            /*
             * Extracts meta information from forward evaluated [.folder],
             * and displays as a widget hierarchy.
             */
            desktop.help.view-meta-information

              /*
               * Forward evaluated above.
               */
              .folder:x:/../*/folder?value

              /*
               * Unrolling path since we need its unrolled version later down the road.
               */
              p5.io.unroll-path:x:/@.folder?value

              /*
               * Retrieving all files from folder recursively.
               */
              desktop._list-files:x:/@.folder?value

              /*
               * Loading all files and transforming them to lambda,
               * making sure we preserve files' comments.
               */
              load-file:x:/@desktop._list-files/*?name
                convert:false
              hyper2lambda:x:/@load-file/*?value
                keep-comments:true

              /*
               * Figuring out parent widget of button, to use as container
               * for our meta information widget.
               */
              p5.web.widgets.get-parent:x:/../*/_event?value

              /*
               * Deleting our button, to avoid user clicks it again.
               */
              delete-widget:x:/../*/_event?value

              /*
               * Figuring our length of folder in KB.
               */
              .folder-length
              p5.io.folder.get-length:x:/@.folder?value
              set:x:/@.folder-length?value
                /:x:/@p5.io.folder.get-length/*?value
                  _:1024

              /*
               * Figuring out creation time of module's folder, which serves
               * as the installation time for module, and formatting it to a human
               * readable date string.
               */
              p5.io.folder.get-creation-time:x:/@.folder?value
              p5.types.date.format:x:/-/*?value
                format:"ddd dd. MMM yyyy - HH:mm"

              /*
               * Figuring out module's version number, if it is specified.
               */
              .version:?
              if
                fetch:x:/0/0?value
                  file-exists:{0}startup/version.hl
                    :x:/@.folder?value
                load-file:{0}startup/version.hl
                  :x:/@.folder?value
                set:x:/@.version?value
                  src:x:/@load-file/*/*/*/return?value

              /*
               * Checking if Hyper IDE is open, at which point we transform all folders and
               * file widgets into Hyperlinks widgets.
               */
              hyper-ide.is-open

              /*
               * Checking if Hyper IDE is open, at which point we make folder widget "clickable".
               */
              if:x:/@hyper-ide.is-open?value
                =:bool:true
                eval-x:x:/+/**/.folder-x
                add:x:/../*/create-widget/[0,1]/*/widgets/*/micro.widgets.grid/[0,1]/**/rows/*/item/[0,1]/*/Value/*/*
                  src
                    href:#
                    onclick
                      .folder-x:x:/@p5.io.unroll-path?value
                      hyper-ide.folder-explorer.select-path:x:/-?value
                set:x:/../*/create-widget/[0,1]/*/widgets/*/micro.widgets.grid/[0,1]/**/rows/*/item/[0,1]/*/Value/*/*?name
                  value:a

              /*
               * Adding Active Events created by module.
               */
              for-each:x:/@hyper2lambda/**(/create-event|/p5.events.create)

                /*
                 * Adding an "li" item for currently iterated [create-event] node, containing
                 * a hyperlink button, allowing the user to click the button, to view more meta
                 * information about event.
                 */
                eval-x:x:/+/*/*/*/*/*(/innerValue|/onclick/*(/.event|/.comment))
                add:x:/../*/create-widget/**/container/=active-events-for-module/*/widgets
                  src
                    li
                      widgets
                        text:<strong>[
                        a
                          href:#
                          innerValue:x:/@_dp/#?value
                          onclick

                            /*
                             * Forward evaluated above.
                             */
                            .event:x:/@_dp/#?value
                            .comment:x:/@_dp/#/@..comment?value

                            /*
                             * Tranforming comment to HTML.
                             */
                            markdown2html:x:/@.comment?value

                            /*
                             * Retrieving lambda contract for event.
                             */
                            micro.lambda.contract.get:x:/@.event?value

                            /*
                             * Checking that event has a lambda contract, at which point we
                             * add it up in our modal window.
                             */
                            if:x:/@micro.lambda.contract.get/*/*

                              /*
                               * Used as temporary buffer to hold lambda contract, such that
                               * we can display it as an event invocation.
                               */
                              .contract

                              /*
                               * Transforming lambda contract into an event invocation example.
                               */
                              add:x:/@.contract
                                src
                                  ..comment:@"Example invocation for the event.

Exchange the mandatory and optional arguments with real values."
                              add:x:/@.contract
                                src:x:/@micro.lambda.contract.get/*?name
                              if:x:/@micro.lambda.contract.get/0/*/min
                                add:x:/@.contract/1
                                  src
                                    ..comment:Mandatory argument(s)
                                add:x:/@.contract/1
                                  src:x:/@micro.lambda.contract.get/0/*/min/*
                              if:x:/@micro.lambda.contract.get/0/*/optional
                                add:x:/@.contract/1
                                  src
                                    ..comment:Optional argument(s)
                                add:x:/@.contract/1
                                  src:x:/@micro.lambda.contract.get/0/*/optional/*

                              /*
                               * Transforming lambda contract to Hyperlambda.
                               */
                              lambda2hyper:x:/@.contract/*
                                comments:unroll

                              /*
                               * Adding widgets to modal window, to display lambda contract.
                               */
                              eval-x:x:/+/*/*/*/value
                              insert-before:x:/../*/create-widgets/*/*/0/-
                                src
                                  micro.widgets.codemirror
                                    height:auto
                                    value:x:/@lambda2hyper?value
                                    mode:hyperlambda

                            /*
                             * Creating a modal window displaying meta information about event.
                             */
                            eval-x:x:/+/**
                            create-widgets
                              micro.widgets.modal:active-event-meta-modal
                                widgets
                                  h3
                                    innerValue:[{0}]
                                      :x:/@.event?value
                                  div
                                    innerValue:x:/@markdown2html?value
                                  div
                                    class:right
                                    widgets
                                      button
                                        innerValue:Close
                                        onclick
                                          delete-widget:active-event-meta-modal
                        text:]</strong>

              /*
               * Creating one "li" element for each Hyperlambda file in module's folder,
               * with its file descriptive comment, if existing.
               */
              for-each:x:/@load-file/*

                /*
                 * Retrieving filename.
                 */
                .filename
                set:x:/@.filename?value
                  replace:x:/@_dp/#?name
                    src:x:/@p5.io.unroll-path?value
                    dest:../

                /*
                 * Loading file (again) to check if it contains a descriptive comment.
                 */
                hyper2lambda:x:/@_dp/#?value
                  keep-comments:true

                /*
                 * Checking if Hyper IDE is open, and if so, making sure we add filename
                 * as a hyperlink, to allow for editing file directly in Hyper IDE, by
                 * clicking the filename.
                 */
                if:x:/@hyper-ide.is-open?value

                  /*
                   * Hyper IDE is running, making sure allow for clicking file path to edit file.
                   */
                  eval-x:x:/+/*/*/*/*/*(/.filepath|/innerValue)
                  add:x:/../*/create-widget/**/ul/=desktop-module-meta-files/*/widgets
                    src
                      li
                        widgets
                          a
                            href:#
                            .filepath:x:/@_dp/#?name
                            innerValue:x:/@.filename?value
                            style:"display:inline-block;margin-bottom:1rem;"
                            onclick

                              /*
                               * Opening file in Hyper IDE.
                               */
                              get-widget-property:x:/../*/_event?value
                                .filepath
                              hyper-ide.folder-explorer.select-path:x:/-/*/*?value

                else

                  /*
                   * Hyper IDE is not running, simply adding a label widget to "li" widget.
                   */
                  eval-x:x:/+/*/*/*/*/*
                  add:x:/../*/create-widget/**/ul/=desktop-module-meta-files/*/widgets
                    src
                      li
                        widgets
                          label
                            innerValue:x:/@.filename?value

                /*
                 * Checking if file has an initial comment, at which point we transform the comment's
                 * content to HTML, assuming it's Markdown, and add its comment to currently iterated "li"
                 * element.
                 */
                if:x:/@hyper2lambda/0?name
                  =:..comment

                  /*
                   * File contains an initial comment.
                   */
                  markdown2html:x:/@hyper2lambda/0?value
                  eval-x:x:/+/*/*/*/innerValue
                  add:x:/../*/create-widget/**/ul/=desktop-module-meta-files/*/widgets/0/-/*/widgets
                    src
                      div
                        innerValue:x:/@markdown2html?value

                else

                  /*
                   * No initial comment in file.
                   */
                  add:x:/../*/create-widget/**/ul/=desktop-module-meta-files/*/widgets/0/-/*/widgets
                    src
                      div
                        class:air-inner rounded warning
                        innerValue:<p>File does not contain a descriptive comment!</p>

              /*
               * Creating our meta information wrapper widget.
               */
              eval-x:x:/+2/*/widgets/*/micro.widgets.grid/[0,1](/*/*/*/Value|/*/*/*/Name/=Path/./*/Value/*/*/*)
              eval-x:x:/+/**/micro.widgets.chart.pie/*/*
              create-widget
                parent:x:/@p5.web.widgets.get-parent/*/*?value
                widgets
                  h2
                    innerValue:Module meta information
                  micro.widgets.grid
                    class:striped hover
                    rows
                      item
                        Name:Path
                        Value
                          widgets
                            span
                              innerValue:x:/@p5.io.unroll-path?value
                      item
                        Name:Hyperlambda files
                        Value:x:/@desktop._list-files/*?count
                      item
                        Name:Node count
                        Value:x:/@hyper2lambda/**(!/\..comment)?count
                      item
                        Name:Comment count
                        Value:x:/@hyper2lambda/**/\..comment?count
                      item
                        Name:Size of folder
                        Value:"{0:#.#} KB"
                          :x:/@.folder-length?value
                      item
                        Name:Installation date
                        Value:x:/@p5.types.date.format?value
                      item
                        Name:Version
                        Value:x:/@.version?value
                  div
                    class:row
                    widgets
                      div
                        class:col
                        widgets
                          h3
                            innerValue:Code to comments ration
                          micro.widgets.chart.pie
                            data
                              Code:x:/@hyper2lambda/**(!/\..comment)?count
                              Comments:x:/@hyper2lambda/**/\..comment?count
                      div
                        class:col
                        oninit

                          /*
                           * Forward evaluated above.
                           */
                          .folder:x:/../*/folder?value
                          p5.io.unroll-path:x:/-?value
                          split:x:/-?value
                            =:/

                          /*
                           * Listing folders and retrieving each folder's size in KB.
                           */
                          list-folders:/modules/
                          for-each:x:/@list-folders/*?name
                            p5.io.folder.get-length:x:/@_dp?value
                            /:x:/-/*?value
                              _:1024
                            eval-x:x:/+/*/*
                            split:x:/@_dp?value
                              =:/
                            add:x:/../*/create-widgets/*/*/data
                              src:"{0}:{1}"
                                :x:/@split/0/-?name
                                :x:/..for-each/*/\/?value

                          /*
                           * Creating a bar chart displaying each module folder's size.
                           */
                          add:x:/+/*/*/data/*/{0}
                            :x:/@split/0/-?name
                            src
                              color:LightGreen
                          create-widgets
                            micro.widgets.chart.column
                              parent:x:/../*/_event?value
                              data

                        widgets
                          h3
                            innerValue:Module's relative size in KB
                  h3
                    innerValue:Active Events created by module
                  container:active-events-for-module
                    element:ul
                    widgets
                  h3
                    innerValue:Hyperlambda file information
                  ul:desktop-module-meta-files
                    class:desktop-help-meta-file-list
                    widgets
